//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PLCSTPARSER.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PLCSTPARSERParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, T__120=121, T__121=122, T__122=123, T__123=124, T__124=125, 
		T__125=126, T__126=127, T__127=128, T__128=129, T__129=130, T__130=131, 
		T__131=132, T__132=133, T__133=134, T__134=135, T__135=136, T__136=137, 
		T__137=138, T__138=139, T__139=140, T__140=141, T__141=142, T__142=143, 
		T__143=144, T__144=145, T__145=146, T__146=147, T__147=148, T__148=149, 
		T__149=150, Unsigned_int=151, S_byte_char=152, D_byte_char=153, Direct_variable=154, 
		Direct_represented=155, Sign_Int_Type_Name=156, Unsign_Int_Type_Name=157, 
		Real_Type_Name=158, Time_Type_Name=159, Access_Spec=160, Tod_Type_Name=161, 
		Multibits_Type_Name=162, Std_Func_Name=163, Std_FB_Name=164, Access_Direction=165, 
		IL_Expr_Operator=166, IL_Call_Operator=167, IL_Return_Operator=168, IL_Jump_Operator=169, 
		Null=170, LD_Rung=171, FBD_Network=172, Other_Languages=173, Date_Type_Name=174, 
		Date_Type=175, DT_Type_Name=176, Bool_Type_Name=177, Identifier=178, IdentifierStart=179, 
		IdentifierPart=180, Digit=181, Bit=182, Octal_Digit=183, Hex_Digit=184, 
		Comment=185, WS=186, EOL=187, Pragma=188, S_byte_char_value=189, Common_Char_Byte=190, 
		Common_Char_Value=191, Char_Value=192, Char_doll=193, Char_other=194, 
		Char_S=195, Char_Blank=196, D_byte_char_value=197, Common_Char_ByteD=198, 
		ReservedKeyword=199;
	public const int
		RULE_startpoint = 0, RULE_identifier = 1, RULE_constant = 2, RULE_numeric_literal = 3, 
		RULE_int_literal = 4, RULE_signed_int = 5, RULE_binary_int = 6, RULE_octal_int = 7, 
		RULE_hex_int = 8, RULE_real_literal = 9, RULE_bit_str_literal = 10, RULE_bool_literal = 11, 
		RULE_char_literal = 12, RULE_char_str = 13, RULE_d_byte_char_value = 14, 
		RULE_time_literal = 15, RULE_duration = 16, RULE_fix_point = 17, RULE_interval = 18, 
		RULE_days = 19, RULE_hours = 20, RULE_minutes = 21, RULE_seconds = 22, 
		RULE_milliseconds = 23, RULE_microseconds = 24, RULE_nanoseconds = 25, 
		RULE_time_of_day = 26, RULE_daytime = 27, RULE_day_hour = 28, RULE_day_minute = 29, 
		RULE_day_second = 30, RULE_date = 31, RULE_date_literal = 32, RULE_year = 33, 
		RULE_month = 34, RULE_day = 35, RULE_date_and_time = 36, RULE_data_type_access = 37, 
		RULE_elem_type_name = 38, RULE_numeric_type_name = 39, RULE_int_type_name = 40, 
		RULE_string_type_name = 41, RULE_bit_str_type_name = 42, RULE_derived_type_access = 43, 
		RULE_string_type_access = 44, RULE_single_elem_type_access = 45, RULE_simple_type_access = 46, 
		RULE_subrange_type_access = 47, RULE_enum_type_access = 48, RULE_array_type_access = 49, 
		RULE_struct_type_access = 50, RULE_simple_type_name = 51, RULE_subrange_type_name = 52, 
		RULE_enum_type_name = 53, RULE_array_type_name = 54, RULE_struct_type_name = 55, 
		RULE_data_type_decl = 56, RULE_type_decl = 57, RULE_derived_type_decl = 58, 
		RULE_derived_type_name = 59, RULE_derived_spec_init = 60, RULE_simple_type_decl = 61, 
		RULE_simple_spec_init = 62, RULE_simple_spec = 63, RULE_subrange_type_decl = 64, 
		RULE_subrange_spec_init = 65, RULE_subrange_spec = 66, RULE_subrange = 67, 
		RULE_enum_type_decl = 68, RULE_named_spec_init = 69, RULE_enum_spec_init = 70, 
		RULE_enum_value_spec = 71, RULE_enum_value = 72, RULE_array_type_decl = 73, 
		RULE_array_spec_init = 74, RULE_array_spec = 75, RULE_array_init = 76, 
		RULE_array_elem_init = 77, RULE_array_elem_item_init = 78, RULE_array_elem_init_value = 79, 
		RULE_struct_type_decl = 80, RULE_struct_spec = 81, RULE_struct_spec_init = 82, 
		RULE_struct_decl = 83, RULE_struct_elem_decl = 84, RULE_struct_elem_name = 85, 
		RULE_struct_init = 86, RULE_struct_elem_init = 87, RULE_str_type_decl = 88, 
		RULE_ref_type_decl = 89, RULE_ref_spec_init = 90, RULE_ref_spec = 91, 
		RULE_ref_type_name = 92, RULE_ref_type_access = 93, RULE_ref_name = 94, 
		RULE_ref_value = 95, RULE_ref_addr = 96, RULE_ref_assign = 97, RULE_ref_deref = 98, 
		RULE_variable = 99, RULE_symbolic_variable = 100, RULE_var_access = 101, 
		RULE_variable_name = 102, RULE_multi_elem_var = 103, RULE_subscript_list = 104, 
		RULE_subscript = 105, RULE_struct_variable = 106, RULE_struct_elem_select = 107, 
		RULE_input_decls = 108, RULE_input_decl = 109, RULE_edge_decl = 110, RULE_var_decl_init = 111, 
		RULE_ref_var_decl = 112, RULE_interface_var_decl = 113, RULE_variable_list = 114, 
		RULE_array_var_decl_init = 115, RULE_array_conformand = 116, RULE_array_conform_decl = 117, 
		RULE_struct_var_decl_init = 118, RULE_fb_decl_no_init = 119, RULE_fb_decl_init = 120, 
		RULE_fb_name = 121, RULE_fb_instance_name = 122, RULE_output_decls = 123, 
		RULE_output_decl = 124, RULE_in_out_decls = 125, RULE_in_out_var_decl = 126, 
		RULE_var_decl = 127, RULE_array_var_decl = 128, RULE_struct_var_decl = 129, 
		RULE_var_decls = 130, RULE_retain_var_decls = 131, RULE_loc_var_decls = 132, 
		RULE_loc_var_decl = 133, RULE_temp_var_decls = 134, RULE_external_var_decls = 135, 
		RULE_external_decl = 136, RULE_global_var_name = 137, RULE_global_var_decls = 138, 
		RULE_global_var_decl = 139, RULE_global_var_spec = 140, RULE_loc_var_spec_init = 141, 
		RULE_located_at = 142, RULE_located_at_init = 143, RULE_str_var_decl = 144, 
		RULE_s_byte_str_var_decl = 145, RULE_s_byte_str_spec = 146, RULE_d_byte_str_var_decl = 147, 
		RULE_d_byte_str_spec = 148, RULE_loc_partly_var_decl = 149, RULE_loc_partly_var = 150, 
		RULE_var_spec = 151, RULE_func_name = 152, RULE_func_access = 153, RULE_derived_func_name = 154, 
		RULE_func_decl = 155, RULE_io_var_decls = 156, RULE_func_var_decls = 157, 
		RULE_func_body = 158, RULE_fb_type_name = 159, RULE_fb_type_access = 160, 
		RULE_derived_fb_name = 161, RULE_fb_decl = 162, RULE_fb_io_var_decls = 163, 
		RULE_fb_input_decls = 164, RULE_fb_input_decl = 165, RULE_fb_output_decls = 166, 
		RULE_fb_output_decl = 167, RULE_other_var_decls = 168, RULE_no_retain_var_decls = 169, 
		RULE_fb_body = 170, RULE_method_decl = 171, RULE_method_name = 172, RULE_class_decl = 173, 
		RULE_class_type_name = 174, RULE_class_type_access = 175, RULE_class_name = 176, 
		RULE_class_instance_name = 177, RULE_interface_decl = 178, RULE_method_prototype = 179, 
		RULE_interface_spec_init = 180, RULE_interface_value = 181, RULE_interface_name_list = 182, 
		RULE_interface_type_name = 183, RULE_interface_type_access = 184, RULE_interface_name = 185, 
		RULE_prog_decl = 186, RULE_prog_type_name = 187, RULE_prog_type_access = 188, 
		RULE_prog_access_decls = 189, RULE_prog_access_decl = 190, RULE_sfc = 191, 
		RULE_sfc_network = 192, RULE_initial_step = 193, RULE_step = 194, RULE_step_name = 195, 
		RULE_action_association = 196, RULE_action_name = 197, RULE_action_qualifier = 198, 
		RULE_action_time = 199, RULE_indicator_name = 200, RULE_transition = 201, 
		RULE_transition_name = 202, RULE_steps = 203, RULE_transition_cond = 204, 
		RULE_action = 205, RULE_config_name = 206, RULE_resource_type_name = 207, 
		RULE_config_decl = 208, RULE_resource_decl = 209, RULE_single_resource_decl = 210, 
		RULE_resource_name = 211, RULE_access_decls = 212, RULE_access_decl = 213, 
		RULE_access_path = 214, RULE_global_var_access = 215, RULE_access_name = 216, 
		RULE_prog_output_access = 217, RULE_prog_name = 218, RULE_task_config = 219, 
		RULE_task_name = 220, RULE_task_init = 221, RULE_data_source = 222, RULE_prog_config = 223, 
		RULE_prog_conf_elems = 224, RULE_prog_conf_elem = 225, RULE_fb_task = 226, 
		RULE_prog_cnxn = 227, RULE_prog_data_source = 228, RULE_data_sink = 229, 
		RULE_config_init = 230, RULE_config_inst_init = 231, RULE_namespace_decl = 232, 
		RULE_namespace_elements = 233, RULE_namespace_h_name = 234, RULE_namespace_name = 235, 
		RULE_using_directive = 236, RULE_pou_decl = 237, RULE_instruction_list = 238, 
		RULE_il_instruction = 239, RULE_il_simple_inst = 240, RULE_il_label = 241, 
		RULE_il_simple_operation = 242, RULE_il_expr = 243, RULE_il_jump_operation = 244, 
		RULE_il_invocation = 245, RULE_il_formal_func_call = 246, RULE_il_operand = 247, 
		RULE_il_operand_list = 248, RULE_il_simple_inst_list = 249, RULE_il_simple_instruction = 250, 
		RULE_il_param_list = 251, RULE_il_param_inst = 252, RULE_il_param_last_inst = 253, 
		RULE_il_param_assign = 254, RULE_il_param_out_assign = 255, RULE_il_simple_operator = 256, 
		RULE_il_assignment = 257, RULE_il_assign_out_operator = 258, RULE_expression = 259, 
		RULE_constant_expr = 260, RULE_xor_expr = 261, RULE_and_expr = 262, RULE_compare_expr = 263, 
		RULE_equ_expr = 264, RULE_add_expr = 265, RULE_term = 266, RULE_power_expr = 267, 
		RULE_unary_expr = 268, RULE_primary_expr = 269, RULE_variable_access = 270, 
		RULE_multibit_part_access = 271, RULE_func_call = 272, RULE_stmt_list = 273, 
		RULE_stmt = 274, RULE_assign_stmt = 275, RULE_assignment_attempt = 276, 
		RULE_invocation = 277, RULE_subprog_ctrl_stmt = 278, RULE_param_assign = 279, 
		RULE_selection_stmt = 280, RULE_if_stmt = 281, RULE_case_stmt = 282, RULE_case_selection = 283, 
		RULE_case_list = 284, RULE_case_list_elem = 285, RULE_iteration_stmt = 286, 
		RULE_for_stmt = 287, RULE_control_variable = 288, RULE_for_list = 289, 
		RULE_while_stmt = 290, RULE_repeat_stmt = 291, RULE_ladder_diagram = 292, 
		RULE_fb_diagram = 293, RULE_reservedKeyword = 294;
	public static readonly string[] ruleNames = {
		"startpoint", "identifier", "constant", "numeric_literal", "int_literal", 
		"signed_int", "binary_int", "octal_int", "hex_int", "real_literal", "bit_str_literal", 
		"bool_literal", "char_literal", "char_str", "d_byte_char_value", "time_literal", 
		"duration", "fix_point", "interval", "days", "hours", "minutes", "seconds", 
		"milliseconds", "microseconds", "nanoseconds", "time_of_day", "daytime", 
		"day_hour", "day_minute", "day_second", "date", "date_literal", "year", 
		"month", "day", "date_and_time", "data_type_access", "elem_type_name", 
		"numeric_type_name", "int_type_name", "string_type_name", "bit_str_type_name", 
		"derived_type_access", "string_type_access", "single_elem_type_access", 
		"simple_type_access", "subrange_type_access", "enum_type_access", "array_type_access", 
		"struct_type_access", "simple_type_name", "subrange_type_name", "enum_type_name", 
		"array_type_name", "struct_type_name", "data_type_decl", "type_decl", 
		"derived_type_decl", "derived_type_name", "derived_spec_init", "simple_type_decl", 
		"simple_spec_init", "simple_spec", "subrange_type_decl", "subrange_spec_init", 
		"subrange_spec", "subrange", "enum_type_decl", "named_spec_init", "enum_spec_init", 
		"enum_value_spec", "enum_value", "array_type_decl", "array_spec_init", 
		"array_spec", "array_init", "array_elem_init", "array_elem_item_init", 
		"array_elem_init_value", "struct_type_decl", "struct_spec", "struct_spec_init", 
		"struct_decl", "struct_elem_decl", "struct_elem_name", "struct_init", 
		"struct_elem_init", "str_type_decl", "ref_type_decl", "ref_spec_init", 
		"ref_spec", "ref_type_name", "ref_type_access", "ref_name", "ref_value", 
		"ref_addr", "ref_assign", "ref_deref", "variable", "symbolic_variable", 
		"var_access", "variable_name", "multi_elem_var", "subscript_list", "subscript", 
		"struct_variable", "struct_elem_select", "input_decls", "input_decl", 
		"edge_decl", "var_decl_init", "ref_var_decl", "interface_var_decl", "variable_list", 
		"array_var_decl_init", "array_conformand", "array_conform_decl", "struct_var_decl_init", 
		"fb_decl_no_init", "fb_decl_init", "fb_name", "fb_instance_name", "output_decls", 
		"output_decl", "in_out_decls", "in_out_var_decl", "var_decl", "array_var_decl", 
		"struct_var_decl", "var_decls", "retain_var_decls", "loc_var_decls", "loc_var_decl", 
		"temp_var_decls", "external_var_decls", "external_decl", "global_var_name", 
		"global_var_decls", "global_var_decl", "global_var_spec", "loc_var_spec_init", 
		"located_at", "located_at_init", "str_var_decl", "s_byte_str_var_decl", 
		"s_byte_str_spec", "d_byte_str_var_decl", "d_byte_str_spec", "loc_partly_var_decl", 
		"loc_partly_var", "var_spec", "func_name", "func_access", "derived_func_name", 
		"func_decl", "io_var_decls", "func_var_decls", "func_body", "fb_type_name", 
		"fb_type_access", "derived_fb_name", "fb_decl", "fb_io_var_decls", "fb_input_decls", 
		"fb_input_decl", "fb_output_decls", "fb_output_decl", "other_var_decls", 
		"no_retain_var_decls", "fb_body", "method_decl", "method_name", "class_decl", 
		"class_type_name", "class_type_access", "class_name", "class_instance_name", 
		"interface_decl", "method_prototype", "interface_spec_init", "interface_value", 
		"interface_name_list", "interface_type_name", "interface_type_access", 
		"interface_name", "prog_decl", "prog_type_name", "prog_type_access", "prog_access_decls", 
		"prog_access_decl", "sfc", "sfc_network", "initial_step", "step", "step_name", 
		"action_association", "action_name", "action_qualifier", "action_time", 
		"indicator_name", "transition", "transition_name", "steps", "transition_cond", 
		"action", "config_name", "resource_type_name", "config_decl", "resource_decl", 
		"single_resource_decl", "resource_name", "access_decls", "access_decl", 
		"access_path", "global_var_access", "access_name", "prog_output_access", 
		"prog_name", "task_config", "task_name", "task_init", "data_source", "prog_config", 
		"prog_conf_elems", "prog_conf_elem", "fb_task", "prog_cnxn", "prog_data_source", 
		"data_sink", "config_init", "config_inst_init", "namespace_decl", "namespace_elements", 
		"namespace_h_name", "namespace_name", "using_directive", "pou_decl", "instruction_list", 
		"il_instruction", "il_simple_inst", "il_label", "il_simple_operation", 
		"il_expr", "il_jump_operation", "il_invocation", "il_formal_func_call", 
		"il_operand", "il_operand_list", "il_simple_inst_list", "il_simple_instruction", 
		"il_param_list", "il_param_inst", "il_param_last_inst", "il_param_assign", 
		"il_param_out_assign", "il_simple_operator", "il_assignment", "il_assign_out_operator", 
		"expression", "constant_expr", "xor_expr", "and_expr", "compare_expr", 
		"equ_expr", "add_expr", "term", "power_expr", "unary_expr", "primary_expr", 
		"variable_access", "multibit_part_access", "func_call", "stmt_list", "stmt", 
		"assign_stmt", "assignment_attempt", "invocation", "subprog_ctrl_stmt", 
		"param_assign", "selection_stmt", "if_stmt", "case_stmt", "case_selection", 
		"case_list", "case_list_elem", "iteration_stmt", "for_stmt", "control_variable", 
		"for_list", "while_stmt", "repeat_stmt", "ladder_diagram", "fb_diagram", 
		"reservedKeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, "'E'", "'T'", "'L'", "'D'", "'I'", "'Q'", "'M'", "'X'", "'B'", "'W'", 
		"'N'", "'R'", "'S'", "'P'", "'#'", "'+'", "'-'", "'2#'", "'_'", "'8#'", 
		"'16#'", "'.'", "'FALSE'", "'TRUE'", "'STRING'", "'$'", "'d'", "'h'", 
		"'m'", "'s'", "'u'", "'n'", "'LTIME_OF_DAY'", "':'", "'LDATE_AND_TIME'", 
		"'['", "']'", "'WSTRING'", "'CHAR'", "'WCHAR'", "'TYPE'", "';'", "'END_TYPE'", 
		"'='", "'('", "')'", "'..'", "','", "'ARRAY'", "'OF'", "'STRUCT'", "'OVERLAP'", 
		"'END_STRUCT'", "'REF_TO'", "'REF'", "'^'", "'THIS'", "'VAR_INPUT'", "'RETAIN'", 
		"'NON_RETAIN'", "'END_VAR'", "'R_EDGE'", "'F_EDGE'", "'*'", "'VAR_OUTPUT'", 
		"'VAR_IN_OUT'", "'VAR'", "'CONSTANT'", "'VAR_TEMP'", "'VAR_EXTERNAL'", 
		"'VAR_GLOBAL'", "'AT'", "'%'", "'FUNCTION'", "'END_FUNCTION'", "'FUNCTION_BLOCK'", 
		"'FINAL'", "'ABSTRACT'", "'EXTENDS'", "'IMPLEMENTS'", "'END_FUNCTION_BLOCK'", 
		"'METHOD'", "'OVERRIDE'", "'END_METHOD'", "'CLASS'", "'END_CLASS'", "'INTERFACE'", 
		"'END_INTERFACE'", "'PROGRAM'", "'END_PROGRAM'", "'VAR_ACCESS'", "'INITIAL_STEP'", 
		"'END_STEP'", "'STEP'", "'TRANSITION'", "'PRIORITY'", "'FROM'", "'TO'", 
		"'END_TRANSITION'", "'ACTION'", "'END_ACTION'", "'CONFIGURATION'", "'END_CONFIGURATION'", 
		"'RESOURCE'", "'ON'", "'END_RESOURCE'", "'TASK'", "'SINGLE'", "'INTERVAL'", 
		"'WITH'", "'=>'", "'VAR_CONFIG'", "'NAMESPACE'", "'INTERNAL'", "'END_NAMESPACE'", 
		"'USING'", "'THIS '", "'SUPER'", "'IL_Operator'", "'NOT'", "'>'", "'OR'", 
		"'XOR'", "'&'", "'AND'", "'<>'", "'<'", "'/'", "'MOD'", "'**'", "'?'", 
		"'RETURN'", "'IF'", "'THEN'", "'ELSIF'", "'ELSE'", "'END_IF'", "'CASE'", 
		"'END_CASE'", "'EXIT'", "'CONTINUE'", "'FOR'", "'DO'", "'END_FOR'", "'BY'", 
		"'WHILE'", "'END_WHILE'", "'REPEAT'", "'UNTIL'", "'END_REPEAT'", null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'IL_Expr_Operator'", null, null, null, "'NULL'", "'syntaxlexer for graphical languages not shown here'", 
		"'syntaxlexer for graphical languages not shown here11'", "'syntaxlexer for other languages not shown here'", 
		null, null, null, "'BOOL'", null, null, null, null, null, null, null, 
		null, null, "'\\n'", null, null, null, null, null, "'$$'", null, "'\"'", 
		"' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "Unsigned_int", "S_byte_char", 
		"D_byte_char", "Direct_variable", "Direct_represented", "Sign_Int_Type_Name", 
		"Unsign_Int_Type_Name", "Real_Type_Name", "Time_Type_Name", "Access_Spec", 
		"Tod_Type_Name", "Multibits_Type_Name", "Std_Func_Name", "Std_FB_Name", 
		"Access_Direction", "IL_Expr_Operator", "IL_Call_Operator", "IL_Return_Operator", 
		"IL_Jump_Operator", "Null", "LD_Rung", "FBD_Network", "Other_Languages", 
		"Date_Type_Name", "Date_Type", "DT_Type_Name", "Bool_Type_Name", "Identifier", 
		"IdentifierStart", "IdentifierPart", "Digit", "Bit", "Octal_Digit", "Hex_Digit", 
		"Comment", "WS", "EOL", "Pragma", "S_byte_char_value", "Common_Char_Byte", 
		"Common_Char_Value", "Char_Value", "Char_doll", "Char_other", "Char_S", 
		"Char_Blank", "D_byte_char_value", "Common_Char_ByteD", "ReservedKeyword"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PLCSTPARSER.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PLCSTPARSERParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PLCSTPARSERParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PLCSTPARSERParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartpointContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PLCSTPARSERParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext[] func_decl() {
			return GetRuleContexts<Func_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext func_decl(int i) {
			return GetRuleContext<Func_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Config_declContext[] config_decl() {
			return GetRuleContexts<Config_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Config_declContext config_decl(int i) {
			return GetRuleContext<Config_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_declContext[] prog_decl() {
			return GetRuleContexts<Prog_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_declContext prog_decl(int i) {
			return GetRuleContext<Prog_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pou_declContext[] pou_decl() {
			return GetRuleContexts<Pou_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pou_declContext pou_decl(int i) {
			return GetRuleContext<Pou_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_declContext[] fb_decl() {
			return GetRuleContexts<Fb_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_declContext fb_decl(int i) {
			return GetRuleContext<Fb_declContext>(i);
		}
		public StartpointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startpoint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStartpoint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStartpoint(this);
		}
	}

	[RuleVersion(0)]
	public StartpointContext startpoint() {
		StartpointContext _localctx = new StartpointContext(Context, State);
		EnterRule(_localctx, 0, RULE_startpoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 596;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 590;
					func_decl();
					}
					break;
				case 2:
					{
					State = 591;
					config_decl();
					}
					break;
				case 3:
					{
					State = 592;
					prog_decl();
					}
					break;
				case 4:
					{
					State = 593;
					pou_decl();
					}
					break;
				case 5:
					{
					State = 594;
					fb_decl();
					}
					break;
				case 6:
					{
					State = 595;
					pou_decl();
					}
					break;
				}
				}
				State = 598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__40 || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 39584567476265L) != 0) );
			State = 600;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PLCSTPARSERParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_literalContext char_literal() {
			return GetRuleContext<Char_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Time_literalContext time_literal() {
			return GetRuleContext<Time_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bit_str_literalContext bit_str_literal() {
			return GetRuleContext<Bit_str_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_literalContext bool_literal() {
			return GetRuleContext<Bool_literalContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 4, RULE_constant);
		try {
			State = 609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 604;
				numeric_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 605;
				char_literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 606;
				time_literal();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 607;
				bit_str_literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 608;
				bool_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_literalContext int_literal() {
			return GetRuleContext<Int_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_literalContext real_literal() {
			return GetRuleContext<Real_literalContext>(0);
		}
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 6, RULE_numeric_literal);
		try {
			State = 613;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 611;
				int_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 612;
				real_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_intContext signed_int() {
			return GetRuleContext<Signed_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_intContext binary_int() {
			return GetRuleContext<Binary_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Octal_intContext octal_int() {
			return GetRuleContext<Octal_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hex_intContext hex_int() {
			return GetRuleContext<Hex_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_type_nameContext int_type_name() {
			return GetRuleContext<Int_type_nameContext>(0);
		}
		public Int_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInt_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInt_literal(this);
		}
	}

	[RuleVersion(0)]
	public Int_literalContext int_literal() {
		Int_literalContext _localctx = new Int_literalContext(Context, State);
		EnterRule(_localctx, 8, RULE_int_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sign_Int_Type_Name || _la==Unsign_Int_Type_Name) {
				{
				State = 615;
				int_type_name();
				State = 616;
				Match(T__14);
				}
			}

			State = 624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
			case T__16:
			case Unsigned_int:
				{
				State = 620;
				signed_int();
				}
				break;
			case T__17:
				{
				State = 621;
				binary_int();
				}
				break;
			case T__19:
				{
				State = 622;
				octal_int();
				}
				break;
			case T__20:
				{
				State = 623;
				hex_int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		public Signed_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSigned_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSigned_int(this);
		}
	}

	[RuleVersion(0)]
	public Signed_intContext signed_int() {
		Signed_intContext _localctx = new Signed_intContext(Context, State);
		EnterRule(_localctx, 10, RULE_signed_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15 || _la==T__16) {
				{
				State = 626;
				_la = TokenStream.LA(1);
				if ( !(_la==T__15 || _la==T__16) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 629;
			Match(Unsigned_int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Bit() { return GetTokens(PLCSTPARSERParser.Bit); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bit(int i) {
			return GetToken(PLCSTPARSERParser.Bit, i);
		}
		public Binary_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterBinary_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitBinary_int(this);
		}
	}

	[RuleVersion(0)]
	public Binary_intContext binary_int() {
		Binary_intContext _localctx = new Binary_intContext(Context, State);
		EnterRule(_localctx, 12, RULE_binary_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(T__17);
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 632;
					Match(T__18);
					}
				}

				State = 635;
				Match(Bit);
				}
				}
				State = 638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__18 || _la==Bit );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Octal_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Octal_Digit() { return GetTokens(PLCSTPARSERParser.Octal_Digit); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Octal_Digit(int i) {
			return GetToken(PLCSTPARSERParser.Octal_Digit, i);
		}
		public Octal_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octal_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterOctal_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitOctal_int(this);
		}
	}

	[RuleVersion(0)]
	public Octal_intContext octal_int() {
		Octal_intContext _localctx = new Octal_intContext(Context, State);
		EnterRule(_localctx, 14, RULE_octal_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			Match(T__19);
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 641;
					Match(T__18);
					}
				}

				State = 644;
				Match(Octal_Digit);
				}
				}
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__18 || _la==Octal_Digit );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hex_intContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Hex_Digit() { return GetTokens(PLCSTPARSERParser.Hex_Digit); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hex_Digit(int i) {
			return GetToken(PLCSTPARSERParser.Hex_Digit, i);
		}
		public Hex_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hex_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterHex_int(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitHex_int(this);
		}
	}

	[RuleVersion(0)]
	public Hex_intContext hex_int() {
		Hex_intContext _localctx = new Hex_intContext(Context, State);
		EnterRule(_localctx, 16, RULE_hex_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(T__20);
			State = 654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 650;
					Match(T__18);
					}
				}

				State = 653;
				Match(Hex_Digit);
				}
				}
				State = 656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__18 || _la==Hex_Digit );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_intContext[] signed_int() {
			return GetRuleContexts<Signed_intContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_intContext signed_int(int i) {
			return GetRuleContext<Signed_intContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Type_Name() { return GetToken(PLCSTPARSERParser.Real_Type_Name, 0); }
		public Real_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterReal_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitReal_literal(this);
		}
	}

	[RuleVersion(0)]
	public Real_literalContext real_literal() {
		Real_literalContext _localctx = new Real_literalContext(Context, State);
		EnterRule(_localctx, 18, RULE_real_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Real_Type_Name) {
				{
				State = 658;
				Match(Real_Type_Name);
				State = 659;
				Match(T__14);
				}
			}

			State = 662;
			signed_int();
			State = 663;
			Match(T__21);
			State = 664;
			Match(Unsigned_int);
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 665;
				Match(T__0);
				State = 666;
				signed_int();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_str_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Binary_intContext binary_int() {
			return GetRuleContext<Binary_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Octal_intContext octal_int() {
			return GetRuleContext<Octal_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hex_intContext hex_int() {
			return GetRuleContext<Hex_intContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multibits_Type_Name() { return GetToken(PLCSTPARSERParser.Multibits_Type_Name, 0); }
		public Bit_str_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_str_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterBit_str_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitBit_str_literal(this);
		}
	}

	[RuleVersion(0)]
	public Bit_str_literalContext bit_str_literal() {
		Bit_str_literalContext _localctx = new Bit_str_literalContext(Context, State);
		EnterRule(_localctx, 20, RULE_bit_str_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multibits_Type_Name) {
				{
				State = 669;
				Match(Multibits_Type_Name);
				State = 670;
				Match(T__14);
				}
			}

			State = 677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Unsigned_int:
				{
				State = 673;
				Match(Unsigned_int);
				}
				break;
			case T__17:
				{
				State = 674;
				binary_int();
				}
				break;
			case T__19:
				{
				State = 675;
				octal_int();
				}
				break;
			case T__20:
				{
				State = 676;
				hex_int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bit() { return GetToken(PLCSTPARSERParser.Bit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool_Type_Name() { return GetToken(PLCSTPARSERParser.Bool_Type_Name, 0); }
		public Bool_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterBool_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitBool_literal(this);
		}
	}

	[RuleVersion(0)]
	public Bool_literalContext bool_literal() {
		Bool_literalContext _localctx = new Bool_literalContext(Context, State);
		EnterRule(_localctx, 22, RULE_bool_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Bool_Type_Name) {
				{
				State = 679;
				Match(Bool_Type_Name);
				State = 680;
				Match(T__14);
				}
			}

			State = 683;
			_la = TokenStream.LA(1);
			if ( !(_la==T__22 || _la==T__23 || _la==Bit) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Char_strContext char_str() {
			return GetRuleContext<Char_strContext>(0);
		}
		public Char_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterChar_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitChar_literal(this);
		}
	}

	[RuleVersion(0)]
	public Char_literalContext char_literal() {
		Char_literalContext _localctx = new Char_literalContext(Context, State);
		EnterRule(_localctx, 24, RULE_char_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 685;
				Match(T__24);
				State = 686;
				Match(T__14);
				}
			}

			State = 689;
			char_str();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_strContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S_byte_char() { return GetToken(PLCSTPARSERParser.S_byte_char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode D_byte_char() { return GetToken(PLCSTPARSERParser.D_byte_char, 0); }
		public Char_strContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_str; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterChar_str(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitChar_str(this);
		}
	}

	[RuleVersion(0)]
	public Char_strContext char_str() {
		Char_strContext _localctx = new Char_strContext(Context, State);
		EnterRule(_localctx, 26, RULE_char_str);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			_la = TokenStream.LA(1);
			if ( !(_la==S_byte_char || _la==D_byte_char) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class D_byte_char_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Common_Char_Value() { return GetTokens(PLCSTPARSERParser.Common_Char_Value); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Common_Char_Value(int i) {
			return GetToken(PLCSTPARSERParser.Common_Char_Value, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Hex_Digit() { return GetTokens(PLCSTPARSERParser.Hex_Digit); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hex_Digit(int i) {
			return GetToken(PLCSTPARSERParser.Hex_Digit, i);
		}
		public D_byte_char_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_d_byte_char_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterD_byte_char_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitD_byte_char_value(this);
		}
	}

	[RuleVersion(0)]
	public D_byte_char_valueContext d_byte_char_value() {
		D_byte_char_valueContext _localctx = new D_byte_char_valueContext(Context, State);
		EnterRule(_localctx, 28, RULE_d_byte_char_value);
		int _la;
		try {
			State = 703;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Common_Char_Value:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 693;
					Match(Common_Char_Value);
					}
					}
					State = 696;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Common_Char_Value );
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 698;
				Match(T__25);
				State = 699;
				Match(Hex_Digit);
				State = 700;
				Match(Hex_Digit);
				State = 701;
				Match(Hex_Digit);
				State = 702;
				Match(Hex_Digit);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration() {
			return GetRuleContext<DurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Time_of_dayContext time_of_day() {
			return GetRuleContext<Time_of_dayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Date_and_timeContext date_and_time() {
			return GetRuleContext<Date_and_timeContext>(0);
		}
		public Time_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterTime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitTime_literal(this);
		}
	}

	[RuleVersion(0)]
	public Time_literalContext time_literal() {
		Time_literalContext _localctx = new Time_literalContext(Context, State);
		EnterRule(_localctx, 30, RULE_time_literal);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 705;
				duration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 706;
				time_of_day();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 707;
				date();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 708;
				date_and_time();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Time_Type_Name() { return GetToken(PLCSTPARSERParser.Time_Type_Name, 0); }
		public DurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDuration(this);
		}
	}

	[RuleVersion(0)]
	public DurationContext duration() {
		DurationContext _localctx = new DurationContext(Context, State);
		EnterRule(_localctx, 32, RULE_duration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Time_Type_Name:
				{
				State = 711;
				Match(Time_Type_Name);
				}
				break;
			case T__1:
				{
				State = 712;
				Match(T__1);
				}
				break;
			case T__2:
				{
				State = 713;
				Match(T__2);
				State = 714;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 717;
			Match(T__14);
			State = 719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15 || _la==T__16) {
				{
				State = 718;
				_la = TokenStream.LA(1);
				if ( !(_la==T__15 || _la==T__16) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 721;
			interval();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fix_pointContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Unsigned_int() { return GetTokens(PLCSTPARSERParser.Unsigned_int); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int(int i) {
			return GetToken(PLCSTPARSERParser.Unsigned_int, i);
		}
		public Fix_pointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fix_point; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFix_point(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFix_point(this);
		}
	}

	[RuleVersion(0)]
	public Fix_pointContext fix_point() {
		Fix_pointContext _localctx = new Fix_pointContext(Context, State);
		EnterRule(_localctx, 34, RULE_fix_point);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			Match(Unsigned_int);
			State = 726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 724;
				Match(T__21);
				State = 725;
				Match(Unsigned_int);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DaysContext days() {
			return GetRuleContext<DaysContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HoursContext hours() {
			return GetRuleContext<HoursContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinutesContext minutes() {
			return GetRuleContext<MinutesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SecondsContext seconds() {
			return GetRuleContext<SecondsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MillisecondsContext milliseconds() {
			return GetRuleContext<MillisecondsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MicrosecondsContext microseconds() {
			return GetRuleContext<MicrosecondsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NanosecondsContext nanoseconds() {
			return GetRuleContext<NanosecondsContext>(0);
		}
		public IntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInterval(this);
		}
	}

	[RuleVersion(0)]
	public IntervalContext interval() {
		IntervalContext _localctx = new IntervalContext(Context, State);
		EnterRule(_localctx, 36, RULE_interval);
		try {
			State = 735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 728;
				days();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 729;
				hours();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 730;
				minutes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 731;
				seconds();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 732;
				milliseconds();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 733;
				microseconds();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 734;
				nanoseconds();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DaysContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fix_pointContext fix_point() {
			return GetRuleContext<Fix_pointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HoursContext hours() {
			return GetRuleContext<HoursContext>(0);
		}
		public DaysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_days; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDays(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDays(this);
		}
	}

	[RuleVersion(0)]
	public DaysContext days() {
		DaysContext _localctx = new DaysContext(Context, State);
		EnterRule(_localctx, 38, RULE_days);
		int _la;
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 737;
				fix_point();
				State = 738;
				Match(T__26);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 740;
				Match(Unsigned_int);
				State = 741;
				Match(T__26);
				State = 744;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 742;
					Match(T__18);
					State = 743;
					hours();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HoursContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fix_pointContext fix_point() {
			return GetRuleContext<Fix_pointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MinutesContext minutes() {
			return GetRuleContext<MinutesContext>(0);
		}
		public HoursContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hours; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterHours(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitHours(this);
		}
	}

	[RuleVersion(0)]
	public HoursContext hours() {
		HoursContext _localctx = new HoursContext(Context, State);
		EnterRule(_localctx, 40, RULE_hours);
		int _la;
		try {
			State = 757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 748;
				fix_point();
				State = 749;
				Match(T__27);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 751;
				Match(Unsigned_int);
				State = 752;
				Match(T__27);
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 753;
					Match(T__18);
					State = 754;
					minutes();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinutesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fix_pointContext fix_point() {
			return GetRuleContext<Fix_pointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SecondsContext seconds() {
			return GetRuleContext<SecondsContext>(0);
		}
		public MinutesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minutes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterMinutes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitMinutes(this);
		}
	}

	[RuleVersion(0)]
	public MinutesContext minutes() {
		MinutesContext _localctx = new MinutesContext(Context, State);
		EnterRule(_localctx, 42, RULE_minutes);
		int _la;
		try {
			State = 768;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 759;
				fix_point();
				State = 760;
				Match(T__28);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 762;
				Match(Unsigned_int);
				State = 763;
				Match(T__28);
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 764;
					Match(T__18);
					State = 765;
					seconds();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fix_pointContext fix_point() {
			return GetRuleContext<Fix_pointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MillisecondsContext milliseconds() {
			return GetRuleContext<MillisecondsContext>(0);
		}
		public SecondsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seconds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSeconds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSeconds(this);
		}
	}

	[RuleVersion(0)]
	public SecondsContext seconds() {
		SecondsContext _localctx = new SecondsContext(Context, State);
		EnterRule(_localctx, 44, RULE_seconds);
		int _la;
		try {
			State = 779;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 770;
				fix_point();
				State = 771;
				Match(T__29);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 773;
				Match(Unsigned_int);
				State = 774;
				Match(T__29);
				State = 777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 775;
					Match(T__18);
					State = 776;
					milliseconds();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MillisecondsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fix_pointContext fix_point() {
			return GetRuleContext<Fix_pointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MicrosecondsContext microseconds() {
			return GetRuleContext<MicrosecondsContext>(0);
		}
		public MillisecondsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_milliseconds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterMilliseconds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitMilliseconds(this);
		}
	}

	[RuleVersion(0)]
	public MillisecondsContext milliseconds() {
		MillisecondsContext _localctx = new MillisecondsContext(Context, State);
		EnterRule(_localctx, 46, RULE_milliseconds);
		int _la;
		try {
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 781;
				fix_point();
				State = 782;
				Match(T__28);
				State = 783;
				Match(T__29);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 785;
				Match(Unsigned_int);
				State = 786;
				Match(T__28);
				State = 787;
				Match(T__29);
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 788;
					Match(T__18);
					State = 789;
					microseconds();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MicrosecondsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fix_pointContext fix_point() {
			return GetRuleContext<Fix_pointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NanosecondsContext nanoseconds() {
			return GetRuleContext<NanosecondsContext>(0);
		}
		public MicrosecondsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_microseconds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterMicroseconds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitMicroseconds(this);
		}
	}

	[RuleVersion(0)]
	public MicrosecondsContext microseconds() {
		MicrosecondsContext _localctx = new MicrosecondsContext(Context, State);
		EnterRule(_localctx, 48, RULE_microseconds);
		int _la;
		try {
			State = 805;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 794;
				fix_point();
				State = 795;
				Match(T__30);
				State = 796;
				Match(T__29);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 798;
				Match(Unsigned_int);
				State = 799;
				Match(T__30);
				State = 800;
				Match(T__29);
				State = 803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 801;
					Match(T__18);
					State = 802;
					nanoseconds();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NanosecondsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fix_pointContext fix_point() {
			return GetRuleContext<Fix_pointContext>(0);
		}
		public NanosecondsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nanoseconds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterNanoseconds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitNanoseconds(this);
		}
	}

	[RuleVersion(0)]
	public NanosecondsContext nanoseconds() {
		NanosecondsContext _localctx = new NanosecondsContext(Context, State);
		EnterRule(_localctx, 50, RULE_nanoseconds);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			fix_point();
			State = 808;
			Match(T__31);
			State = 809;
			Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_of_dayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DaytimeContext daytime() {
			return GetRuleContext<DaytimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tod_Type_Name() { return GetToken(PLCSTPARSERParser.Tod_Type_Name, 0); }
		public Time_of_dayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_of_day; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterTime_of_day(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitTime_of_day(this);
		}
	}

	[RuleVersion(0)]
	public Time_of_dayContext time_of_day() {
		Time_of_dayContext _localctx = new Time_of_dayContext(Context, State);
		EnterRule(_localctx, 52, RULE_time_of_day);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			_la = TokenStream.LA(1);
			if ( !(_la==T__32 || _la==Tod_Type_Name) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 812;
			Match(T__14);
			State = 813;
			daytime();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DaytimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Day_hourContext day_hour() {
			return GetRuleContext<Day_hourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Day_minuteContext day_minute() {
			return GetRuleContext<Day_minuteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Day_secondContext day_second() {
			return GetRuleContext<Day_secondContext>(0);
		}
		public DaytimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_daytime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDaytime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDaytime(this);
		}
	}

	[RuleVersion(0)]
	public DaytimeContext daytime() {
		DaytimeContext _localctx = new DaytimeContext(Context, State);
		EnterRule(_localctx, 54, RULE_daytime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			day_hour();
			State = 816;
			Match(T__33);
			State = 817;
			day_minute();
			State = 818;
			Match(T__33);
			State = 819;
			day_second();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Day_hourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		public Day_hourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_day_hour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDay_hour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDay_hour(this);
		}
	}

	[RuleVersion(0)]
	public Day_hourContext day_hour() {
		Day_hourContext _localctx = new Day_hourContext(Context, State);
		EnterRule(_localctx, 56, RULE_day_hour);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			Match(Unsigned_int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Day_minuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		public Day_minuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_day_minute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDay_minute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDay_minute(this);
		}
	}

	[RuleVersion(0)]
	public Day_minuteContext day_minute() {
		Day_minuteContext _localctx = new Day_minuteContext(Context, State);
		EnterRule(_localctx, 58, RULE_day_minute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(Unsigned_int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Day_secondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fix_pointContext fix_point() {
			return GetRuleContext<Fix_pointContext>(0);
		}
		public Day_secondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_day_second; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDay_second(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDay_second(this);
		}
	}

	[RuleVersion(0)]
	public Day_secondContext day_second() {
		Day_secondContext _localctx = new Day_secondContext(Context, State);
		EnterRule(_localctx, 60, RULE_day_second);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			fix_point();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Date_literalContext date_literal() {
			return GetRuleContext<Date_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Date_Type_Name() { return GetToken(PLCSTPARSERParser.Date_Type_Name, 0); }
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(Context, State);
		EnterRule(_localctx, 62, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Date_Type_Name:
				{
				State = 827;
				Match(Date_Type_Name);
				}
				break;
			case T__3:
				{
				State = 828;
				Match(T__3);
				}
				break;
			case T__2:
				{
				State = 829;
				Match(T__2);
				State = 830;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 833;
			Match(T__14);
			State = 834;
			date_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public YearContext year() {
			return GetRuleContext<YearContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonthContext month() {
			return GetRuleContext<MonthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayContext day() {
			return GetRuleContext<DayContext>(0);
		}
		public Date_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDate_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDate_literal(this);
		}
	}

	[RuleVersion(0)]
	public Date_literalContext date_literal() {
		Date_literalContext _localctx = new Date_literalContext(Context, State);
		EnterRule(_localctx, 64, RULE_date_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			year();
			State = 837;
			Match(T__16);
			State = 838;
			month();
			State = 839;
			Match(T__16);
			State = 840;
			day();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YearContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		public YearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_year; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterYear(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitYear(this);
		}
	}

	[RuleVersion(0)]
	public YearContext year() {
		YearContext _localctx = new YearContext(Context, State);
		EnterRule(_localctx, 66, RULE_year);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			Match(Unsigned_int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		public MonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_month; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterMonth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitMonth(this);
		}
	}

	[RuleVersion(0)]
	public MonthContext month() {
		MonthContext _localctx = new MonthContext(Context, State);
		EnterRule(_localctx, 68, RULE_month);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			Match(Unsigned_int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		public DayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_day; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDay(this);
		}
	}

	[RuleVersion(0)]
	public DayContext day() {
		DayContext _localctx = new DayContext(Context, State);
		EnterRule(_localctx, 70, RULE_day);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(Unsigned_int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_and_timeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Date_literalContext date_literal() {
			return GetRuleContext<Date_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DaytimeContext daytime() {
			return GetRuleContext<DaytimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DT_Type_Name() { return GetToken(PLCSTPARSERParser.DT_Type_Name, 0); }
		public Date_and_timeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_and_time; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDate_and_time(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDate_and_time(this);
		}
	}

	[RuleVersion(0)]
	public Date_and_timeContext date_and_time() {
		Date_and_timeContext _localctx = new Date_and_timeContext(Context, State);
		EnterRule(_localctx, 72, RULE_date_and_time);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			_la = TokenStream.LA(1);
			if ( !(_la==T__34 || _la==DT_Type_Name) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 849;
			Match(T__14);
			State = 850;
			date_literal();
			State = 851;
			Match(T__16);
			State = 852;
			daytime();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Elem_type_nameContext elem_type_name() {
			return GetRuleContext<Elem_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Derived_type_accessContext derived_type_access() {
			return GetRuleContext<Derived_type_accessContext>(0);
		}
		public Data_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterData_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitData_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Data_type_accessContext data_type_access() {
		Data_type_accessContext _localctx = new Data_type_accessContext(Context, State);
		EnterRule(_localctx, 74, RULE_data_type_access);
		try {
			State = 856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854;
				elem_type_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 855;
				derived_type_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elem_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_type_nameContext numeric_type_name() {
			return GetRuleContext<Numeric_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bit_str_type_nameContext bit_str_type_name() {
			return GetRuleContext<Bit_str_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_type_nameContext string_type_name() {
			return GetRuleContext<String_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Date_Type_Name() { return GetToken(PLCSTPARSERParser.Date_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Time_Type_Name() { return GetToken(PLCSTPARSERParser.Time_Type_Name, 0); }
		public Elem_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elem_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterElem_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitElem_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Elem_type_nameContext elem_type_name() {
		Elem_type_nameContext _localctx = new Elem_type_nameContext(Context, State);
		EnterRule(_localctx, 76, RULE_elem_type_name);
		try {
			State = 863;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Sign_Int_Type_Name:
			case Unsign_Int_Type_Name:
			case Real_Type_Name:
				EnterOuterAlt(_localctx, 1);
				{
				State = 858;
				numeric_type_name();
				}
				break;
			case Multibits_Type_Name:
			case Bool_Type_Name:
				EnterOuterAlt(_localctx, 2);
				{
				State = 859;
				bit_str_type_name();
				}
				break;
			case T__24:
			case T__37:
			case T__38:
			case T__39:
				EnterOuterAlt(_localctx, 3);
				{
				State = 860;
				string_type_name();
				}
				break;
			case Date_Type_Name:
				EnterOuterAlt(_localctx, 4);
				{
				State = 861;
				Match(Date_Type_Name);
				}
				break;
			case Time_Type_Name:
				EnterOuterAlt(_localctx, 5);
				{
				State = 862;
				Match(Time_Type_Name);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_type_nameContext int_type_name() {
			return GetRuleContext<Int_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Type_Name() { return GetToken(PLCSTPARSERParser.Real_Type_Name, 0); }
		public Numeric_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterNumeric_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitNumeric_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_type_nameContext numeric_type_name() {
		Numeric_type_nameContext _localctx = new Numeric_type_nameContext(Context, State);
		EnterRule(_localctx, 78, RULE_numeric_type_name);
		try {
			State = 867;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Sign_Int_Type_Name:
			case Unsign_Int_Type_Name:
				EnterOuterAlt(_localctx, 1);
				{
				State = 865;
				int_type_name();
				}
				break;
			case Real_Type_Name:
				EnterOuterAlt(_localctx, 2);
				{
				State = 866;
				Match(Real_Type_Name);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sign_Int_Type_Name() { return GetToken(PLCSTPARSERParser.Sign_Int_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsign_Int_Type_Name() { return GetToken(PLCSTPARSERParser.Unsign_Int_Type_Name, 0); }
		public Int_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInt_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInt_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Int_type_nameContext int_type_name() {
		Int_type_nameContext _localctx = new Int_type_nameContext(Context, State);
		EnterRule(_localctx, 80, RULE_int_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			_la = TokenStream.LA(1);
			if ( !(_la==Sign_Int_Type_Name || _la==Unsign_Int_Type_Name) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		public String_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterString_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitString_type_name(this);
		}
	}

	[RuleVersion(0)]
	public String_type_nameContext string_type_name() {
		String_type_nameContext _localctx = new String_type_nameContext(Context, State);
		EnterRule(_localctx, 82, RULE_string_type_name);
		int _la;
		try {
			State = 885;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 871;
				Match(T__24);
				State = 875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 872;
					Match(T__35);
					State = 873;
					Match(Unsigned_int);
					State = 874;
					Match(T__36);
					}
				}

				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 2);
				{
				State = 877;
				Match(T__37);
				State = 881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 878;
					Match(T__35);
					State = 879;
					Match(Unsigned_int);
					State = 880;
					Match(T__36);
					}
				}

				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 3);
				{
				State = 883;
				Match(T__38);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 4);
				{
				State = 884;
				Match(T__39);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bit_str_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool_Type_Name() { return GetToken(PLCSTPARSERParser.Bool_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multibits_Type_Name() { return GetToken(PLCSTPARSERParser.Multibits_Type_Name, 0); }
		public Bit_str_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_str_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterBit_str_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitBit_str_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Bit_str_type_nameContext bit_str_type_name() {
		Bit_str_type_nameContext _localctx = new Bit_str_type_nameContext(Context, State);
		EnterRule(_localctx, 84, RULE_bit_str_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 887;
			_la = TokenStream.LA(1);
			if ( !(_la==Multibits_Type_Name || _la==Bool_Type_Name) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_elem_type_accessContext single_elem_type_access() {
			return GetRuleContext<Single_elem_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_accessContext array_type_access() {
			return GetRuleContext<Array_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_accessContext struct_type_access() {
			return GetRuleContext<Struct_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_type_accessContext string_type_access() {
			return GetRuleContext<String_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_type_accessContext class_type_access() {
			return GetRuleContext<Class_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_type_accessContext ref_type_access() {
			return GetRuleContext<Ref_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_accessContext interface_type_access() {
			return GetRuleContext<Interface_type_accessContext>(0);
		}
		public Derived_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDerived_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDerived_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Derived_type_accessContext derived_type_access() {
		Derived_type_accessContext _localctx = new Derived_type_accessContext(Context, State);
		EnterRule(_localctx, 86, RULE_derived_type_access);
		try {
			State = 896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 889;
				single_elem_type_access();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 890;
				array_type_access();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 891;
				struct_type_access();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 892;
				string_type_access();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 893;
				class_type_access();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 894;
				ref_type_access();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 895;
				interface_type_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_type_nameContext string_type_name() {
			return GetRuleContext<String_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public String_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterString_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitString_type_access(this);
		}
	}

	[RuleVersion(0)]
	public String_type_accessContext string_type_access() {
		String_type_accessContext _localctx = new String_type_accessContext(Context, State);
		EnterRule(_localctx, 88, RULE_string_type_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 898;
				namespace_name();
				State = 899;
				Match(T__21);
				}
				}
				State = 905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 906;
			string_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_elem_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_type_accessContext simple_type_access() {
			return GetRuleContext<Simple_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subrange_type_accessContext subrange_type_access() {
			return GetRuleContext<Subrange_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_accessContext enum_type_access() {
			return GetRuleContext<Enum_type_accessContext>(0);
		}
		public Single_elem_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_elem_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSingle_elem_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSingle_elem_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Single_elem_type_accessContext single_elem_type_access() {
		Single_elem_type_accessContext _localctx = new Single_elem_type_accessContext(Context, State);
		EnterRule(_localctx, 90, RULE_single_elem_type_access);
		try {
			State = 911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908;
				simple_type_access();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 909;
				subrange_type_access();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 910;
				enum_type_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_type_nameContext simple_type_name() {
			return GetRuleContext<Simple_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Simple_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSimple_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSimple_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Simple_type_accessContext simple_type_access() {
		Simple_type_accessContext _localctx = new Simple_type_accessContext(Context, State);
		EnterRule(_localctx, 92, RULE_simple_type_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 913;
				namespace_name();
				State = 914;
				Match(T__21);
				}
				}
				State = 920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 921;
			simple_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subrange_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subrange_type_nameContext subrange_type_name() {
			return GetRuleContext<Subrange_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Subrange_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSubrange_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSubrange_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Subrange_type_accessContext subrange_type_access() {
		Subrange_type_accessContext _localctx = new Subrange_type_accessContext(Context, State);
		EnterRule(_localctx, 94, RULE_subrange_type_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 923;
					namespace_name();
					State = 924;
					Match(T__21);
					}
					} 
				}
				State = 930;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 931;
			subrange_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_nameContext enum_type_name() {
			return GetRuleContext<Enum_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Enum_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterEnum_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitEnum_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Enum_type_accessContext enum_type_access() {
		Enum_type_accessContext _localctx = new Enum_type_accessContext(Context, State);
		EnterRule(_localctx, 96, RULE_enum_type_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 933;
					namespace_name();
					State = 934;
					Match(T__21);
					}
					} 
				}
				State = 940;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			State = 941;
			enum_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_nameContext array_type_name() {
			return GetRuleContext<Array_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Array_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Array_type_accessContext array_type_access() {
		Array_type_accessContext _localctx = new Array_type_accessContext(Context, State);
		EnterRule(_localctx, 98, RULE_array_type_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 943;
					namespace_name();
					State = 944;
					Match(T__21);
					}
					} 
				}
				State = 950;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			State = 951;
			array_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_nameContext struct_type_name() {
			return GetRuleContext<Struct_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Struct_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Struct_type_accessContext struct_type_access() {
		Struct_type_accessContext _localctx = new Struct_type_accessContext(Context, State);
		EnterRule(_localctx, 100, RULE_struct_type_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 958;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 953;
					namespace_name();
					State = 954;
					Match(T__21);
					}
					} 
				}
				State = 960;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			State = 961;
			struct_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sign_Int_Type_Name() { return GetToken(PLCSTPARSERParser.Sign_Int_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsign_Int_Type_Name() { return GetToken(PLCSTPARSERParser.Unsign_Int_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Type_Name() { return GetToken(PLCSTPARSERParser.Real_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Time_Type_Name() { return GetToken(PLCSTPARSERParser.Time_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Date_Type_Name() { return GetToken(PLCSTPARSERParser.Date_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tod_Type_Name() { return GetToken(PLCSTPARSERParser.Tod_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DT_Type_Name() { return GetToken(PLCSTPARSERParser.DT_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool_Type_Name() { return GetToken(PLCSTPARSERParser.Bool_Type_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multibits_Type_Name() { return GetToken(PLCSTPARSERParser.Multibits_Type_Name, 0); }
		public Simple_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSimple_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSimple_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Simple_type_nameContext simple_type_name() {
		Simple_type_nameContext _localctx = new Simple_type_nameContext(Context, State);
		EnterRule(_localctx, 102, RULE_simple_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & 3407983L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subrange_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Subrange_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSubrange_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSubrange_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Subrange_type_nameContext subrange_type_name() {
		Subrange_type_nameContext _localctx = new Subrange_type_nameContext(Context, State);
		EnterRule(_localctx, 104, RULE_subrange_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterEnum_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitEnum_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Enum_type_nameContext enum_type_name() {
		Enum_type_nameContext _localctx = new Enum_type_nameContext(Context, State);
		EnterRule(_localctx, 106, RULE_enum_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Array_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Array_type_nameContext array_type_name() {
		Array_type_nameContext _localctx = new Array_type_nameContext(Context, State);
		EnterRule(_localctx, 108, RULE_array_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Struct_type_nameContext struct_type_name() {
		Struct_type_nameContext _localctx = new Struct_type_nameContext(Context, State);
		EnterRule(_localctx, 110, RULE_struct_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_declContext[] type_decl() {
			return GetRuleContexts<Type_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declContext type_decl(int i) {
			return GetRuleContext<Type_declContext>(i);
		}
		public Data_type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterData_type_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitData_type_decl(this);
		}
	}

	[RuleVersion(0)]
	public Data_type_declContext data_type_decl() {
		Data_type_declContext _localctx = new Data_type_declContext(Context, State);
		EnterRule(_localctx, 112, RULE_data_type_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			Match(T__40);
			State = 977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 974;
				type_decl();
				State = 975;
				Match(T__41);
				}
				}
				State = 979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1924178935806L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & 7602287L) != 0) );
			State = 981;
			Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_type_declContext simple_type_decl() {
			return GetRuleContext<Simple_type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subrange_type_declContext subrange_type_decl() {
			return GetRuleContext<Subrange_type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_declContext enum_type_decl() {
			return GetRuleContext<Enum_type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_declContext array_type_decl() {
			return GetRuleContext<Array_type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_declContext struct_type_decl() {
			return GetRuleContext<Struct_type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Str_type_declContext str_type_decl() {
			return GetRuleContext<Str_type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_type_declContext ref_type_decl() {
			return GetRuleContext<Ref_type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Derived_type_declContext derived_type_decl() {
			return GetRuleContext<Derived_type_declContext>(0);
		}
		public Type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterType_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitType_decl(this);
		}
	}

	[RuleVersion(0)]
	public Type_declContext type_decl() {
		Type_declContext _localctx = new Type_declContext(Context, State);
		EnterRule(_localctx, 114, RULE_type_decl);
		try {
			State = 991;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 983;
				simple_type_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 984;
				subrange_type_decl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 985;
				enum_type_decl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 986;
				array_type_decl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 987;
				struct_type_decl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 988;
				str_type_decl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 989;
				ref_type_decl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 990;
				derived_type_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Derived_type_nameContext derived_type_name() {
			return GetRuleContext<Derived_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Derived_spec_initContext derived_spec_init() {
			return GetRuleContext<Derived_spec_initContext>(0);
		}
		public Derived_type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDerived_type_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDerived_type_decl(this);
		}
	}

	[RuleVersion(0)]
	public Derived_type_declContext derived_type_decl() {
		Derived_type_declContext _localctx = new Derived_type_declContext(Context, State);
		EnterRule(_localctx, 116, RULE_derived_type_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			derived_type_name();
			State = 994;
			Match(T__33);
			State = 995;
			derived_spec_init();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Derived_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDerived_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDerived_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Derived_type_nameContext derived_type_name() {
		Derived_type_nameContext _localctx = new Derived_type_nameContext(Context, State);
		EnterRule(_localctx, 118, RULE_derived_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 997;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_spec_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_spec_initContext simple_spec_init() {
			return GetRuleContext<Simple_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subrange_spec_initContext subrange_spec_init() {
			return GetRuleContext<Subrange_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_spec_initContext enum_spec_init() {
			return GetRuleContext<Enum_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_spec_initContext named_spec_init() {
			return GetRuleContext<Named_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elem_type_nameContext elem_type_name() {
			return GetRuleContext<Elem_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_declContext array_type_decl() {
			return GetRuleContext<Array_type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_declContext struct_type_decl() {
			return GetRuleContext<Struct_type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_type_declContext ref_type_decl() {
			return GetRuleContext<Ref_type_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Str_type_declContext str_type_decl() {
			return GetRuleContext<Str_type_declContext>(0);
		}
		public Derived_spec_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_spec_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDerived_spec_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDerived_spec_init(this);
		}
	}

	[RuleVersion(0)]
	public Derived_spec_initContext derived_spec_init() {
		Derived_spec_initContext _localctx = new Derived_spec_initContext(Context, State);
		EnterRule(_localctx, 120, RULE_derived_spec_init);
		int _la;
		try {
			State = 1012;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 999;
				simple_spec_init();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1000;
				subrange_spec_init();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1006;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					{
					State = 1002;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1924178903040L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & 2359375L) != 0)) {
						{
						State = 1001;
						elem_type_name();
						}
					}

					State = 1004;
					named_spec_init();
					}
					}
					break;
				case 2:
					{
					State = 1005;
					enum_spec_init();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1008;
				array_type_decl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1009;
				struct_type_decl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1010;
				ref_type_decl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1011;
				str_type_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_type_nameContext simple_type_name() {
			return GetRuleContext<Simple_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_spec_initContext simple_spec_init() {
			return GetRuleContext<Simple_spec_initContext>(0);
		}
		public Simple_type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSimple_type_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSimple_type_decl(this);
		}
	}

	[RuleVersion(0)]
	public Simple_type_declContext simple_type_decl() {
		Simple_type_declContext _localctx = new Simple_type_declContext(Context, State);
		EnterRule(_localctx, 122, RULE_simple_type_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014;
			simple_type_name();
			State = 1015;
			Match(T__33);
			State = 1016;
			simple_spec_init();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_spec_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_specContext simple_spec() {
			return GetRuleContext<Simple_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext constant_expr() {
			return GetRuleContext<Constant_exprContext>(0);
		}
		public Simple_spec_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_spec_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSimple_spec_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSimple_spec_init(this);
		}
	}

	[RuleVersion(0)]
	public Simple_spec_initContext simple_spec_init() {
		Simple_spec_initContext _localctx = new Simple_spec_initContext(Context, State);
		EnterRule(_localctx, 124, RULE_simple_spec_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018;
			simple_spec();
			State = 1022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1019;
				Match(T__33);
				State = 1020;
				Match(T__43);
				State = 1021;
				constant_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Elem_type_nameContext elem_type_name() {
			return GetRuleContext<Elem_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_type_accessContext simple_type_access() {
			return GetRuleContext<Simple_type_accessContext>(0);
		}
		public Simple_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSimple_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSimple_spec(this);
		}
	}

	[RuleVersion(0)]
	public Simple_specContext simple_spec() {
		Simple_specContext _localctx = new Simple_specContext(Context, State);
		EnterRule(_localctx, 126, RULE_simple_spec);
		try {
			State = 1026;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1024;
				elem_type_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1025;
				simple_type_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subrange_type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subrange_type_nameContext subrange_type_name() {
			return GetRuleContext<Subrange_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subrange_spec_initContext subrange_spec_init() {
			return GetRuleContext<Subrange_spec_initContext>(0);
		}
		public Subrange_type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSubrange_type_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSubrange_type_decl(this);
		}
	}

	[RuleVersion(0)]
	public Subrange_type_declContext subrange_type_decl() {
		Subrange_type_declContext _localctx = new Subrange_type_declContext(Context, State);
		EnterRule(_localctx, 128, RULE_subrange_type_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028;
			subrange_type_name();
			State = 1029;
			Match(T__33);
			State = 1030;
			subrange_spec_init();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subrange_spec_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subrange_specContext subrange_spec() {
			return GetRuleContext<Subrange_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_intContext signed_int() {
			return GetRuleContext<Signed_intContext>(0);
		}
		public Subrange_spec_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange_spec_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSubrange_spec_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSubrange_spec_init(this);
		}
	}

	[RuleVersion(0)]
	public Subrange_spec_initContext subrange_spec_init() {
		Subrange_spec_initContext _localctx = new Subrange_spec_initContext(Context, State);
		EnterRule(_localctx, 130, RULE_subrange_spec_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032;
			subrange_spec();
			State = 1036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1033;
				Match(T__33);
				State = 1034;
				Match(T__43);
				State = 1035;
				signed_int();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subrange_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_type_nameContext int_type_name() {
			return GetRuleContext<Int_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subrange_type_accessContext subrange_type_access() {
			return GetRuleContext<Subrange_type_accessContext>(0);
		}
		public Subrange_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSubrange_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSubrange_spec(this);
		}
	}

	[RuleVersion(0)]
	public Subrange_specContext subrange_spec() {
		Subrange_specContext _localctx = new Subrange_specContext(Context, State);
		EnterRule(_localctx, 132, RULE_subrange_spec);
		try {
			State = 1044;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Sign_Int_Type_Name:
			case Unsign_Int_Type_Name:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1038;
				int_type_name();
				State = 1039;
				Match(T__44);
				State = 1040;
				subrange();
				State = 1041;
				Match(T__45);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1043;
				subrange_type_access();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext[] constant_expr() {
			return GetRuleContexts<Constant_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext constant_expr(int i) {
			return GetRuleContext<Constant_exprContext>(i);
		}
		public SubrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSubrange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSubrange(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeContext subrange() {
		SubrangeContext _localctx = new SubrangeContext(Context, State);
		EnterRule(_localctx, 134, RULE_subrange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			constant_expr();
			State = 1047;
			Match(T__46);
			State = 1048;
			constant_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_nameContext enum_type_name() {
			return GetRuleContext<Enum_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_spec_initContext enum_spec_init() {
			return GetRuleContext<Enum_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_spec_initContext named_spec_init() {
			return GetRuleContext<Named_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elem_type_nameContext elem_type_name() {
			return GetRuleContext<Elem_type_nameContext>(0);
		}
		public Enum_type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterEnum_type_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitEnum_type_decl(this);
		}
	}

	[RuleVersion(0)]
	public Enum_type_declContext enum_type_decl() {
		Enum_type_declContext _localctx = new Enum_type_declContext(Context, State);
		EnterRule(_localctx, 136, RULE_enum_type_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050;
			enum_type_name();
			State = 1051;
			Match(T__33);
			State = 1057;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				{
				State = 1053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1924178903040L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & 2359375L) != 0)) {
					{
					State = 1052;
					elem_type_name();
					}
				}

				State = 1055;
				named_spec_init();
				}
				}
				break;
			case 2:
				{
				State = 1056;
				enum_spec_init();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_spec_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_value_specContext[] enum_value_spec() {
			return GetRuleContexts<Enum_value_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_value_specContext enum_value_spec(int i) {
			return GetRuleContext<Enum_value_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_valueContext enum_value() {
			return GetRuleContext<Enum_valueContext>(0);
		}
		public Named_spec_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_spec_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterNamed_spec_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitNamed_spec_init(this);
		}
	}

	[RuleVersion(0)]
	public Named_spec_initContext named_spec_init() {
		Named_spec_initContext _localctx = new Named_spec_initContext(Context, State);
		EnterRule(_localctx, 138, RULE_named_spec_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			Match(T__44);
			State = 1060;
			enum_value_spec();
			State = 1065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 1061;
				Match(T__47);
				State = 1062;
				enum_value_spec();
				}
				}
				State = 1067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1068;
			Match(T__45);
			State = 1072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1069;
				Match(T__33);
				State = 1070;
				Match(T__43);
				State = 1071;
				enum_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_spec_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_accessContext enum_type_access() {
			return GetRuleContext<Enum_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_valueContext enum_value() {
			return GetRuleContext<Enum_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Enum_spec_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_spec_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterEnum_spec_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitEnum_spec_init(this);
		}
	}

	[RuleVersion(0)]
	public Enum_spec_initContext enum_spec_init() {
		Enum_spec_initContext _localctx = new Enum_spec_initContext(Context, State);
		EnterRule(_localctx, 140, RULE_enum_spec_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__44:
				{
				{
				State = 1074;
				Match(T__44);
				State = 1075;
				identifier();
				State = 1080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__47) {
					{
					{
					State = 1076;
					Match(T__47);
					State = 1077;
					identifier();
					}
					}
					State = 1082;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1083;
				Match(T__45);
				}
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case Identifier:
				{
				State = 1085;
				enum_type_access();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1088;
				Match(T__33);
				State = 1089;
				Match(T__43);
				State = 1090;
				enum_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_value_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_literalContext int_literal() {
			return GetRuleContext<Int_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext constant_expr() {
			return GetRuleContext<Constant_exprContext>(0);
		}
		public Enum_value_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_value_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterEnum_value_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitEnum_value_spec(this);
		}
	}

	[RuleVersion(0)]
	public Enum_value_specContext enum_value_spec() {
		Enum_value_specContext _localctx = new Enum_value_specContext(Context, State);
		EnterRule(_localctx, 142, RULE_enum_value_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093;
			identifier();
			State = 1100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1094;
				Match(T__33);
				State = 1095;
				Match(T__43);
				State = 1098;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 1096;
					int_literal();
					}
					break;
				case 2:
					{
					State = 1097;
					constant_expr();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_nameContext enum_type_name() {
			return GetRuleContext<Enum_type_nameContext>(0);
		}
		public Enum_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterEnum_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitEnum_value(this);
		}
	}

	[RuleVersion(0)]
	public Enum_valueContext enum_value() {
		Enum_valueContext _localctx = new Enum_valueContext(Context, State);
		EnterRule(_localctx, 144, RULE_enum_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 1102;
				enum_type_name();
				State = 1103;
				Match(T__14);
				}
				break;
			}
			State = 1107;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_nameContext array_type_name() {
			return GetRuleContext<Array_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_spec_initContext array_spec_init() {
			return GetRuleContext<Array_spec_initContext>(0);
		}
		public Array_type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_type_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_type_decl(this);
		}
	}

	[RuleVersion(0)]
	public Array_type_declContext array_type_decl() {
		Array_type_declContext _localctx = new Array_type_declContext(Context, State);
		EnterRule(_localctx, 146, RULE_array_type_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109;
			array_type_name();
			State = 1110;
			Match(T__33);
			State = 1111;
			array_spec_init();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_spec_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext array_spec() {
			return GetRuleContext<Array_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initContext array_init() {
			return GetRuleContext<Array_initContext>(0);
		}
		public Array_spec_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_spec_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_spec_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_spec_init(this);
		}
	}

	[RuleVersion(0)]
	public Array_spec_initContext array_spec_init() {
		Array_spec_initContext _localctx = new Array_spec_initContext(Context, State);
		EnterRule(_localctx, 148, RULE_array_spec_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			array_spec();
			State = 1117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1114;
				Match(T__33);
				State = 1115;
				Match(T__43);
				State = 1116;
				array_init();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_accessContext array_type_access() {
			return GetRuleContext<Array_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext[] subrange() {
			return GetRuleContexts<SubrangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange(int i) {
			return GetRuleContext<SubrangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_accessContext data_type_access() {
			return GetRuleContext<Data_type_accessContext>(0);
		}
		public Array_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_spec(this);
		}
	}

	[RuleVersion(0)]
	public Array_specContext array_spec() {
		Array_specContext _localctx = new Array_specContext(Context, State);
		EnterRule(_localctx, 150, RULE_array_spec);
		int _la;
		try {
			State = 1134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1119;
				array_type_access();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1120;
				Match(T__48);
				State = 1121;
				Match(T__35);
				State = 1122;
				subrange();
				State = 1127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__47) {
					{
					{
					State = 1123;
					Match(T__47);
					State = 1124;
					subrange();
					}
					}
					State = 1129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1130;
				Match(T__36);
				State = 1131;
				Match(T__49);
				State = 1132;
				data_type_access();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_elem_initContext[] array_elem_init() {
			return GetRuleContexts<Array_elem_initContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_elem_initContext array_elem_init(int i) {
			return GetRuleContext<Array_elem_initContext>(i);
		}
		public Array_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_init(this);
		}
	}

	[RuleVersion(0)]
	public Array_initContext array_init() {
		Array_initContext _localctx = new Array_initContext(Context, State);
		EnterRule(_localctx, 152, RULE_array_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136;
			Match(T__35);
			State = 1137;
			array_elem_init();
			State = 1142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 1138;
				Match(T__47);
				State = 1139;
				array_elem_init();
				}
				}
				State = 1144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1145;
			Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_elem_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_elem_init_valueContext array_elem_init_value() {
			return GetRuleContext<Array_elem_init_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_elem_item_initContext array_elem_item_init() {
			return GetRuleContext<Array_elem_item_initContext>(0);
		}
		public Array_elem_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_elem_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_elem_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_elem_init(this);
		}
	}

	[RuleVersion(0)]
	public Array_elem_initContext array_elem_init() {
		Array_elem_initContext _localctx = new Array_elem_initContext(Context, State);
		EnterRule(_localctx, 154, RULE_array_elem_init);
		try {
			State = 1149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1147;
				array_elem_init_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1148;
				array_elem_item_init();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_elem_item_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_elem_init_valueContext[] array_elem_init_value() {
			return GetRuleContexts<Array_elem_init_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_elem_init_valueContext array_elem_init_value(int i) {
			return GetRuleContext<Array_elem_init_valueContext>(i);
		}
		public Array_elem_item_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_elem_item_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_elem_item_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_elem_item_init(this);
		}
	}

	[RuleVersion(0)]
	public Array_elem_item_initContext array_elem_item_init() {
		Array_elem_item_initContext _localctx = new Array_elem_item_initContext(Context, State);
		EnterRule(_localctx, 156, RULE_array_elem_item_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1151;
			Match(Unsigned_int);
			State = 1152;
			Match(T__44);
			State = 1154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180179281198415870L) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 5135245931276402689L) != 0)) {
				{
				State = 1153;
				array_elem_init_value();
				}
			}

			State = 1160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 1156;
				Match(T__47);
				State = 1157;
				array_elem_init_value();
				}
				}
				State = 1162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1163;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_elem_init_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext constant_expr() {
			return GetRuleContext<Constant_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_valueContext enum_value() {
			return GetRuleContext<Enum_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_initContext struct_init() {
			return GetRuleContext<Struct_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initContext array_init() {
			return GetRuleContext<Array_initContext>(0);
		}
		public Array_elem_init_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_elem_init_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_elem_init_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_elem_init_value(this);
		}
	}

	[RuleVersion(0)]
	public Array_elem_init_valueContext array_elem_init_value() {
		Array_elem_init_valueContext _localctx = new Array_elem_init_valueContext(Context, State);
		EnterRule(_localctx, 158, RULE_array_elem_init_value);
		try {
			State = 1169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1165;
				constant_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1166;
				enum_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1167;
				struct_init();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1168;
				array_init();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_nameContext struct_type_name() {
			return GetRuleContext<Struct_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_specContext struct_spec() {
			return GetRuleContext<Struct_specContext>(0);
		}
		public Struct_type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_type_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_type_decl(this);
		}
	}

	[RuleVersion(0)]
	public Struct_type_declContext struct_type_decl() {
		Struct_type_declContext _localctx = new Struct_type_declContext(Context, State);
		EnterRule(_localctx, 160, RULE_struct_type_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1171;
			struct_type_name();
			State = 1172;
			Match(T__33);
			State = 1173;
			struct_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declContext struct_decl() {
			return GetRuleContext<Struct_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_spec_initContext struct_spec_init() {
			return GetRuleContext<Struct_spec_initContext>(0);
		}
		public Struct_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_spec(this);
		}
	}

	[RuleVersion(0)]
	public Struct_specContext struct_spec() {
		Struct_specContext _localctx = new Struct_specContext(Context, State);
		EnterRule(_localctx, 162, RULE_struct_spec);
		try {
			State = 1177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__50:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1175;
				struct_decl();
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1176;
				struct_spec_init();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_spec_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_accessContext struct_type_access() {
			return GetRuleContext<Struct_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_initContext struct_init() {
			return GetRuleContext<Struct_initContext>(0);
		}
		public Struct_spec_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_spec_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_spec_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_spec_init(this);
		}
	}

	[RuleVersion(0)]
	public Struct_spec_initContext struct_spec_init() {
		Struct_spec_initContext _localctx = new Struct_spec_initContext(Context, State);
		EnterRule(_localctx, 164, RULE_struct_spec_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1179;
			struct_type_access();
			State = 1183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1180;
				Match(T__33);
				State = 1181;
				Match(T__43);
				State = 1182;
				struct_init();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_elem_declContext[] struct_elem_decl() {
			return GetRuleContexts<Struct_elem_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_elem_declContext struct_elem_decl(int i) {
			return GetRuleContext<Struct_elem_declContext>(i);
		}
		public Struct_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_decl(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declContext struct_decl() {
		Struct_declContext _localctx = new Struct_declContext(Context, State);
		EnterRule(_localctx, 166, RULE_struct_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185;
			Match(T__50);
			State = 1187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__51) {
				{
				State = 1186;
				Match(T__51);
				}
			}

			State = 1192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1189;
				struct_elem_decl();
				State = 1190;
				Match(T__41);
				}
				}
				State = 1194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier );
			State = 1196;
			Match(T__52);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_elem_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_elem_nameContext struct_elem_name() {
			return GetRuleContext<Struct_elem_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Located_at_initContext located_at_init() {
			return GetRuleContext<Located_at_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_spec_initContext simple_spec_init() {
			return GetRuleContext<Simple_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subrange_spec_initContext subrange_spec_init() {
			return GetRuleContext<Subrange_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_spec_initContext enum_spec_init() {
			return GetRuleContext<Enum_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_spec_initContext array_spec_init() {
			return GetRuleContext<Array_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_spec_initContext struct_spec_init() {
			return GetRuleContext<Struct_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Located_atContext located_at() {
			return GetRuleContext<Located_atContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multibit_part_accessContext multibit_part_access() {
			return GetRuleContext<Multibit_part_accessContext>(0);
		}
		public Struct_elem_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_elem_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_elem_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_elem_decl(this);
		}
	}

	[RuleVersion(0)]
	public Struct_elem_declContext struct_elem_decl() {
		Struct_elem_declContext _localctx = new Struct_elem_declContext(Context, State);
		EnterRule(_localctx, 168, RULE_struct_elem_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198;
			struct_elem_name();
			State = 1209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 1203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__71) {
					{
					State = 1199;
					located_at();
					State = 1201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__21) {
						{
						State = 1200;
						multibit_part_access();
						}
					}

					}
				}

				State = 1205;
				Match(T__33);
				}
				break;
			case 2:
				{
				State = 1206;
				located_at_init();
				State = 1207;
				Match(T__33);
				}
				break;
			}
			State = 1216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 1211;
				simple_spec_init();
				}
				break;
			case 2:
				{
				State = 1212;
				subrange_spec_init();
				}
				break;
			case 3:
				{
				State = 1213;
				enum_spec_init();
				}
				break;
			case 4:
				{
				State = 1214;
				array_spec_init();
				}
				break;
			case 5:
				{
				State = 1215;
				struct_spec_init();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_elem_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_elem_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_elem_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_elem_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_elem_name(this);
		}
	}

	[RuleVersion(0)]
	public Struct_elem_nameContext struct_elem_name() {
		Struct_elem_nameContext _localctx = new Struct_elem_nameContext(Context, State);
		EnterRule(_localctx, 170, RULE_struct_elem_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_elem_initContext[] struct_elem_init() {
			return GetRuleContexts<Struct_elem_initContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_elem_initContext struct_elem_init(int i) {
			return GetRuleContext<Struct_elem_initContext>(i);
		}
		public Struct_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_init(this);
		}
	}

	[RuleVersion(0)]
	public Struct_initContext struct_init() {
		Struct_initContext _localctx = new Struct_initContext(Context, State);
		EnterRule(_localctx, 172, RULE_struct_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220;
			Match(T__44);
			State = 1221;
			struct_elem_init();
			State = 1226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 1222;
				Match(T__47);
				State = 1223;
				struct_elem_init();
				}
				}
				State = 1228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1229;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_elem_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_elem_nameContext struct_elem_name() {
			return GetRuleContext<Struct_elem_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext constant_expr() {
			return GetRuleContext<Constant_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_valueContext enum_value() {
			return GetRuleContext<Enum_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initContext array_init() {
			return GetRuleContext<Array_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_initContext struct_init() {
			return GetRuleContext<Struct_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_valueContext ref_value() {
			return GetRuleContext<Ref_valueContext>(0);
		}
		public Struct_elem_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_elem_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_elem_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_elem_init(this);
		}
	}

	[RuleVersion(0)]
	public Struct_elem_initContext struct_elem_init() {
		Struct_elem_initContext _localctx = new Struct_elem_initContext(Context, State);
		EnterRule(_localctx, 174, RULE_struct_elem_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1231;
			struct_elem_name();
			State = 1232;
			Match(T__33);
			State = 1233;
			Match(T__43);
			State = 1239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 1234;
				constant_expr();
				}
				break;
			case 2:
				{
				State = 1235;
				enum_value();
				}
				break;
			case 3:
				{
				State = 1236;
				array_init();
				}
				break;
			case 4:
				{
				State = 1237;
				struct_init();
				}
				break;
			case 5:
				{
				State = 1238;
				ref_value();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Str_type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_type_nameContext[] string_type_name() {
			return GetRuleContexts<String_type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_type_nameContext string_type_name(int i) {
			return GetRuleContext<String_type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_strContext char_str() {
			return GetRuleContext<Char_strContext>(0);
		}
		public Str_type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStr_type_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStr_type_decl(this);
		}
	}

	[RuleVersion(0)]
	public Str_type_declContext str_type_decl() {
		Str_type_declContext _localctx = new Str_type_declContext(Context, State);
		EnterRule(_localctx, 176, RULE_str_type_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1241;
			string_type_name();
			State = 1242;
			Match(T__33);
			State = 1243;
			string_type_name();
			State = 1247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1244;
				Match(T__33);
				State = 1245;
				Match(T__43);
				State = 1246;
				char_str();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_type_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_type_nameContext ref_type_name() {
			return GetRuleContext<Ref_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_spec_initContext ref_spec_init() {
			return GetRuleContext<Ref_spec_initContext>(0);
		}
		public Ref_type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_type_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_type_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_type_decl(this);
		}
	}

	[RuleVersion(0)]
	public Ref_type_declContext ref_type_decl() {
		Ref_type_declContext _localctx = new Ref_type_declContext(Context, State);
		EnterRule(_localctx, 178, RULE_ref_type_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1249;
			ref_type_name();
			State = 1250;
			Match(T__33);
			State = 1251;
			ref_spec_init();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_spec_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_specContext ref_spec() {
			return GetRuleContext<Ref_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_valueContext ref_value() {
			return GetRuleContext<Ref_valueContext>(0);
		}
		public Ref_spec_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_spec_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_spec_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_spec_init(this);
		}
	}

	[RuleVersion(0)]
	public Ref_spec_initContext ref_spec_init() {
		Ref_spec_initContext _localctx = new Ref_spec_initContext(Context, State);
		EnterRule(_localctx, 180, RULE_ref_spec_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			ref_spec();
			State = 1257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1254;
				Match(T__33);
				State = 1255;
				Match(T__43);
				State = 1256;
				ref_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_accessContext data_type_access() {
			return GetRuleContext<Data_type_accessContext>(0);
		}
		public Ref_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_spec(this);
		}
	}

	[RuleVersion(0)]
	public Ref_specContext ref_spec() {
		Ref_specContext _localctx = new Ref_specContext(Context, State);
		EnterRule(_localctx, 182, RULE_ref_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1259;
				Match(T__53);
				}
				}
				State = 1262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__53 );
			State = 1264;
			data_type_access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Ref_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Ref_type_nameContext ref_type_name() {
		Ref_type_nameContext _localctx = new Ref_type_nameContext(Context, State);
		EnterRule(_localctx, 184, RULE_ref_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_type_nameContext ref_type_name() {
			return GetRuleContext<Ref_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Ref_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Ref_type_accessContext ref_type_access() {
		Ref_type_accessContext _localctx = new Ref_type_accessContext(Context, State);
		EnterRule(_localctx, 186, RULE_ref_type_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1273;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1268;
					namespace_name();
					State = 1269;
					Match(T__21);
					}
					} 
				}
				State = 1275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			}
			State = 1276;
			ref_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Ref_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_name(this);
		}
	}

	[RuleVersion(0)]
	public Ref_nameContext ref_name() {
		Ref_nameContext _localctx = new Ref_nameContext(Context, State);
		EnterRule(_localctx, 188, RULE_ref_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_addrContext ref_addr() {
			return GetRuleContext<Ref_addrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(PLCSTPARSERParser.Null, 0); }
		public Ref_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_value(this);
		}
	}

	[RuleVersion(0)]
	public Ref_valueContext ref_value() {
		Ref_valueContext _localctx = new Ref_valueContext(Context, State);
		EnterRule(_localctx, 190, RULE_ref_value);
		try {
			State = 1282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__54:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1280;
				ref_addr();
				}
				break;
			case Null:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1281;
				Match(Null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_addrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbolic_variableContext symbolic_variable() {
			return GetRuleContext<Symbolic_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext fb_instance_name() {
			return GetRuleContext<Fb_instance_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_instance_nameContext class_instance_name() {
			return GetRuleContext<Class_instance_nameContext>(0);
		}
		public Ref_addrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_addr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_addr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_addr(this);
		}
	}

	[RuleVersion(0)]
	public Ref_addrContext ref_addr() {
		Ref_addrContext _localctx = new Ref_addrContext(Context, State);
		EnterRule(_localctx, 192, RULE_ref_addr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1284;
			Match(T__54);
			State = 1285;
			Match(T__44);
			State = 1289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 1286;
				symbolic_variable();
				}
				break;
			case 2:
				{
				State = 1287;
				fb_instance_name();
				}
				break;
			case 3:
				{
				State = 1288;
				class_instance_name();
				}
				break;
			}
			State = 1291;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_nameContext[] ref_name() {
			return GetRuleContexts<Ref_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_nameContext ref_name(int i) {
			return GetRuleContext<Ref_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_derefContext ref_deref() {
			return GetRuleContext<Ref_derefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_valueContext ref_value() {
			return GetRuleContext<Ref_valueContext>(0);
		}
		public Ref_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_assign(this);
		}
	}

	[RuleVersion(0)]
	public Ref_assignContext ref_assign() {
		Ref_assignContext _localctx = new Ref_assignContext(Context, State);
		EnterRule(_localctx, 194, RULE_ref_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			ref_name();
			State = 1294;
			Match(T__33);
			State = 1295;
			Match(T__43);
			State = 1299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 1296;
				ref_name();
				}
				break;
			case 2:
				{
				State = 1297;
				ref_deref();
				}
				break;
			case 3:
				{
				State = 1298;
				ref_value();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_derefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_nameContext ref_name() {
			return GetRuleContext<Ref_nameContext>(0);
		}
		public Ref_derefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_deref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_deref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_deref(this);
		}
	}

	[RuleVersion(0)]
	public Ref_derefContext ref_deref() {
		Ref_derefContext _localctx = new Ref_derefContext(Context, State);
		EnterRule(_localctx, 196, RULE_ref_deref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301;
			ref_name();
			State = 1303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1302;
				Match(T__55);
				}
				}
				State = 1305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__55 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Direct_variable() { return GetToken(PLCSTPARSERParser.Direct_variable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Symbolic_variableContext symbolic_variable() {
			return GetRuleContext<Symbolic_variableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 198, RULE_variable);
		try {
			State = 1309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Direct_variable:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1307;
				Match(Direct_variable);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__56:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1308;
				symbolic_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Symbolic_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_accessContext var_access() {
			return GetRuleContext<Var_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multi_elem_varContext multi_elem_var() {
			return GetRuleContext<Multi_elem_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Symbolic_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbolic_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSymbolic_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSymbolic_variable(this);
		}
	}

	[RuleVersion(0)]
	public Symbolic_variableContext symbolic_variable() {
		Symbolic_variableContext _localctx = new Symbolic_variableContext(Context, State);
		EnterRule(_localctx, 200, RULE_symbolic_variable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				{
				State = 1311;
				Match(T__56);
				State = 1312;
				Match(T__21);
				}
				}
				break;
			case 2:
				{
				State = 1316;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1313;
						namespace_name();
						State = 1314;
						Match(T__21);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1318;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 1324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 1322;
				var_access();
				}
				break;
			case 2:
				{
				State = 1323;
				multi_elem_var();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_derefContext ref_deref() {
			return GetRuleContext<Ref_derefContext>(0);
		}
		public Var_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterVar_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitVar_access(this);
		}
	}

	[RuleVersion(0)]
	public Var_accessContext var_access() {
		Var_accessContext _localctx = new Var_accessContext(Context, State);
		EnterRule(_localctx, 202, RULE_var_access);
		try {
			State = 1328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1326;
				variable_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1327;
				ref_deref();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterVariable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitVariable_name(this);
		}
	}

	[RuleVersion(0)]
	public Variable_nameContext variable_name() {
		Variable_nameContext _localctx = new Variable_nameContext(Context, State);
		EnterRule(_localctx, 204, RULE_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_elem_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_accessContext var_access() {
			return GetRuleContext<Var_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_listContext[] subscript_list() {
			return GetRuleContexts<Subscript_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_listContext subscript_list(int i) {
			return GetRuleContext<Subscript_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_variableContext[] struct_variable() {
			return GetRuleContexts<Struct_variableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_variableContext struct_variable(int i) {
			return GetRuleContext<Struct_variableContext>(i);
		}
		public Multi_elem_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_elem_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterMulti_elem_var(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitMulti_elem_var(this);
		}
	}

	[RuleVersion(0)]
	public Multi_elem_varContext multi_elem_var() {
		Multi_elem_varContext _localctx = new Multi_elem_varContext(Context, State);
		EnterRule(_localctx, 206, RULE_multi_elem_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1332;
			var_access();
			State = 1335;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 1335;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__35:
						{
						State = 1333;
						subscript_list();
						}
						break;
					case T__21:
						{
						State = 1334;
						struct_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public Subscript_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSubscript_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSubscript_list(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_listContext subscript_list() {
		Subscript_listContext _localctx = new Subscript_listContext(Context, State);
		EnterRule(_localctx, 208, RULE_subscript_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339;
			Match(T__35);
			State = 1340;
			subscript();
			State = 1345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 1341;
				Match(T__47);
				State = 1342;
				subscript();
				}
				}
				State = 1347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1348;
			Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 210, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_elem_selectContext struct_elem_select() {
			return GetRuleContext<Struct_elem_selectContext>(0);
		}
		public Struct_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_variable(this);
		}
	}

	[RuleVersion(0)]
	public Struct_variableContext struct_variable() {
		Struct_variableContext _localctx = new Struct_variableContext(Context, State);
		EnterRule(_localctx, 212, RULE_struct_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1352;
			Match(T__21);
			State = 1353;
			struct_elem_select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_elem_selectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_accessContext var_access() {
			return GetRuleContext<Var_accessContext>(0);
		}
		public Struct_elem_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_elem_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_elem_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_elem_select(this);
		}
	}

	[RuleVersion(0)]
	public Struct_elem_selectContext struct_elem_select() {
		Struct_elem_selectContext _localctx = new Struct_elem_selectContext(Context, State);
		EnterRule(_localctx, 214, RULE_struct_elem_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355;
			var_access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Input_declContext[] input_decl() {
			return GetRuleContexts<Input_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Input_declContext input_decl(int i) {
			return GetRuleContext<Input_declContext>(i);
		}
		public Input_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInput_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInput_decls(this);
		}
	}

	[RuleVersion(0)]
	public Input_declsContext input_decls() {
		Input_declsContext _localctx = new Input_declsContext(Context, State);
		EnterRule(_localctx, 216, RULE_input_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1357;
			Match(T__57);
			State = 1359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__58 || _la==T__59) {
				{
				State = 1358;
				_la = TokenStream.LA(1);
				if ( !(_la==T__58 || _la==T__59) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==T__71 || _la==Identifier) {
				{
				{
				State = 1361;
				input_decl();
				State = 1362;
				Match(T__41);
				}
				}
				State = 1368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1369;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_initContext var_decl_init() {
			return GetRuleContext<Var_decl_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Edge_declContext edge_decl() {
			return GetRuleContext<Edge_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_conform_declContext array_conform_decl() {
			return GetRuleContext<Array_conform_declContext>(0);
		}
		public Input_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInput_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInput_decl(this);
		}
	}

	[RuleVersion(0)]
	public Input_declContext input_decl() {
		Input_declContext _localctx = new Input_declContext(Context, State);
		EnterRule(_localctx, 218, RULE_input_decl);
		try {
			State = 1374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1371;
				var_decl_init();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1372;
				edge_decl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1373;
				array_conform_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Edge_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool_Type_Name() { return GetToken(PLCSTPARSERParser.Bool_Type_Name, 0); }
		public Edge_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edge_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterEdge_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitEdge_decl(this);
		}
	}

	[RuleVersion(0)]
	public Edge_declContext edge_decl() {
		Edge_declContext _localctx = new Edge_declContext(Context, State);
		EnterRule(_localctx, 220, RULE_edge_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376;
			variable_list();
			State = 1377;
			Match(T__33);
			State = 1378;
			Match(Bool_Type_Name);
			State = 1379;
			_la = TokenStream.LA(1);
			if ( !(_la==T__61 || _la==T__62) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_decl_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Located_atContext located_at() {
			return GetRuleContext<Located_atContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loc_var_spec_initContext loc_var_spec_init() {
			return GetRuleContext<Loc_var_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_spec_initContext simple_spec_init() {
			return GetRuleContext<Simple_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Str_var_declContext str_var_decl() {
			return GetRuleContext<Str_var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_spec_initContext ref_spec_init() {
			return GetRuleContext<Ref_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_var_decl_initContext array_var_decl_init() {
			return GetRuleContext<Array_var_decl_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_var_decl_initContext struct_var_decl_init() {
			return GetRuleContext<Struct_var_decl_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_decl_initContext fb_decl_init() {
			return GetRuleContext<Fb_decl_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_spec_initContext interface_spec_init() {
			return GetRuleContext<Interface_spec_initContext>(0);
		}
		public Var_decl_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterVar_decl_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitVar_decl_init(this);
		}
	}

	[RuleVersion(0)]
	public Var_decl_initContext var_decl_init() {
		Var_decl_initContext _localctx = new Var_decl_initContext(Context, State);
		EnterRule(_localctx, 222, RULE_var_decl_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				{
				State = 1381;
				variable_list();
				State = 1382;
				Match(T__33);
				State = 1390;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 1383;
					simple_spec_init();
					}
					break;
				case 2:
					{
					State = 1384;
					str_var_decl();
					}
					break;
				case 3:
					{
					State = 1385;
					ref_spec_init();
					}
					break;
				case 4:
					{
					State = 1386;
					array_var_decl_init();
					}
					break;
				case 5:
					{
					State = 1387;
					struct_var_decl_init();
					}
					break;
				case 6:
					{
					State = 1388;
					fb_decl_init();
					}
					break;
				case 7:
					{
					State = 1389;
					interface_spec_init();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				State = 1393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
					{
					State = 1392;
					variable_name();
					}
				}

				State = 1395;
				located_at();
				State = 1396;
				Match(T__33);
				State = 1397;
				loc_var_spec_init();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_specContext ref_spec() {
			return GetRuleContext<Ref_specContext>(0);
		}
		public Ref_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRef_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRef_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public Ref_var_declContext ref_var_decl() {
		Ref_var_declContext _localctx = new Ref_var_declContext(Context, State);
		EnterRule(_localctx, 224, RULE_ref_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			variable_list();
			State = 1402;
			Match(T__33);
			State = 1403;
			ref_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_accessContext interface_type_access() {
			return GetRuleContext<Interface_type_accessContext>(0);
		}
		public Interface_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInterface_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInterface_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public Interface_var_declContext interface_var_decl() {
		Interface_var_declContext _localctx = new Interface_var_declContext(Context, State);
		EnterRule(_localctx, 226, RULE_interface_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1405;
			variable_list();
			State = 1406;
			Match(T__33);
			State = 1407;
			interface_type_access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext[] variable_name() {
			return GetRuleContexts<Variable_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name(int i) {
			return GetRuleContext<Variable_nameContext>(i);
		}
		public Variable_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterVariable_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitVariable_list(this);
		}
	}

	[RuleVersion(0)]
	public Variable_listContext variable_list() {
		Variable_listContext _localctx = new Variable_listContext(Context, State);
		EnterRule(_localctx, 228, RULE_variable_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409;
			variable_name();
			State = 1414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 1410;
				Match(T__47);
				State = 1411;
				variable_name();
				}
				}
				State = 1416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_var_decl_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_spec_initContext array_spec_init() {
			return GetRuleContext<Array_spec_initContext>(0);
		}
		public Array_var_decl_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_var_decl_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_var_decl_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_var_decl_init(this);
		}
	}

	[RuleVersion(0)]
	public Array_var_decl_initContext array_var_decl_init() {
		Array_var_decl_initContext _localctx = new Array_var_decl_initContext(Context, State);
		EnterRule(_localctx, 230, RULE_array_var_decl_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1417;
			array_spec_init();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_conformandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_accessContext data_type_access() {
			return GetRuleContext<Data_type_accessContext>(0);
		}
		public Array_conformandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_conformand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_conformand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_conformand(this);
		}
	}

	[RuleVersion(0)]
	public Array_conformandContext array_conformand() {
		Array_conformandContext _localctx = new Array_conformandContext(Context, State);
		EnterRule(_localctx, 232, RULE_array_conformand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1419;
			Match(T__48);
			State = 1420;
			Match(T__35);
			State = 1421;
			Match(T__63);
			State = 1426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 1422;
				Match(T__47);
				State = 1423;
				Match(T__63);
				}
				}
				State = 1428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1429;
			Match(T__36);
			State = 1430;
			Match(T__49);
			State = 1431;
			data_type_access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_conform_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_conformandContext array_conformand() {
			return GetRuleContext<Array_conformandContext>(0);
		}
		public Array_conform_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_conform_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_conform_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_conform_decl(this);
		}
	}

	[RuleVersion(0)]
	public Array_conform_declContext array_conform_decl() {
		Array_conform_declContext _localctx = new Array_conform_declContext(Context, State);
		EnterRule(_localctx, 234, RULE_array_conform_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433;
			variable_list();
			State = 1434;
			Match(T__33);
			State = 1435;
			array_conformand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_var_decl_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_spec_initContext struct_spec_init() {
			return GetRuleContext<Struct_spec_initContext>(0);
		}
		public Struct_var_decl_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_var_decl_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_var_decl_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_var_decl_init(this);
		}
	}

	[RuleVersion(0)]
	public Struct_var_decl_initContext struct_var_decl_init() {
		Struct_var_decl_initContext _localctx = new Struct_var_decl_initContext(Context, State);
		EnterRule(_localctx, 236, RULE_struct_var_decl_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1437;
			variable_list();
			State = 1438;
			Match(T__33);
			State = 1439;
			struct_spec_init();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_decl_no_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fb_nameContext[] fb_name() {
			return GetRuleContexts<Fb_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_nameContext fb_name(int i) {
			return GetRuleContext<Fb_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_type_accessContext fb_type_access() {
			return GetRuleContext<Fb_type_accessContext>(0);
		}
		public Fb_decl_no_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_decl_no_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_decl_no_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_decl_no_init(this);
		}
	}

	[RuleVersion(0)]
	public Fb_decl_no_initContext fb_decl_no_init() {
		Fb_decl_no_initContext _localctx = new Fb_decl_no_initContext(Context, State);
		EnterRule(_localctx, 238, RULE_fb_decl_no_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441;
			fb_name();
			State = 1446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 1442;
				Match(T__47);
				State = 1443;
				fb_name();
				}
				}
				State = 1448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1449;
			Match(T__33);
			State = 1450;
			fb_type_access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_decl_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fb_decl_no_initContext fb_decl_no_init() {
			return GetRuleContext<Fb_decl_no_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_initContext struct_init() {
			return GetRuleContext<Struct_initContext>(0);
		}
		public Fb_decl_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_decl_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_decl_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_decl_init(this);
		}
	}

	[RuleVersion(0)]
	public Fb_decl_initContext fb_decl_init() {
		Fb_decl_initContext _localctx = new Fb_decl_initContext(Context, State);
		EnterRule(_localctx, 240, RULE_fb_decl_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452;
			fb_decl_no_init();
			State = 1456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1453;
				Match(T__33);
				State = 1454;
				Match(T__43);
				State = 1455;
				struct_init();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Fb_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_name(this);
		}
	}

	[RuleVersion(0)]
	public Fb_nameContext fb_name() {
		Fb_nameContext _localctx = new Fb_nameContext(Context, State);
		EnterRule(_localctx, 242, RULE_fb_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_instance_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fb_nameContext fb_name() {
			return GetRuleContext<Fb_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Fb_instance_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_instance_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_instance_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_instance_name(this);
		}
	}

	[RuleVersion(0)]
	public Fb_instance_nameContext fb_instance_name() {
		Fb_instance_nameContext _localctx = new Fb_instance_nameContext(Context, State);
		EnterRule(_localctx, 244, RULE_fb_instance_name);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1465;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1460;
					namespace_name();
					State = 1461;
					Match(T__21);
					}
					} 
				}
				State = 1467;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			}
			State = 1468;
			fb_name();
			State = 1472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__55) {
				{
				{
				State = 1469;
				Match(T__55);
				}
				}
				State = 1474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Output_declContext[] output_decl() {
			return GetRuleContexts<Output_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_declContext output_decl(int i) {
			return GetRuleContext<Output_declContext>(i);
		}
		public Output_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterOutput_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitOutput_decls(this);
		}
	}

	[RuleVersion(0)]
	public Output_declsContext output_decls() {
		Output_declsContext _localctx = new Output_declsContext(Context, State);
		EnterRule(_localctx, 246, RULE_output_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475;
			Match(T__64);
			State = 1477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__58 || _la==T__59) {
				{
				State = 1476;
				_la = TokenStream.LA(1);
				if ( !(_la==T__58 || _la==T__59) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==T__71 || _la==Identifier) {
				{
				{
				State = 1479;
				output_decl();
				State = 1480;
				Match(T__41);
				}
				}
				State = 1486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1487;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_initContext var_decl_init() {
			return GetRuleContext<Var_decl_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_conform_declContext array_conform_decl() {
			return GetRuleContext<Array_conform_declContext>(0);
		}
		public Output_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterOutput_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitOutput_decl(this);
		}
	}

	[RuleVersion(0)]
	public Output_declContext output_decl() {
		Output_declContext _localctx = new Output_declContext(Context, State);
		EnterRule(_localctx, 248, RULE_output_decl);
		try {
			State = 1491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1489;
				var_decl_init();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1490;
				array_conform_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_out_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public In_out_var_declContext[] in_out_var_decl() {
			return GetRuleContexts<In_out_var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public In_out_var_declContext in_out_var_decl(int i) {
			return GetRuleContext<In_out_var_declContext>(i);
		}
		public In_out_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_out_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIn_out_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIn_out_decls(this);
		}
	}

	[RuleVersion(0)]
	public In_out_declsContext in_out_decls() {
		In_out_declsContext _localctx = new In_out_declsContext(Context, State);
		EnterRule(_localctx, 250, RULE_in_out_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493;
			Match(T__65);
			State = 1499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 1494;
				in_out_var_decl();
				State = 1495;
				Match(T__41);
				}
				}
				State = 1501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1502;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_out_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_conform_declContext array_conform_decl() {
			return GetRuleContext<Array_conform_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_decl_no_initContext fb_decl_no_init() {
			return GetRuleContext<Fb_decl_no_initContext>(0);
		}
		public In_out_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_out_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIn_out_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIn_out_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public In_out_var_declContext in_out_var_decl() {
		In_out_var_declContext _localctx = new In_out_var_declContext(Context, State);
		EnterRule(_localctx, 252, RULE_in_out_var_decl);
		try {
			State = 1507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1504;
				var_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1505;
				array_conform_decl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1506;
				fb_decl_no_init();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_specContext simple_spec() {
			return GetRuleContext<Simple_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Str_var_declContext str_var_decl() {
			return GetRuleContext<Str_var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_var_declContext array_var_decl() {
			return GetRuleContext<Array_var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_var_declContext struct_var_decl() {
			return GetRuleContext<Struct_var_declContext>(0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 254, RULE_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1509;
			variable_list();
			State = 1510;
			Match(T__33);
			State = 1515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1511;
				simple_spec();
				}
				break;
			case 2:
				{
				State = 1512;
				str_var_decl();
				}
				break;
			case 3:
				{
				State = 1513;
				array_var_decl();
				}
				break;
			case 4:
				{
				State = 1514;
				struct_var_decl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext array_spec() {
			return GetRuleContext<Array_specContext>(0);
		}
		public Array_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterArray_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitArray_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public Array_var_declContext array_var_decl() {
		Array_var_declContext _localctx = new Array_var_declContext(Context, State);
		EnterRule(_localctx, 256, RULE_array_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517;
			variable_list();
			State = 1518;
			Match(T__33);
			State = 1519;
			array_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_accessContext struct_type_access() {
			return GetRuleContext<Struct_type_accessContext>(0);
		}
		public Struct_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStruct_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStruct_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public Struct_var_declContext struct_var_decl() {
		Struct_var_declContext _localctx = new Struct_var_declContext(Context, State);
		EnterRule(_localctx, 258, RULE_struct_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1521;
			variable_list();
			State = 1522;
			Match(T__33);
			State = 1523;
			struct_type_access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Access_Spec() { return GetToken(PLCSTPARSERParser.Access_Spec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_initContext[] var_decl_init() {
			return GetRuleContexts<Var_decl_initContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_initContext var_decl_init(int i) {
			return GetRuleContext<Var_decl_initContext>(i);
		}
		public Var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterVar_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitVar_decls(this);
		}
	}

	[RuleVersion(0)]
	public Var_declsContext var_decls() {
		Var_declsContext _localctx = new Var_declsContext(Context, State);
		EnterRule(_localctx, 260, RULE_var_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525;
			Match(T__66);
			State = 1527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__67) {
				{
				State = 1526;
				Match(T__67);
				}
			}

			State = 1530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Access_Spec) {
				{
				State = 1529;
				Match(Access_Spec);
				}
			}

			State = 1537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==T__71 || _la==Identifier) {
				{
				{
				State = 1532;
				var_decl_init();
				State = 1533;
				Match(T__41);
				}
				}
				State = 1539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1540;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Retain_var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Access_Spec() { return GetToken(PLCSTPARSERParser.Access_Spec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_initContext[] var_decl_init() {
			return GetRuleContexts<Var_decl_initContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_initContext var_decl_init(int i) {
			return GetRuleContext<Var_decl_initContext>(i);
		}
		public Retain_var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retain_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRetain_var_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRetain_var_decls(this);
		}
	}

	[RuleVersion(0)]
	public Retain_var_declsContext retain_var_decls() {
		Retain_var_declsContext _localctx = new Retain_var_declsContext(Context, State);
		EnterRule(_localctx, 262, RULE_retain_var_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1542;
			Match(T__66);
			State = 1543;
			Match(T__58);
			State = 1545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Access_Spec) {
				{
				State = 1544;
				Match(Access_Spec);
				}
			}

			State = 1552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==T__71 || _la==Identifier) {
				{
				{
				State = 1547;
				var_decl_init();
				State = 1548;
				Match(T__41);
				}
				}
				State = 1554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1555;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loc_var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Loc_var_declContext[] loc_var_decl() {
			return GetRuleContexts<Loc_var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loc_var_declContext loc_var_decl(int i) {
			return GetRuleContext<Loc_var_declContext>(i);
		}
		public Loc_var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loc_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterLoc_var_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitLoc_var_decls(this);
		}
	}

	[RuleVersion(0)]
	public Loc_var_declsContext loc_var_decls() {
		Loc_var_declsContext _localctx = new Loc_var_declsContext(Context, State);
		EnterRule(_localctx, 264, RULE_loc_var_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1557;
			Match(T__66);
			State = 1559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 515L) != 0)) {
				{
				State = 1558;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 515L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==T__71 || _la==Identifier) {
				{
				{
				State = 1561;
				loc_var_decl();
				State = 1562;
				Match(T__41);
				}
				}
				State = 1568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1569;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loc_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Located_atContext located_at() {
			return GetRuleContext<Located_atContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loc_var_spec_initContext loc_var_spec_init() {
			return GetRuleContext<Loc_var_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public Loc_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loc_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterLoc_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitLoc_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public Loc_var_declContext loc_var_decl() {
		Loc_var_declContext _localctx = new Loc_var_declContext(Context, State);
		EnterRule(_localctx, 266, RULE_loc_var_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				State = 1571;
				variable_name();
				}
			}

			State = 1574;
			located_at();
			State = 1575;
			Match(T__33);
			State = 1576;
			loc_var_spec_init();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Temp_var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext[] var_decl() {
			return GetRuleContexts<Var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl(int i) {
			return GetRuleContext<Var_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_var_declContext[] ref_var_decl() {
			return GetRuleContexts<Ref_var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_var_declContext ref_var_decl(int i) {
			return GetRuleContext<Ref_var_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_var_declContext[] interface_var_decl() {
			return GetRuleContexts<Interface_var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_var_declContext interface_var_decl(int i) {
			return GetRuleContext<Interface_var_declContext>(i);
		}
		public Temp_var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temp_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterTemp_var_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitTemp_var_decls(this);
		}
	}

	[RuleVersion(0)]
	public Temp_var_declsContext temp_var_decls() {
		Temp_var_declsContext _localctx = new Temp_var_declsContext(Context, State);
		EnterRule(_localctx, 268, RULE_temp_var_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1578;
			Match(T__68);
			State = 1588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 1582;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
				case 1:
					{
					State = 1579;
					var_decl();
					}
					break;
				case 2:
					{
					State = 1580;
					ref_var_decl();
					}
					break;
				case 3:
					{
					State = 1581;
					interface_var_decl();
					}
					break;
				}
				State = 1584;
				Match(T__41);
				}
				}
				State = 1590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1591;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public External_declContext[] external_decl() {
			return GetRuleContexts<External_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_declContext external_decl(int i) {
			return GetRuleContext<External_declContext>(i);
		}
		public External_var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterExternal_var_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitExternal_var_decls(this);
		}
	}

	[RuleVersion(0)]
	public External_var_declsContext external_var_decls() {
		External_var_declsContext _localctx = new External_var_declsContext(Context, State);
		EnterRule(_localctx, 270, RULE_external_var_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1593;
			Match(T__69);
			State = 1595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__67) {
				{
				State = 1594;
				Match(T__67);
				}
			}

			State = 1602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 1597;
				external_decl();
				State = 1598;
				Match(T__41);
				}
				}
				State = 1604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1605;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_nameContext global_var_name() {
			return GetRuleContext<Global_var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_specContext simple_spec() {
			return GetRuleContext<Simple_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext array_spec() {
			return GetRuleContext<Array_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_accessContext struct_type_access() {
			return GetRuleContext<Struct_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_type_accessContext fb_type_access() {
			return GetRuleContext<Fb_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_type_accessContext ref_type_access() {
			return GetRuleContext<Ref_type_accessContext>(0);
		}
		public External_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterExternal_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitExternal_decl(this);
		}
	}

	[RuleVersion(0)]
	public External_declContext external_decl() {
		External_declContext _localctx = new External_declContext(Context, State);
		EnterRule(_localctx, 272, RULE_external_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1607;
			global_var_name();
			State = 1608;
			Match(T__33);
			State = 1614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				{
				State = 1609;
				simple_spec();
				}
				break;
			case 2:
				{
				State = 1610;
				array_spec();
				}
				break;
			case 3:
				{
				State = 1611;
				struct_type_access();
				}
				break;
			case 4:
				{
				State = 1612;
				fb_type_access();
				}
				break;
			case 5:
				{
				State = 1613;
				ref_type_access();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_var_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Global_var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_var_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterGlobal_var_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitGlobal_var_name(this);
		}
	}

	[RuleVersion(0)]
	public Global_var_nameContext global_var_name() {
		Global_var_nameContext _localctx = new Global_var_nameContext(Context, State);
		EnterRule(_localctx, 274, RULE_global_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1616;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_declContext[] global_var_decl() {
			return GetRuleContexts<Global_var_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_declContext global_var_decl(int i) {
			return GetRuleContext<Global_var_declContext>(i);
		}
		public Global_var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterGlobal_var_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitGlobal_var_decls(this);
		}
	}

	[RuleVersion(0)]
	public Global_var_declsContext global_var_decls() {
		Global_var_declsContext _localctx = new Global_var_declsContext(Context, State);
		EnterRule(_localctx, 276, RULE_global_var_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618;
			Match(T__70);
			State = 1620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__58 || _la==T__67) {
				{
				State = 1619;
				_la = TokenStream.LA(1);
				if ( !(_la==T__58 || _la==T__67) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 1622;
				global_var_decl();
				State = 1623;
				Match(T__41);
				}
				}
				State = 1629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1630;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_specContext global_var_spec() {
			return GetRuleContext<Global_var_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loc_var_spec_initContext loc_var_spec_init() {
			return GetRuleContext<Loc_var_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_type_accessContext fb_type_access() {
			return GetRuleContext<Fb_type_accessContext>(0);
		}
		public Global_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterGlobal_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitGlobal_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public Global_var_declContext global_var_decl() {
		Global_var_declContext _localctx = new Global_var_declContext(Context, State);
		EnterRule(_localctx, 278, RULE_global_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632;
			global_var_spec();
			State = 1633;
			Match(T__33);
			State = 1636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				{
				State = 1634;
				loc_var_spec_init();
				}
				break;
			case 2:
				{
				State = 1635;
				fb_type_access();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_var_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_nameContext[] global_var_name() {
			return GetRuleContexts<Global_var_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_nameContext global_var_name(int i) {
			return GetRuleContext<Global_var_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Located_atContext located_at() {
			return GetRuleContext<Located_atContext>(0);
		}
		public Global_var_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_var_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterGlobal_var_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitGlobal_var_spec(this);
		}
	}

	[RuleVersion(0)]
	public Global_var_specContext global_var_spec() {
		Global_var_specContext _localctx = new Global_var_specContext(Context, State);
		EnterRule(_localctx, 280, RULE_global_var_spec);
		int _la;
		try {
			State = 1649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1638;
				global_var_name();
				State = 1643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__47) {
					{
					{
					State = 1639;
					Match(T__47);
					State = 1640;
					global_var_name();
					}
					}
					State = 1645;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1646;
				global_var_name();
				State = 1647;
				located_at();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loc_var_spec_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_spec_initContext simple_spec_init() {
			return GetRuleContext<Simple_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_spec_initContext array_spec_init() {
			return GetRuleContext<Array_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_spec_initContext struct_spec_init() {
			return GetRuleContext<Struct_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public S_byte_str_specContext s_byte_str_spec() {
			return GetRuleContext<S_byte_str_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public D_byte_str_specContext d_byte_str_spec() {
			return GetRuleContext<D_byte_str_specContext>(0);
		}
		public Loc_var_spec_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loc_var_spec_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterLoc_var_spec_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitLoc_var_spec_init(this);
		}
	}

	[RuleVersion(0)]
	public Loc_var_spec_initContext loc_var_spec_init() {
		Loc_var_spec_initContext _localctx = new Loc_var_spec_initContext(Context, State);
		EnterRule(_localctx, 282, RULE_loc_var_spec_init);
		try {
			State = 1656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1651;
				simple_spec_init();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1652;
				array_spec_init();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1653;
				struct_spec_init();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1654;
				s_byte_str_spec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1655;
				d_byte_str_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Located_atContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Direct_variable() { return GetToken(PLCSTPARSERParser.Direct_variable, 0); }
		public Located_atContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_located_at; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterLocated_at(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitLocated_at(this);
		}
	}

	[RuleVersion(0)]
	public Located_atContext located_at() {
		Located_atContext _localctx = new Located_atContext(Context, State);
		EnterRule(_localctx, 284, RULE_located_at);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1658;
			Match(T__71);
			State = 1659;
			Match(Direct_variable);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Located_at_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Direct_represented() { return GetToken(PLCSTPARSERParser.Direct_represented, 0); }
		public Located_at_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_located_at_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterLocated_at_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitLocated_at_init(this);
		}
	}

	[RuleVersion(0)]
	public Located_at_initContext located_at_init() {
		Located_at_initContext _localctx = new Located_at_initContext(Context, State);
		EnterRule(_localctx, 286, RULE_located_at_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661;
			Match(T__71);
			State = 1662;
			Match(Direct_represented);
			State = 1663;
			Match(T__63);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Str_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public S_byte_str_var_declContext s_byte_str_var_decl() {
			return GetRuleContext<S_byte_str_var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public D_byte_str_var_declContext d_byte_str_var_decl() {
			return GetRuleContext<D_byte_str_var_declContext>(0);
		}
		public Str_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStr_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStr_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public Str_var_declContext str_var_decl() {
		Str_var_declContext _localctx = new Str_var_declContext(Context, State);
		EnterRule(_localctx, 288, RULE_str_var_decl);
		try {
			State = 1667;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1665;
				s_byte_str_var_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1666;
				d_byte_str_var_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class S_byte_str_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public S_byte_str_specContext s_byte_str_spec() {
			return GetRuleContext<S_byte_str_specContext>(0);
		}
		public S_byte_str_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s_byte_str_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterS_byte_str_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitS_byte_str_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public S_byte_str_var_declContext s_byte_str_var_decl() {
		S_byte_str_var_declContext _localctx = new S_byte_str_var_declContext(Context, State);
		EnterRule(_localctx, 290, RULE_s_byte_str_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669;
			variable_list();
			State = 1670;
			Match(T__33);
			State = 1671;
			s_byte_str_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class S_byte_str_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S_byte_char() { return GetToken(PLCSTPARSERParser.S_byte_char, 0); }
		public S_byte_str_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s_byte_str_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterS_byte_str_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitS_byte_str_spec(this);
		}
	}

	[RuleVersion(0)]
	public S_byte_str_specContext s_byte_str_spec() {
		S_byte_str_specContext _localctx = new S_byte_str_specContext(Context, State);
		EnterRule(_localctx, 292, RULE_s_byte_str_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1673;
			Match(T__24);
			State = 1677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__35) {
				{
				State = 1674;
				Match(T__35);
				State = 1675;
				Match(Unsigned_int);
				State = 1676;
				Match(T__36);
				}
			}

			State = 1682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1679;
				Match(T__33);
				State = 1680;
				Match(T__43);
				State = 1681;
				Match(S_byte_char);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class D_byte_str_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public D_byte_str_specContext d_byte_str_spec() {
			return GetRuleContext<D_byte_str_specContext>(0);
		}
		public D_byte_str_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_d_byte_str_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterD_byte_str_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitD_byte_str_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public D_byte_str_var_declContext d_byte_str_var_decl() {
		D_byte_str_var_declContext _localctx = new D_byte_str_var_declContext(Context, State);
		EnterRule(_localctx, 294, RULE_d_byte_str_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1684;
			variable_list();
			State = 1685;
			Match(T__33);
			State = 1686;
			d_byte_str_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class D_byte_str_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode D_byte_char() { return GetToken(PLCSTPARSERParser.D_byte_char, 0); }
		public D_byte_str_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_d_byte_str_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterD_byte_str_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitD_byte_str_spec(this);
		}
	}

	[RuleVersion(0)]
	public D_byte_str_specContext d_byte_str_spec() {
		D_byte_str_specContext _localctx = new D_byte_str_specContext(Context, State);
		EnterRule(_localctx, 296, RULE_d_byte_str_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1688;
			Match(T__37);
			State = 1692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__35) {
				{
				State = 1689;
				Match(T__35);
				State = 1690;
				Match(Unsigned_int);
				State = 1691;
				Match(T__36);
				}
			}

			State = 1697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1694;
				Match(T__33);
				State = 1695;
				Match(T__43);
				State = 1696;
				Match(D_byte_char);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loc_partly_var_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Loc_partly_varContext[] loc_partly_var() {
			return GetRuleContexts<Loc_partly_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loc_partly_varContext loc_partly_var(int i) {
			return GetRuleContext<Loc_partly_varContext>(i);
		}
		public Loc_partly_var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loc_partly_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterLoc_partly_var_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitLoc_partly_var_decl(this);
		}
	}

	[RuleVersion(0)]
	public Loc_partly_var_declContext loc_partly_var_decl() {
		Loc_partly_var_declContext _localctx = new Loc_partly_var_declContext(Context, State);
		EnterRule(_localctx, 298, RULE_loc_partly_var_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1699;
			Match(T__66);
			State = 1701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__58 || _la==T__59) {
				{
				State = 1700;
				_la = TokenStream.LA(1);
				if ( !(_la==T__58 || _la==T__59) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 1703;
				loc_partly_var();
				}
				}
				State = 1708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1709;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loc_partly_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_specContext var_spec() {
			return GetRuleContext<Var_specContext>(0);
		}
		public Loc_partly_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loc_partly_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterLoc_partly_var(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitLoc_partly_var(this);
		}
	}

	[RuleVersion(0)]
	public Loc_partly_varContext loc_partly_var() {
		Loc_partly_varContext _localctx = new Loc_partly_varContext(Context, State);
		EnterRule(_localctx, 300, RULE_loc_partly_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711;
			variable_name();
			State = 1712;
			Match(T__71);
			State = 1713;
			Match(T__72);
			State = 1714;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 224L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1715;
			Match(T__63);
			State = 1716;
			Match(T__33);
			State = 1717;
			var_spec();
			State = 1718;
			Match(T__41);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_specContext simple_spec() {
			return GetRuleContext<Simple_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext array_spec() {
			return GetRuleContext<Array_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_accessContext struct_type_access() {
			return GetRuleContext<Struct_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		public Var_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterVar_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitVar_spec(this);
		}
	}

	[RuleVersion(0)]
	public Var_specContext var_spec() {
		Var_specContext _localctx = new Var_specContext(Context, State);
		EnterRule(_localctx, 302, RULE_var_spec);
		int _la;
		try {
			State = 1729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1720;
				simple_spec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1721;
				array_spec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1722;
				struct_type_access();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1723;
				_la = TokenStream.LA(1);
				if ( !(_la==T__24 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 1724;
					Match(T__35);
					State = 1725;
					Match(Unsigned_int);
					State = 1726;
					Match(T__36);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Std_Func_Name() { return GetToken(PLCSTPARSERParser.Std_Func_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Derived_func_nameContext derived_func_name() {
			return GetRuleContext<Derived_func_nameContext>(0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFunc_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFunc_name(this);
		}
	}

	[RuleVersion(0)]
	public Func_nameContext func_name() {
		Func_nameContext _localctx = new Func_nameContext(Context, State);
		EnterRule(_localctx, 304, RULE_func_name);
		try {
			State = 1733;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Std_Func_Name:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1731;
				Match(Std_Func_Name);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1732;
				derived_func_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Func_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFunc_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFunc_access(this);
		}
	}

	[RuleVersion(0)]
	public Func_accessContext func_access() {
		Func_accessContext _localctx = new Func_accessContext(Context, State);
		EnterRule(_localctx, 306, RULE_func_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1740;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1735;
					namespace_name();
					State = 1736;
					Match(T__21);
					}
					} 
				}
				State = 1742;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			State = 1743;
			func_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_func_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Derived_func_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_func_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDerived_func_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDerived_func_name(this);
		}
	}

	[RuleVersion(0)]
	public Derived_func_nameContext derived_func_name() {
		Derived_func_nameContext _localctx = new Derived_func_nameContext(Context, State);
		EnterRule(_localctx, 308, RULE_derived_func_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Derived_func_nameContext derived_func_name() {
			return GetRuleContext<Derived_func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_accessContext data_type_access() {
			return GetRuleContext<Data_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_var_declsContext[] io_var_decls() {
			return GetRuleContexts<Io_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_var_declsContext io_var_decls(int i) {
			return GetRuleContext<Io_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_declsContext[] func_var_decls() {
			return GetRuleContexts<Func_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_declsContext func_var_decls(int i) {
			return GetRuleContext<Func_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Temp_var_declsContext[] temp_var_decls() {
			return GetRuleContexts<Temp_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Temp_var_declsContext temp_var_decls(int i) {
			return GetRuleContext<Temp_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_bodyContext func_body() {
			return GetRuleContext<Func_bodyContext>(0);
		}
		public Func_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFunc_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFunc_decl(this);
		}
	}

	[RuleVersion(0)]
	public Func_declContext func_decl() {
		Func_declContext _localctx = new Func_declContext(Context, State);
		EnterRule(_localctx, 310, RULE_func_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1747;
			Match(T__73);
			State = 1748;
			derived_func_name();
			State = 1751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1749;
				Match(T__33);
				State = 1750;
				data_type_access();
				}
			}

			State = 1756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__115) {
				{
				{
				State = 1753;
				using_directive();
				}
				}
				State = 1758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 7041L) != 0)) {
				{
				State = 1762;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__57:
				case T__64:
				case T__65:
					{
					State = 1759;
					io_var_decls();
					}
					break;
				case T__66:
				case T__69:
					{
					State = 1760;
					func_var_decls();
					}
					break;
				case T__68:
					{
					State = 1761;
					temp_var_decls();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144119586122399742L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 1220229278504894467L) != 0) || _la==EOL) {
				{
				State = 1767;
				func_body();
				}
			}

			State = 1770;
			Match(T__74);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Io_var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Input_declsContext input_decls() {
			return GetRuleContext<Input_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_declsContext output_decls() {
			return GetRuleContext<Output_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public In_out_declsContext in_out_decls() {
			return GetRuleContext<In_out_declsContext>(0);
		}
		public Io_var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_io_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIo_var_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIo_var_decls(this);
		}
	}

	[RuleVersion(0)]
	public Io_var_declsContext io_var_decls() {
		Io_var_declsContext _localctx = new Io_var_declsContext(Context, State);
		EnterRule(_localctx, 312, RULE_io_var_decls);
		try {
			State = 1775;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__57:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1772;
				input_decls();
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1773;
				output_decls();
				}
				break;
			case T__65:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1774;
				in_out_decls();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public External_var_declsContext external_var_decls() {
			return GetRuleContext<External_var_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declsContext var_decls() {
			return GetRuleContext<Var_declsContext>(0);
		}
		public Func_var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFunc_var_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFunc_var_decls(this);
		}
	}

	[RuleVersion(0)]
	public Func_var_declsContext func_var_decls() {
		Func_var_declsContext _localctx = new Func_var_declsContext(Context, State);
		EnterRule(_localctx, 314, RULE_func_var_decls);
		try {
			State = 1779;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__69:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1777;
				external_var_decls();
				}
				break;
			case T__66:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1778;
				var_decls();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ladder_diagramContext ladder_diagram() {
			return GetRuleContext<Ladder_diagramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_diagramContext fb_diagram() {
			return GetRuleContext<Fb_diagramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruction_listContext instruction_list() {
			return GetRuleContext<Instruction_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Other_Languages() { return GetToken(PLCSTPARSERParser.Other_Languages, 0); }
		public Func_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFunc_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFunc_body(this);
		}
	}

	[RuleVersion(0)]
	public Func_bodyContext func_body() {
		Func_bodyContext _localctx = new Func_bodyContext(Context, State);
		EnterRule(_localctx, 316, RULE_func_body);
		try {
			State = 1786;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1781;
				ladder_diagram();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1782;
				fb_diagram();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1783;
				stmt_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1784;
				instruction_list();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1785;
				Match(Other_Languages);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Std_FB_Name() { return GetToken(PLCSTPARSERParser.Std_FB_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Derived_fb_nameContext derived_fb_name() {
			return GetRuleContext<Derived_fb_nameContext>(0);
		}
		public Fb_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Fb_type_nameContext fb_type_name() {
		Fb_type_nameContext _localctx = new Fb_type_nameContext(Context, State);
		EnterRule(_localctx, 318, RULE_fb_type_name);
		try {
			State = 1790;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Std_FB_Name:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1788;
				Match(Std_FB_Name);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1789;
				derived_fb_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fb_type_nameContext fb_type_name() {
			return GetRuleContext<Fb_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Fb_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Fb_type_accessContext fb_type_access() {
		Fb_type_accessContext _localctx = new Fb_type_accessContext(Context, State);
		EnterRule(_localctx, 320, RULE_fb_type_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1792;
					namespace_name();
					State = 1793;
					Match(T__21);
					}
					} 
				}
				State = 1799;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			}
			State = 1800;
			fb_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_fb_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Derived_fb_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_fb_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterDerived_fb_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitDerived_fb_name(this);
		}
	}

	[RuleVersion(0)]
	public Derived_fb_nameContext derived_fb_name() {
		Derived_fb_nameContext _localctx = new Derived_fb_nameContext(Context, State);
		EnterRule(_localctx, 322, RULE_derived_fb_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1802;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Derived_fb_nameContext derived_fb_name() {
			return GetRuleContext<Derived_fb_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_name_listContext interface_name_list() {
			return GetRuleContext<Interface_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_io_var_declsContext[] fb_io_var_decls() {
			return GetRuleContexts<Fb_io_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_io_var_declsContext fb_io_var_decls(int i) {
			return GetRuleContext<Fb_io_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_declsContext[] func_var_decls() {
			return GetRuleContexts<Func_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_declsContext func_var_decls(int i) {
			return GetRuleContext<Func_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Temp_var_declsContext[] temp_var_decls() {
			return GetRuleContexts<Temp_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Temp_var_declsContext temp_var_decls(int i) {
			return GetRuleContext<Temp_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_var_declsContext[] other_var_decls() {
			return GetRuleContexts<Other_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_var_declsContext other_var_decls(int i) {
			return GetRuleContext<Other_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_declContext[] method_decl() {
			return GetRuleContexts<Method_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_declContext method_decl(int i) {
			return GetRuleContext<Method_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_bodyContext fb_body() {
			return GetRuleContext<Fb_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_type_accessContext fb_type_access() {
			return GetRuleContext<Fb_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_type_accessContext class_type_access() {
			return GetRuleContext<Class_type_accessContext>(0);
		}
		public Fb_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_decl(this);
		}
	}

	[RuleVersion(0)]
	public Fb_declContext fb_decl() {
		Fb_declContext _localctx = new Fb_declContext(Context, State);
		EnterRule(_localctx, 324, RULE_fb_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1804;
			Match(T__75);
			State = 1806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__76 || _la==T__77) {
				{
				State = 1805;
				_la = TokenStream.LA(1);
				if ( !(_la==T__76 || _la==T__77) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1808;
			derived_fb_name();
			State = 1812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__115) {
				{
				{
				State = 1809;
				using_directive();
				}
				}
				State = 1814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__78) {
				{
				State = 1815;
				Match(T__78);
				State = 1818;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
				case 1:
					{
					State = 1816;
					fb_type_access();
					}
					break;
				case 2:
					{
					State = 1817;
					class_type_access();
					}
					break;
				}
				}
			}

			State = 1824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__79) {
				{
				State = 1822;
				Match(T__79);
				State = 1823;
				interface_name_list();
				}
			}

			State = 1832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 7041L) != 0)) {
				{
				State = 1830;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
				case 1:
					{
					State = 1826;
					fb_io_var_decls();
					}
					break;
				case 2:
					{
					State = 1827;
					func_var_decls();
					}
					break;
				case 3:
					{
					State = 1828;
					temp_var_decls();
					}
					break;
				case 4:
					{
					State = 1829;
					other_var_decls();
					}
					break;
				}
				}
				State = 1834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1838;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__81) {
				{
				{
				State = 1835;
				method_decl();
				}
				}
				State = 1840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144119586122399742L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 4703802003292160001L) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & 16811897L) != 0)) {
				{
				State = 1841;
				fb_body();
				}
			}

			State = 1844;
			Match(T__80);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_io_var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fb_input_declsContext fb_input_decls() {
			return GetRuleContext<Fb_input_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_output_declsContext fb_output_decls() {
			return GetRuleContext<Fb_output_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public In_out_declsContext in_out_decls() {
			return GetRuleContext<In_out_declsContext>(0);
		}
		public Fb_io_var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_io_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_io_var_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_io_var_decls(this);
		}
	}

	[RuleVersion(0)]
	public Fb_io_var_declsContext fb_io_var_decls() {
		Fb_io_var_declsContext _localctx = new Fb_io_var_declsContext(Context, State);
		EnterRule(_localctx, 326, RULE_fb_io_var_decls);
		try {
			State = 1849;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__57:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1846;
				fb_input_decls();
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1847;
				fb_output_decls();
				}
				break;
			case T__65:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1848;
				in_out_decls();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_input_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fb_input_declContext[] fb_input_decl() {
			return GetRuleContexts<Fb_input_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_input_declContext fb_input_decl(int i) {
			return GetRuleContext<Fb_input_declContext>(i);
		}
		public Fb_input_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_input_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_input_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_input_decls(this);
		}
	}

	[RuleVersion(0)]
	public Fb_input_declsContext fb_input_decls() {
		Fb_input_declsContext _localctx = new Fb_input_declsContext(Context, State);
		EnterRule(_localctx, 328, RULE_fb_input_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1851;
			Match(T__57);
			State = 1853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__58 || _la==T__59) {
				{
				State = 1852;
				_la = TokenStream.LA(1);
				if ( !(_la==T__58 || _la==T__59) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==T__71 || _la==Identifier) {
				{
				{
				State = 1855;
				fb_input_decl();
				State = 1856;
				Match(T__41);
				}
				}
				State = 1862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1863;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_input_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_initContext var_decl_init() {
			return GetRuleContext<Var_decl_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Edge_declContext edge_decl() {
			return GetRuleContext<Edge_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_conform_declContext array_conform_decl() {
			return GetRuleContext<Array_conform_declContext>(0);
		}
		public Fb_input_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_input_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_input_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_input_decl(this);
		}
	}

	[RuleVersion(0)]
	public Fb_input_declContext fb_input_decl() {
		Fb_input_declContext _localctx = new Fb_input_declContext(Context, State);
		EnterRule(_localctx, 330, RULE_fb_input_decl);
		try {
			State = 1868;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1865;
				var_decl_init();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1866;
				edge_decl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1867;
				array_conform_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_output_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fb_output_declContext[] fb_output_decl() {
			return GetRuleContexts<Fb_output_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_output_declContext fb_output_decl(int i) {
			return GetRuleContext<Fb_output_declContext>(i);
		}
		public Fb_output_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_output_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_output_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_output_decls(this);
		}
	}

	[RuleVersion(0)]
	public Fb_output_declsContext fb_output_decls() {
		Fb_output_declsContext _localctx = new Fb_output_declsContext(Context, State);
		EnterRule(_localctx, 332, RULE_fb_output_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1870;
			Match(T__64);
			State = 1872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__58 || _la==T__59) {
				{
				State = 1871;
				_la = TokenStream.LA(1);
				if ( !(_la==T__58 || _la==T__59) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==T__71 || _la==Identifier) {
				{
				{
				State = 1874;
				fb_output_decl();
				State = 1875;
				Match(T__41);
				}
				}
				State = 1881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1882;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_output_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_initContext var_decl_init() {
			return GetRuleContext<Var_decl_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_conform_declContext array_conform_decl() {
			return GetRuleContext<Array_conform_declContext>(0);
		}
		public Fb_output_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_output_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_output_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_output_decl(this);
		}
	}

	[RuleVersion(0)]
	public Fb_output_declContext fb_output_decl() {
		Fb_output_declContext _localctx = new Fb_output_declContext(Context, State);
		EnterRule(_localctx, 334, RULE_fb_output_decl);
		try {
			State = 1886;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1884;
				var_decl_init();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1885;
				array_conform_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Retain_var_declsContext retain_var_decls() {
			return GetRuleContext<Retain_var_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public No_retain_var_declsContext no_retain_var_decls() {
			return GetRuleContext<No_retain_var_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loc_partly_var_declContext loc_partly_var_decl() {
			return GetRuleContext<Loc_partly_var_declContext>(0);
		}
		public Other_var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterOther_var_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitOther_var_decls(this);
		}
	}

	[RuleVersion(0)]
	public Other_var_declsContext other_var_decls() {
		Other_var_declsContext _localctx = new Other_var_declsContext(Context, State);
		EnterRule(_localctx, 336, RULE_other_var_decls);
		try {
			State = 1891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1888;
				retain_var_decls();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1889;
				no_retain_var_decls();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1890;
				loc_partly_var_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_retain_var_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Access_Spec() { return GetToken(PLCSTPARSERParser.Access_Spec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_initContext[] var_decl_init() {
			return GetRuleContexts<Var_decl_initContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_initContext var_decl_init(int i) {
			return GetRuleContext<Var_decl_initContext>(i);
		}
		public No_retain_var_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_no_retain_var_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterNo_retain_var_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitNo_retain_var_decls(this);
		}
	}

	[RuleVersion(0)]
	public No_retain_var_declsContext no_retain_var_decls() {
		No_retain_var_declsContext _localctx = new No_retain_var_declsContext(Context, State);
		EnterRule(_localctx, 338, RULE_no_retain_var_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893;
			Match(T__66);
			State = 1894;
			Match(T__59);
			State = 1896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Access_Spec) {
				{
				State = 1895;
				Match(Access_Spec);
				}
			}

			State = 1903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==T__71 || _la==Identifier) {
				{
				{
				State = 1898;
				var_decl_init();
				State = 1899;
				Match(T__41);
				}
				}
				State = 1905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1906;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SfcContext sfc() {
			return GetRuleContext<SfcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ladder_diagramContext ladder_diagram() {
			return GetRuleContext<Ladder_diagramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_diagramContext fb_diagram() {
			return GetRuleContext<Fb_diagramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruction_listContext instruction_list() {
			return GetRuleContext<Instruction_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Other_Languages() { return GetToken(PLCSTPARSERParser.Other_Languages, 0); }
		public Fb_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_body(this);
		}
	}

	[RuleVersion(0)]
	public Fb_bodyContext fb_body() {
		Fb_bodyContext _localctx = new Fb_bodyContext(Context, State);
		EnterRule(_localctx, 340, RULE_fb_body);
		try {
			State = 1914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1908;
				sfc();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1909;
				ladder_diagram();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1910;
				fb_diagram();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1911;
				instruction_list();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1912;
				stmt_list();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1913;
				Match(Other_Languages);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Method_nameContext method_name() {
			return GetRuleContext<Method_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_bodyContext func_body() {
			return GetRuleContext<Func_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Access_Spec() { return GetToken(PLCSTPARSERParser.Access_Spec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_accessContext data_type_access() {
			return GetRuleContext<Data_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_var_declsContext[] io_var_decls() {
			return GetRuleContexts<Io_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_var_declsContext io_var_decls(int i) {
			return GetRuleContext<Io_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_declsContext[] func_var_decls() {
			return GetRuleContexts<Func_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_declsContext func_var_decls(int i) {
			return GetRuleContext<Func_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Temp_var_declsContext[] temp_var_decls() {
			return GetRuleContexts<Temp_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Temp_var_declsContext temp_var_decls(int i) {
			return GetRuleContext<Temp_var_declsContext>(i);
		}
		public Method_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterMethod_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitMethod_decl(this);
		}
	}

	[RuleVersion(0)]
	public Method_declContext method_decl() {
		Method_declContext _localctx = new Method_declContext(Context, State);
		EnterRule(_localctx, 342, RULE_method_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1916;
			Match(T__81);
			State = 1918;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Access_Spec) {
				{
				State = 1917;
				Match(Access_Spec);
				}
			}

			State = 1921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__76 || _la==T__77) {
				{
				State = 1920;
				_la = TokenStream.LA(1);
				if ( !(_la==T__76 || _la==T__77) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__82) {
				{
				State = 1923;
				Match(T__82);
				}
			}

			State = 1926;
			method_name();
			State = 1929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 1927;
				Match(T__33);
				State = 1928;
				data_type_access();
				}
			}

			State = 1936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 7041L) != 0)) {
				{
				State = 1934;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__57:
				case T__64:
				case T__65:
					{
					State = 1931;
					io_var_decls();
					}
					break;
				case T__66:
				case T__69:
					{
					State = 1932;
					func_var_decls();
					}
					break;
				case T__68:
					{
					State = 1933;
					temp_var_decls();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1939;
			func_body();
			State = 1940;
			Match(T__83);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Method_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterMethod_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitMethod_name(this);
		}
	}

	[RuleVersion(0)]
	public Method_nameContext method_name() {
		Method_nameContext _localctx = new Method_nameContext(Context, State);
		EnterRule(_localctx, 344, RULE_method_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_type_nameContext class_type_name() {
			return GetRuleContext<Class_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_type_accessContext class_type_access() {
			return GetRuleContext<Class_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_name_listContext interface_name_list() {
			return GetRuleContext<Interface_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_declsContext[] func_var_decls() {
			return GetRuleContexts<Func_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_declsContext func_var_decls(int i) {
			return GetRuleContext<Func_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_var_declsContext[] other_var_decls() {
			return GetRuleContexts<Other_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_var_declsContext other_var_decls(int i) {
			return GetRuleContext<Other_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_declContext[] method_decl() {
			return GetRuleContexts<Method_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_declContext method_decl(int i) {
			return GetRuleContext<Method_declContext>(i);
		}
		public Class_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterClass_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitClass_decl(this);
		}
	}

	[RuleVersion(0)]
	public Class_declContext class_decl() {
		Class_declContext _localctx = new Class_declContext(Context, State);
		EnterRule(_localctx, 346, RULE_class_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1944;
			Match(T__84);
			State = 1946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__76 || _la==T__77) {
				{
				State = 1945;
				_la = TokenStream.LA(1);
				if ( !(_la==T__76 || _la==T__77) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1948;
			class_type_name();
			State = 1952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__115) {
				{
				{
				State = 1949;
				using_directive();
				}
				}
				State = 1954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__78) {
				{
				State = 1955;
				Match(T__78);
				State = 1956;
				class_type_access();
				}
			}

			State = 1961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__79) {
				{
				State = 1959;
				Match(T__79);
				State = 1960;
				interface_name_list();
				}
			}

			State = 1967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__66 || _la==T__69) {
				{
				State = 1965;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
				case 1:
					{
					State = 1963;
					func_var_decls();
					}
					break;
				case 2:
					{
					State = 1964;
					other_var_decls();
					}
					break;
				}
				}
				State = 1969;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__81) {
				{
				{
				State = 1970;
				method_decl();
				}
				}
				State = 1975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1976;
			Match(T__85);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterClass_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitClass_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_nameContext class_type_name() {
		Class_type_nameContext _localctx = new Class_type_nameContext(Context, State);
		EnterRule(_localctx, 348, RULE_class_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1978;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_type_nameContext class_type_name() {
			return GetRuleContext<Class_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Class_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterClass_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitClass_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Class_type_accessContext class_type_access() {
		Class_type_accessContext _localctx = new Class_type_accessContext(Context, State);
		EnterRule(_localctx, 350, RULE_class_type_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1985;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1980;
					namespace_name();
					State = 1981;
					Match(T__21);
					}
					} 
				}
				State = 1987;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
			}
			State = 1988;
			class_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(Context, State);
		EnterRule(_localctx, 352, RULE_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_instance_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Class_instance_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_instance_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterClass_instance_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitClass_instance_name(this);
		}
	}

	[RuleVersion(0)]
	public Class_instance_nameContext class_instance_name() {
		Class_instance_nameContext _localctx = new Class_instance_nameContext(Context, State);
		EnterRule(_localctx, 354, RULE_class_instance_name);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1997;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,198,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1992;
					namespace_name();
					State = 1993;
					Match(T__21);
					}
					} 
				}
				State = 1999;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,198,Context);
			}
			State = 2000;
			class_name();
			State = 2004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__55) {
				{
				{
				State = 2001;
				Match(T__55);
				}
				}
				State = 2006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_nameContext interface_type_name() {
			return GetRuleContext<Interface_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_name_listContext interface_name_list() {
			return GetRuleContext<Interface_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_prototypeContext[] method_prototype() {
			return GetRuleContexts<Method_prototypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_prototypeContext method_prototype(int i) {
			return GetRuleContext<Method_prototypeContext>(i);
		}
		public Interface_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInterface_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInterface_decl(this);
		}
	}

	[RuleVersion(0)]
	public Interface_declContext interface_decl() {
		Interface_declContext _localctx = new Interface_declContext(Context, State);
		EnterRule(_localctx, 356, RULE_interface_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2007;
			Match(T__86);
			State = 2008;
			interface_type_name();
			State = 2012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__115) {
				{
				{
				State = 2009;
				using_directive();
				}
				}
				State = 2014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__78) {
				{
				State = 2015;
				Match(T__78);
				State = 2016;
				interface_name_list();
				}
			}

			State = 2022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__81) {
				{
				{
				State = 2019;
				method_prototype();
				}
				}
				State = 2024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2025;
			Match(T__87);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_prototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Method_nameContext method_name() {
			return GetRuleContext<Method_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_accessContext data_type_access() {
			return GetRuleContext<Data_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_var_declsContext[] io_var_decls() {
			return GetRuleContexts<Io_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_var_declsContext io_var_decls(int i) {
			return GetRuleContext<Io_var_declsContext>(i);
		}
		public Method_prototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_prototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterMethod_prototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitMethod_prototype(this);
		}
	}

	[RuleVersion(0)]
	public Method_prototypeContext method_prototype() {
		Method_prototypeContext _localctx = new Method_prototypeContext(Context, State);
		EnterRule(_localctx, 358, RULE_method_prototype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2027;
			Match(T__81);
			State = 2028;
			method_name();
			State = 2031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 2029;
				Match(T__33);
				State = 2030;
				data_type_access();
				}
			}

			State = 2036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 385L) != 0)) {
				{
				{
				State = 2033;
				io_var_decls();
				}
				}
				State = 2038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2039;
			Match(T__83);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_spec_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_listContext variable_list() {
			return GetRuleContext<Variable_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_valueContext interface_value() {
			return GetRuleContext<Interface_valueContext>(0);
		}
		public Interface_spec_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_spec_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInterface_spec_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInterface_spec_init(this);
		}
	}

	[RuleVersion(0)]
	public Interface_spec_initContext interface_spec_init() {
		Interface_spec_initContext _localctx = new Interface_spec_initContext(Context, State);
		EnterRule(_localctx, 360, RULE_interface_spec_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2041;
			variable_list();
			State = 2045;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 2042;
				Match(T__33);
				State = 2043;
				Match(T__43);
				State = 2044;
				interface_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbolic_variableContext symbolic_variable() {
			return GetRuleContext<Symbolic_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext fb_instance_name() {
			return GetRuleContext<Fb_instance_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_instance_nameContext class_instance_name() {
			return GetRuleContext<Class_instance_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(PLCSTPARSERParser.Null, 0); }
		public Interface_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInterface_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInterface_value(this);
		}
	}

	[RuleVersion(0)]
	public Interface_valueContext interface_value() {
		Interface_valueContext _localctx = new Interface_valueContext(Context, State);
		EnterRule(_localctx, 362, RULE_interface_value);
		try {
			State = 2051;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2047;
				symbolic_variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2048;
				fb_instance_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2049;
				class_instance_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2050;
				Match(Null);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_accessContext[] interface_type_access() {
			return GetRuleContexts<Interface_type_accessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_accessContext interface_type_access(int i) {
			return GetRuleContext<Interface_type_accessContext>(i);
		}
		public Interface_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInterface_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInterface_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Interface_name_listContext interface_name_list() {
		Interface_name_listContext _localctx = new Interface_name_listContext(Context, State);
		EnterRule(_localctx, 364, RULE_interface_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2053;
			interface_type_access();
			State = 2058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 2054;
				Match(T__47);
				State = 2055;
				interface_type_access();
				}
				}
				State = 2060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInterface_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInterface_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_nameContext interface_type_name() {
		Interface_type_nameContext _localctx = new Interface_type_nameContext(Context, State);
		EnterRule(_localctx, 366, RULE_interface_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2061;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_nameContext interface_type_name() {
			return GetRuleContext<Interface_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Interface_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInterface_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInterface_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_accessContext interface_type_access() {
		Interface_type_accessContext _localctx = new Interface_type_accessContext(Context, State);
		EnterRule(_localctx, 368, RULE_interface_type_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2063;
					namespace_name();
					State = 2064;
					Match(T__21);
					}
					} 
				}
				State = 2070;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			}
			State = 2071;
			interface_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInterface_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInterface_name(this);
		}
	}

	[RuleVersion(0)]
	public Interface_nameContext interface_name() {
		Interface_nameContext _localctx = new Interface_nameContext(Context, State);
		EnterRule(_localctx, 370, RULE_interface_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2073;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prog_type_nameContext prog_type_name() {
			return GetRuleContext<Prog_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_var_declsContext[] io_var_decls() {
			return GetRuleContexts<Io_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_var_declsContext io_var_decls(int i) {
			return GetRuleContext<Io_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_declsContext[] func_var_decls() {
			return GetRuleContexts<Func_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_var_declsContext func_var_decls(int i) {
			return GetRuleContext<Func_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Temp_var_declsContext[] temp_var_decls() {
			return GetRuleContexts<Temp_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Temp_var_declsContext temp_var_decls(int i) {
			return GetRuleContext<Temp_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_var_declsContext[] other_var_decls() {
			return GetRuleContexts<Other_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_var_declsContext other_var_decls(int i) {
			return GetRuleContext<Other_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loc_var_declsContext[] loc_var_decls() {
			return GetRuleContexts<Loc_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loc_var_declsContext loc_var_decls(int i) {
			return GetRuleContext<Loc_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_access_declsContext[] prog_access_decls() {
			return GetRuleContexts<Prog_access_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_access_declsContext prog_access_decls(int i) {
			return GetRuleContext<Prog_access_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_bodyContext fb_body() {
			return GetRuleContext<Fb_bodyContext>(0);
		}
		public Prog_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_decl(this);
		}
	}

	[RuleVersion(0)]
	public Prog_declContext prog_decl() {
		Prog_declContext _localctx = new Prog_declContext(Context, State);
		EnterRule(_localctx, 372, RULE_prog_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2075;
			Match(T__88);
			State = 2076;
			prog_type_name();
			State = 2085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 8589941633L) != 0)) {
				{
				State = 2083;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
				case 1:
					{
					State = 2077;
					io_var_decls();
					}
					break;
				case 2:
					{
					State = 2078;
					func_var_decls();
					}
					break;
				case 3:
					{
					State = 2079;
					temp_var_decls();
					}
					break;
				case 4:
					{
					State = 2080;
					other_var_decls();
					}
					break;
				case 5:
					{
					State = 2081;
					loc_var_decls();
					}
					break;
				case 6:
					{
					State = 2082;
					prog_access_decls();
					}
					break;
				}
				}
				State = 2087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2089;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144119586122399742L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 4703802003292160001L) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & 16811897L) != 0)) {
				{
				State = 2088;
				fb_body();
				}
			}

			State = 2091;
			Match(T__89);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Prog_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Prog_type_nameContext prog_type_name() {
		Prog_type_nameContext _localctx = new Prog_type_nameContext(Context, State);
		EnterRule(_localctx, 374, RULE_prog_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2093;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_type_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prog_type_nameContext prog_type_name() {
			return GetRuleContext<Prog_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Prog_type_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_type_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_type_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_type_access(this);
		}
	}

	[RuleVersion(0)]
	public Prog_type_accessContext prog_type_access() {
		Prog_type_accessContext _localctx = new Prog_type_accessContext(Context, State);
		EnterRule(_localctx, 376, RULE_prog_type_access);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2100;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2095;
					namespace_name();
					State = 2096;
					Match(T__21);
					}
					} 
				}
				State = 2102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			}
			State = 2103;
			prog_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_access_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prog_access_declContext[] prog_access_decl() {
			return GetRuleContexts<Prog_access_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_access_declContext prog_access_decl(int i) {
			return GetRuleContext<Prog_access_declContext>(i);
		}
		public Prog_access_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_access_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_access_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_access_decls(this);
		}
	}

	[RuleVersion(0)]
	public Prog_access_declsContext prog_access_decls() {
		Prog_access_declsContext _localctx = new Prog_access_declsContext(Context, State);
		EnterRule(_localctx, 378, RULE_prog_access_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2105;
			Match(T__90);
			State = 2111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 2106;
				prog_access_decl();
				State = 2107;
				Match(T__41);
				}
				}
				State = 2113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2114;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_access_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_nameContext access_name() {
			return GetRuleContext<Access_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbolic_variableContext symbolic_variable() {
			return GetRuleContext<Symbolic_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_accessContext data_type_access() {
			return GetRuleContext<Data_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multibit_part_accessContext multibit_part_access() {
			return GetRuleContext<Multibit_part_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Access_Direction() { return GetToken(PLCSTPARSERParser.Access_Direction, 0); }
		public Prog_access_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_access_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_access_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_access_decl(this);
		}
	}

	[RuleVersion(0)]
	public Prog_access_declContext prog_access_decl() {
		Prog_access_declContext _localctx = new Prog_access_declContext(Context, State);
		EnterRule(_localctx, 380, RULE_prog_access_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2116;
			access_name();
			State = 2117;
			Match(T__33);
			State = 2118;
			symbolic_variable();
			State = 2120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 2119;
				multibit_part_access();
				}
			}

			State = 2122;
			Match(T__33);
			State = 2123;
			data_type_access();
			State = 2125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Access_Direction) {
				{
				State = 2124;
				Match(Access_Direction);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SfcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sfc_networkContext[] sfc_network() {
			return GetRuleContexts<Sfc_networkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sfc_networkContext sfc_network(int i) {
			return GetRuleContext<Sfc_networkContext>(i);
		}
		public SfcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sfc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSfc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSfc(this);
		}
	}

	[RuleVersion(0)]
	public SfcContext sfc() {
		SfcContext _localctx = new SfcContext(Context, State);
		EnterRule(_localctx, 382, RULE_sfc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2127;
				sfc_network();
				}
				}
				State = 2130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__91 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sfc_networkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Initial_stepContext initial_step() {
			return GetRuleContext<Initial_stepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepContext[] step() {
			return GetRuleContexts<StepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepContext step(int i) {
			return GetRuleContext<StepContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionContext[] transition() {
			return GetRuleContexts<TransitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionContext transition(int i) {
			return GetRuleContext<TransitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public Sfc_networkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sfc_network; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSfc_network(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSfc_network(this);
		}
	}

	[RuleVersion(0)]
	public Sfc_networkContext sfc_network() {
		Sfc_networkContext _localctx = new Sfc_networkContext(Context, State);
		EnterRule(_localctx, 384, RULE_sfc_network);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2132;
			initial_step();
			State = 2138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 67L) != 0)) {
				{
				State = 2136;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__93:
					{
					State = 2133;
					step();
					}
					break;
				case T__94:
					{
					State = 2134;
					transition();
					}
					break;
				case T__99:
					{
					State = 2135;
					action();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initial_stepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Step_nameContext step_name() {
			return GetRuleContext<Step_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Action_associationContext[] action_association() {
			return GetRuleContexts<Action_associationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Action_associationContext action_association(int i) {
			return GetRuleContext<Action_associationContext>(i);
		}
		public Initial_stepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial_step; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInitial_step(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInitial_step(this);
		}
	}

	[RuleVersion(0)]
	public Initial_stepContext initial_step() {
		Initial_stepContext _localctx = new Initial_stepContext(Context, State);
		EnterRule(_localctx, 386, RULE_initial_step);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2141;
			Match(T__91);
			State = 2142;
			step_name();
			State = 2143;
			Match(T__33);
			State = 2149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 2144;
				action_association();
				State = 2145;
				Match(T__41);
				}
				}
				State = 2151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2152;
			Match(T__92);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Step_nameContext step_name() {
			return GetRuleContext<Step_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Action_associationContext[] action_association() {
			return GetRuleContexts<Action_associationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Action_associationContext action_association(int i) {
			return GetRuleContext<Action_associationContext>(i);
		}
		public StepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStep(this);
		}
	}

	[RuleVersion(0)]
	public StepContext step() {
		StepContext _localctx = new StepContext(Context, State);
		EnterRule(_localctx, 388, RULE_step);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2154;
			Match(T__93);
			State = 2155;
			step_name();
			State = 2156;
			Match(T__33);
			State = 2162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 2157;
				action_association();
				State = 2158;
				Match(T__41);
				}
				}
				State = 2164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2165;
			Match(T__92);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Step_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Step_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStep_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStep_name(this);
		}
	}

	[RuleVersion(0)]
	public Step_nameContext step_name() {
		Step_nameContext _localctx = new Step_nameContext(Context, State);
		EnterRule(_localctx, 390, RULE_step_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2167;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_associationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Action_nameContext action_name() {
			return GetRuleContext<Action_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Action_qualifierContext action_qualifier() {
			return GetRuleContext<Action_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indicator_nameContext[] indicator_name() {
			return GetRuleContexts<Indicator_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indicator_nameContext indicator_name(int i) {
			return GetRuleContext<Indicator_nameContext>(i);
		}
		public Action_associationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_association; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAction_association(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAction_association(this);
		}
	}

	[RuleVersion(0)]
	public Action_associationContext action_association() {
		Action_associationContext _localctx = new Action_associationContext(Context, State);
		EnterRule(_localctx, 392, RULE_action_association);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2169;
			action_name();
			State = 2170;
			Match(T__44);
			State = 2172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30744L) != 0)) {
				{
				State = 2171;
				action_qualifier();
				}
			}

			State = 2178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 2174;
				Match(T__47);
				State = 2175;
				indicator_name();
				}
				}
				State = 2180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2181;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Action_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAction_name(this);
		}
	}

	[RuleVersion(0)]
	public Action_nameContext action_name() {
		Action_nameContext _localctx = new Action_nameContext(Context, State);
		EnterRule(_localctx, 394, RULE_action_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2183;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Action_timeContext action_time() {
			return GetRuleContext<Action_timeContext>(0);
		}
		public Action_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAction_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAction_qualifier(this);
		}
	}

	[RuleVersion(0)]
	public Action_qualifierContext action_qualifier() {
		Action_qualifierContext _localctx = new Action_qualifierContext(Context, State);
		EnterRule(_localctx, 396, RULE_action_qualifier);
		try {
			State = 2201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2185;
				Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2186;
				Match(T__11);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2187;
				Match(T__12);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2188;
				Match(T__13);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 2197;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
				case 1:
					{
					State = 2189;
					Match(T__2);
					}
					break;
				case 2:
					{
					State = 2190;
					Match(T__3);
					}
					break;
				case 3:
					{
					State = 2191;
					Match(T__12);
					State = 2192;
					Match(T__3);
					}
					break;
				case 4:
					{
					State = 2193;
					Match(T__3);
					State = 2194;
					Match(T__12);
					}
					break;
				case 5:
					{
					State = 2195;
					Match(T__12);
					State = 2196;
					Match(T__2);
					}
					break;
				}
				State = 2199;
				Match(T__47);
				State = 2200;
				action_time();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_timeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DurationContext duration() {
			return GetRuleContext<DurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public Action_timeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_time; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAction_time(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAction_time(this);
		}
	}

	[RuleVersion(0)]
	public Action_timeContext action_time() {
		Action_timeContext _localctx = new Action_timeContext(Context, State);
		EnterRule(_localctx, 398, RULE_action_time);
		try {
			State = 2205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2203;
				duration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2204;
				variable_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indicator_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public Indicator_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indicator_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIndicator_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIndicator_name(this);
		}
	}

	[RuleVersion(0)]
	public Indicator_nameContext indicator_name() {
		Indicator_nameContext _localctx = new Indicator_nameContext(Context, State);
		EnterRule(_localctx, 400, RULE_indicator_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2207;
			variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StepsContext[] steps() {
			return GetRuleContexts<StepsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepsContext steps(int i) {
			return GetRuleContext<StepsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transition_condContext transition_cond() {
			return GetRuleContext<Transition_condContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transition_nameContext transition_name() {
			return GetRuleContext<Transition_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		public TransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitTransition(this);
		}
	}

	[RuleVersion(0)]
	public TransitionContext transition() {
		TransitionContext _localctx = new TransitionContext(Context, State);
		EnterRule(_localctx, 402, RULE_transition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2209;
			Match(T__94);
			State = 2211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				State = 2210;
				transition_name();
				}
			}

			State = 2219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__44) {
				{
				State = 2213;
				Match(T__44);
				State = 2214;
				Match(T__95);
				State = 2215;
				Match(T__33);
				State = 2216;
				Match(T__43);
				State = 2217;
				Match(Unsigned_int);
				State = 2218;
				Match(T__45);
				}
			}

			State = 2221;
			Match(T__96);
			State = 2222;
			steps();
			State = 2223;
			Match(T__97);
			State = 2224;
			steps();
			State = 2225;
			Match(T__33);
			State = 2226;
			transition_cond();
			State = 2227;
			Match(T__98);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transition_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Transition_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterTransition_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitTransition_name(this);
		}
	}

	[RuleVersion(0)]
	public Transition_nameContext transition_name() {
		Transition_nameContext _localctx = new Transition_nameContext(Context, State);
		EnterRule(_localctx, 404, RULE_transition_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2229;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Step_nameContext[] step_name() {
			return GetRuleContexts<Step_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Step_nameContext step_name(int i) {
			return GetRuleContext<Step_nameContext>(i);
		}
		public StepsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_steps; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSteps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSteps(this);
		}
	}

	[RuleVersion(0)]
	public StepsContext steps() {
		StepsContext _localctx = new StepsContext(Context, State);
		EnterRule(_localctx, 406, RULE_steps);
		int _la;
		try {
			State = 2242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2231;
				step_name();
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2232;
				Match(T__44);
				State = 2233;
				step_name();
				State = 2236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2234;
					Match(T__47);
					State = 2235;
					step_name();
					}
					}
					State = 2238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__47 );
				State = 2240;
				Match(T__45);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transition_condContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FBD_Network() { return GetToken(PLCSTPARSERParser.FBD_Network, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LD_Rung() { return GetToken(PLCSTPARSERParser.LD_Rung, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Il_simple_instContext il_simple_inst() {
			return GetRuleContext<Il_simple_instContext>(0);
		}
		public Transition_condContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition_cond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterTransition_cond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitTransition_cond(this);
		}
	}

	[RuleVersion(0)]
	public Transition_condContext transition_cond() {
		Transition_condContext _localctx = new Transition_condContext(Context, State);
		EnterRule(_localctx, 408, RULE_transition_cond);
		int _la;
		try {
			State = 2254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2244;
				Match(T__33);
				State = 2245;
				Match(T__43);
				State = 2246;
				expression();
				State = 2247;
				Match(T__41);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2249;
				Match(T__33);
				State = 2250;
				_la = TokenStream.LA(1);
				if ( !(_la==LD_Rung || _la==FBD_Network) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2251;
				Match(T__33);
				State = 2252;
				Match(T__43);
				State = 2253;
				il_simple_inst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Action_nameContext action_name() {
			return GetRuleContext<Action_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_bodyContext fb_body() {
			return GetRuleContext<Fb_bodyContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 410, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2256;
			Match(T__99);
			State = 2257;
			action_name();
			State = 2258;
			Match(T__33);
			State = 2259;
			fb_body();
			State = 2260;
			Match(T__100);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Config_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Config_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterConfig_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitConfig_name(this);
		}
	}

	[RuleVersion(0)]
	public Config_nameContext config_name() {
		Config_nameContext _localctx = new Config_nameContext(Context, State);
		EnterRule(_localctx, 412, RULE_config_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2262;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Resource_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterResource_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitResource_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Resource_type_nameContext resource_type_name() {
		Resource_type_nameContext _localctx = new Resource_type_nameContext(Context, State);
		EnterRule(_localctx, 414, RULE_resource_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2264;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Config_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Config_nameContext config_name() {
			return GetRuleContext<Config_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_resource_declContext single_resource_decl() {
			return GetRuleContext<Single_resource_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_declsContext global_var_decls() {
			return GetRuleContext<Global_var_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_declsContext access_decls() {
			return GetRuleContext<Access_declsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Config_initContext config_init() {
			return GetRuleContext<Config_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Resource_declContext[] resource_decl() {
			return GetRuleContexts<Resource_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Resource_declContext resource_decl(int i) {
			return GetRuleContext<Resource_declContext>(i);
		}
		public Config_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterConfig_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitConfig_decl(this);
		}
	}

	[RuleVersion(0)]
	public Config_declContext config_decl() {
		Config_declContext _localctx = new Config_declContext(Context, State);
		EnterRule(_localctx, 416, RULE_config_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2266;
			Match(T__101);
			State = 2267;
			config_name();
			State = 2269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__70) {
				{
				State = 2268;
				global_var_decls();
				}
			}

			State = 2277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__88:
			case T__106:
				{
				State = 2271;
				single_resource_decl();
				}
				break;
			case T__103:
				{
				State = 2273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2272;
					resource_decl();
					}
					}
					State = 2275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__103 );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__90) {
				{
				State = 2279;
				access_decls();
				}
			}

			State = 2283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__111) {
				{
				State = 2282;
				config_init();
				}
			}

			State = 2285;
			Match(T__102);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Resource_nameContext resource_name() {
			return GetRuleContext<Resource_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Resource_type_nameContext resource_type_name() {
			return GetRuleContext<Resource_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_resource_declContext single_resource_decl() {
			return GetRuleContext<Single_resource_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_declsContext global_var_decls() {
			return GetRuleContext<Global_var_declsContext>(0);
		}
		public Resource_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterResource_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitResource_decl(this);
		}
	}

	[RuleVersion(0)]
	public Resource_declContext resource_decl() {
		Resource_declContext _localctx = new Resource_declContext(Context, State);
		EnterRule(_localctx, 418, RULE_resource_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2287;
			Match(T__103);
			State = 2288;
			resource_name();
			State = 2289;
			Match(T__104);
			State = 2290;
			resource_type_name();
			State = 2292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__70) {
				{
				State = 2291;
				global_var_decls();
				}
			}

			State = 2294;
			single_resource_decl();
			State = 2295;
			Match(T__105);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_resource_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Task_configContext[] task_config() {
			return GetRuleContexts<Task_configContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Task_configContext task_config(int i) {
			return GetRuleContext<Task_configContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_configContext[] prog_config() {
			return GetRuleContexts<Prog_configContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_configContext prog_config(int i) {
			return GetRuleContext<Prog_configContext>(i);
		}
		public Single_resource_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_resource_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSingle_resource_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSingle_resource_decl(this);
		}
	}

	[RuleVersion(0)]
	public Single_resource_declContext single_resource_decl() {
		Single_resource_declContext _localctx = new Single_resource_declContext(Context, State);
		EnterRule(_localctx, 420, RULE_single_resource_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__106) {
				{
				{
				State = 2297;
				task_config();
				State = 2298;
				Match(T__41);
				}
				}
				State = 2304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2305;
				prog_config();
				State = 2306;
				Match(T__41);
				}
				}
				State = 2310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__88 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Resource_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterResource_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitResource_name(this);
		}
	}

	[RuleVersion(0)]
	public Resource_nameContext resource_name() {
		Resource_nameContext _localctx = new Resource_nameContext(Context, State);
		EnterRule(_localctx, 422, RULE_resource_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2312;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_declsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_declContext[] access_decl() {
			return GetRuleContexts<Access_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_declContext access_decl(int i) {
			return GetRuleContext<Access_declContext>(i);
		}
		public Access_declsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_decls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAccess_decls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAccess_decls(this);
		}
	}

	[RuleVersion(0)]
	public Access_declsContext access_decls() {
		Access_declsContext _localctx = new Access_declsContext(Context, State);
		EnterRule(_localctx, 424, RULE_access_decls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2314;
			Match(T__90);
			State = 2320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 2315;
				access_decl();
				State = 2316;
				Match(T__41);
				}
				}
				State = 2322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2323;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_nameContext access_name() {
			return GetRuleContext<Access_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_pathContext access_path() {
			return GetRuleContext<Access_pathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_accessContext data_type_access() {
			return GetRuleContext<Data_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Access_Direction() { return GetToken(PLCSTPARSERParser.Access_Direction, 0); }
		public Access_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAccess_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAccess_decl(this);
		}
	}

	[RuleVersion(0)]
	public Access_declContext access_decl() {
		Access_declContext _localctx = new Access_declContext(Context, State);
		EnterRule(_localctx, 426, RULE_access_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2325;
			access_name();
			State = 2326;
			Match(T__33);
			State = 2327;
			access_path();
			State = 2328;
			Match(T__33);
			State = 2329;
			data_type_access();
			State = 2331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Access_Direction) {
				{
				State = 2330;
				Match(Access_Direction);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_pathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Direct_variable() { return GetToken(PLCSTPARSERParser.Direct_variable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Resource_nameContext resource_name() {
			return GetRuleContext<Resource_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbolic_variableContext symbolic_variable() {
			return GetRuleContext<Symbolic_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_nameContext prog_name() {
			return GetRuleContext<Prog_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext[] fb_instance_name() {
			return GetRuleContexts<Fb_instance_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext fb_instance_name(int i) {
			return GetRuleContext<Fb_instance_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_instance_nameContext[] class_instance_name() {
			return GetRuleContexts<Class_instance_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_instance_nameContext class_instance_name(int i) {
			return GetRuleContext<Class_instance_nameContext>(i);
		}
		public Access_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAccess_path(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAccess_path(this);
		}
	}

	[RuleVersion(0)]
	public Access_pathContext access_path() {
		Access_pathContext _localctx = new Access_pathContext(Context, State);
		EnterRule(_localctx, 428, RULE_access_path);
		int _la;
		try {
			int _alt;
			State = 2361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
					{
					State = 2333;
					resource_name();
					State = 2334;
					Match(T__21);
					}
				}

				State = 2338;
				Match(Direct_variable);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2342;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
				case 1:
					{
					State = 2339;
					resource_name();
					State = 2340;
					Match(T__21);
					}
					break;
				}
				State = 2347;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
				case 1:
					{
					State = 2344;
					prog_name();
					State = 2345;
					Match(T__21);
					}
					break;
				}
				State = 2357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,245,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2351;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
						case 1:
							{
							State = 2349;
							fb_instance_name();
							}
							break;
						case 2:
							{
							State = 2350;
							class_instance_name();
							}
							break;
						}
						State = 2353;
						Match(T__21);
						}
						} 
					}
					State = 2359;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,245,Context);
				}
				State = 2360;
				symbolic_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_var_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_nameContext global_var_name() {
			return GetRuleContext<Global_var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Resource_nameContext resource_name() {
			return GetRuleContext<Resource_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_elem_nameContext struct_elem_name() {
			return GetRuleContext<Struct_elem_nameContext>(0);
		}
		public Global_var_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_var_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterGlobal_var_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitGlobal_var_access(this);
		}
	}

	[RuleVersion(0)]
	public Global_var_accessContext global_var_access() {
		Global_var_accessContext _localctx = new Global_var_accessContext(Context, State);
		EnterRule(_localctx, 430, RULE_global_var_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				{
				State = 2363;
				resource_name();
				State = 2364;
				Match(T__21);
				}
				break;
			}
			State = 2368;
			global_var_name();
			State = 2371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 2369;
				Match(T__21);
				State = 2370;
				struct_elem_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Access_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAccess_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAccess_name(this);
		}
	}

	[RuleVersion(0)]
	public Access_nameContext access_name() {
		Access_nameContext _localctx = new Access_nameContext(Context, State);
		EnterRule(_localctx, 432, RULE_access_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2373;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_output_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prog_nameContext prog_name() {
			return GetRuleContext<Prog_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Symbolic_variableContext symbolic_variable() {
			return GetRuleContext<Symbolic_variableContext>(0);
		}
		public Prog_output_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_output_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_output_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_output_access(this);
		}
	}

	[RuleVersion(0)]
	public Prog_output_accessContext prog_output_access() {
		Prog_output_accessContext _localctx = new Prog_output_accessContext(Context, State);
		EnterRule(_localctx, 434, RULE_prog_output_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2375;
			prog_name();
			State = 2376;
			Match(T__21);
			State = 2377;
			symbolic_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Prog_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_name(this);
		}
	}

	[RuleVersion(0)]
	public Prog_nameContext prog_name() {
		Prog_nameContext _localctx = new Prog_nameContext(Context, State);
		EnterRule(_localctx, 436, RULE_prog_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2379;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Task_configContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Task_nameContext task_name() {
			return GetRuleContext<Task_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Task_initContext task_init() {
			return GetRuleContext<Task_initContext>(0);
		}
		public Task_configContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_task_config; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterTask_config(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitTask_config(this);
		}
	}

	[RuleVersion(0)]
	public Task_configContext task_config() {
		Task_configContext _localctx = new Task_configContext(Context, State);
		EnterRule(_localctx, 438, RULE_task_config);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2381;
			Match(T__106);
			State = 2382;
			task_name();
			State = 2383;
			task_init();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Task_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Task_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_task_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterTask_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitTask_name(this);
		}
	}

	[RuleVersion(0)]
	public Task_nameContext task_name() {
		Task_nameContext _localctx = new Task_nameContext(Context, State);
		EnterRule(_localctx, 440, RULE_task_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2385;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Task_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_sourceContext[] data_source() {
			return GetRuleContexts<Data_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_sourceContext data_source(int i) {
			return GetRuleContext<Data_sourceContext>(i);
		}
		public Task_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_task_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterTask_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitTask_init(this);
		}
	}

	[RuleVersion(0)]
	public Task_initContext task_init() {
		Task_initContext _localctx = new Task_initContext(Context, State);
		EnterRule(_localctx, 442, RULE_task_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2387;
			Match(T__44);
			State = 2394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__107) {
				{
				State = 2388;
				Match(T__107);
				State = 2389;
				Match(T__33);
				State = 2390;
				Match(T__43);
				State = 2391;
				data_source();
				State = 2392;
				Match(T__47);
				}
			}

			State = 2402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__108) {
				{
				State = 2396;
				Match(T__108);
				State = 2397;
				Match(T__33);
				State = 2398;
				Match(T__43);
				State = 2399;
				data_source();
				State = 2400;
				Match(T__47);
				}
			}

			State = 2404;
			Match(T__95);
			State = 2405;
			Match(T__33);
			State = 2406;
			Match(T__43);
			State = 2407;
			Match(Unsigned_int);
			State = 2408;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_accessContext global_var_access() {
			return GetRuleContext<Global_var_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_output_accessContext prog_output_access() {
			return GetRuleContext<Prog_output_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Direct_variable() { return GetToken(PLCSTPARSERParser.Direct_variable, 0); }
		public Data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterData_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitData_source(this);
		}
	}

	[RuleVersion(0)]
	public Data_sourceContext data_source() {
		Data_sourceContext _localctx = new Data_sourceContext(Context, State);
		EnterRule(_localctx, 444, RULE_data_source);
		try {
			State = 2414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2410;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2411;
				global_var_access();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2412;
				prog_output_access();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2413;
				Match(Direct_variable);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_configContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prog_nameContext prog_name() {
			return GetRuleContext<Prog_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_type_accessContext prog_type_access() {
			return GetRuleContext<Prog_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Task_nameContext task_name() {
			return GetRuleContext<Task_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_conf_elemsContext prog_conf_elems() {
			return GetRuleContext<Prog_conf_elemsContext>(0);
		}
		public Prog_configContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_config; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_config(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_config(this);
		}
	}

	[RuleVersion(0)]
	public Prog_configContext prog_config() {
		Prog_configContext _localctx = new Prog_configContext(Context, State);
		EnterRule(_localctx, 446, RULE_prog_config);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2416;
			Match(T__88);
			State = 2418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__58 || _la==T__59) {
				{
				State = 2417;
				_la = TokenStream.LA(1);
				if ( !(_la==T__58 || _la==T__59) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2420;
			prog_name();
			State = 2423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__109) {
				{
				State = 2421;
				Match(T__109);
				State = 2422;
				task_name();
				}
			}

			State = 2425;
			Match(T__33);
			State = 2426;
			prog_type_access();
			State = 2431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__44) {
				{
				State = 2427;
				Match(T__44);
				State = 2428;
				prog_conf_elems();
				State = 2429;
				Match(T__45);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_conf_elemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prog_conf_elemContext[] prog_conf_elem() {
			return GetRuleContexts<Prog_conf_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_conf_elemContext prog_conf_elem(int i) {
			return GetRuleContext<Prog_conf_elemContext>(i);
		}
		public Prog_conf_elemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_conf_elems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_conf_elems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_conf_elems(this);
		}
	}

	[RuleVersion(0)]
	public Prog_conf_elemsContext prog_conf_elems() {
		Prog_conf_elemsContext _localctx = new Prog_conf_elemsContext(Context, State);
		EnterRule(_localctx, 448, RULE_prog_conf_elems);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2433;
			prog_conf_elem();
			State = 2438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 2434;
				Match(T__47);
				State = 2435;
				prog_conf_elem();
				}
				}
				State = 2440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_conf_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fb_taskContext fb_task() {
			return GetRuleContext<Fb_taskContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_cnxnContext prog_cnxn() {
			return GetRuleContext<Prog_cnxnContext>(0);
		}
		public Prog_conf_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_conf_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_conf_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_conf_elem(this);
		}
	}

	[RuleVersion(0)]
	public Prog_conf_elemContext prog_conf_elem() {
		Prog_conf_elemContext _localctx = new Prog_conf_elemContext(Context, State);
		EnterRule(_localctx, 450, RULE_prog_conf_elem);
		try {
			State = 2443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2441;
				fb_task();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2442;
				prog_cnxn();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_taskContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext fb_instance_name() {
			return GetRuleContext<Fb_instance_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Task_nameContext task_name() {
			return GetRuleContext<Task_nameContext>(0);
		}
		public Fb_taskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_task; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_task(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_task(this);
		}
	}

	[RuleVersion(0)]
	public Fb_taskContext fb_task() {
		Fb_taskContext _localctx = new Fb_taskContext(Context, State);
		EnterRule(_localctx, 452, RULE_fb_task);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2445;
			fb_instance_name();
			State = 2446;
			Match(T__109);
			State = 2447;
			task_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_cnxnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Symbolic_variableContext symbolic_variable() {
			return GetRuleContext<Symbolic_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_data_sourceContext prog_data_source() {
			return GetRuleContext<Prog_data_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_sinkContext data_sink() {
			return GetRuleContext<Data_sinkContext>(0);
		}
		public Prog_cnxnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_cnxn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_cnxn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_cnxn(this);
		}
	}

	[RuleVersion(0)]
	public Prog_cnxnContext prog_cnxn() {
		Prog_cnxnContext _localctx = new Prog_cnxnContext(Context, State);
		EnterRule(_localctx, 454, RULE_prog_cnxn);
		try {
			State = 2458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2449;
				symbolic_variable();
				State = 2450;
				Match(T__33);
				State = 2451;
				Match(T__43);
				State = 2452;
				prog_data_source();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2454;
				symbolic_variable();
				State = 2455;
				Match(T__110);
				State = 2456;
				data_sink();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_data_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_valueContext enum_value() {
			return GetRuleContext<Enum_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_accessContext global_var_access() {
			return GetRuleContext<Global_var_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Direct_variable() { return GetToken(PLCSTPARSERParser.Direct_variable, 0); }
		public Prog_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_data_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterProg_data_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitProg_data_source(this);
		}
	}

	[RuleVersion(0)]
	public Prog_data_sourceContext prog_data_source() {
		Prog_data_sourceContext _localctx = new Prog_data_sourceContext(Context, State);
		EnterRule(_localctx, 456, RULE_prog_data_source);
		try {
			State = 2464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2460;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2461;
				enum_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2462;
				global_var_access();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2463;
				Match(Direct_variable);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_sinkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_accessContext global_var_access() {
			return GetRuleContext<Global_var_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Direct_variable() { return GetToken(PLCSTPARSERParser.Direct_variable, 0); }
		public Data_sinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_sink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterData_sink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitData_sink(this);
		}
	}

	[RuleVersion(0)]
	public Data_sinkContext data_sink() {
		Data_sinkContext _localctx = new Data_sinkContext(Context, State);
		EnterRule(_localctx, 458, RULE_data_sink);
		try {
			State = 2468;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2466;
				global_var_access();
				}
				break;
			case Direct_variable:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2467;
				Match(Direct_variable);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Config_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Config_inst_initContext[] config_inst_init() {
			return GetRuleContexts<Config_inst_initContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Config_inst_initContext config_inst_init(int i) {
			return GetRuleContext<Config_inst_initContext>(i);
		}
		public Config_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterConfig_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitConfig_init(this);
		}
	}

	[RuleVersion(0)]
	public Config_initContext config_init() {
		Config_initContext _localctx = new Config_initContext(Context, State);
		EnterRule(_localctx, 460, RULE_config_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2470;
			Match(T__111);
			State = 2476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==Identifier) {
				{
				{
				State = 2471;
				config_inst_init();
				State = 2472;
				Match(T__41);
				}
				}
				State = 2478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2479;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Config_inst_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Resource_nameContext resource_name() {
			return GetRuleContext<Resource_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prog_nameContext prog_name() {
			return GetRuleContext<Prog_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loc_var_spec_initContext loc_var_spec_init() {
			return GetRuleContext<Loc_var_spec_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_initContext struct_init() {
			return GetRuleContext<Struct_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext[] fb_instance_name() {
			return GetRuleContexts<Fb_instance_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext fb_instance_name(int i) {
			return GetRuleContext<Fb_instance_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_instance_nameContext[] class_instance_name() {
			return GetRuleContexts<Class_instance_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_instance_nameContext class_instance_name(int i) {
			return GetRuleContext<Class_instance_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Located_atContext located_at() {
			return GetRuleContext<Located_atContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_type_accessContext fb_type_access() {
			return GetRuleContext<Fb_type_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_type_accessContext class_type_access() {
			return GetRuleContext<Class_type_accessContext>(0);
		}
		public Config_inst_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config_inst_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterConfig_inst_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitConfig_inst_init(this);
		}
	}

	[RuleVersion(0)]
	public Config_inst_initContext config_inst_init() {
		Config_inst_initContext _localctx = new Config_inst_initContext(Context, State);
		EnterRule(_localctx, 462, RULE_config_inst_init);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2481;
			resource_name();
			State = 2482;
			Match(T__21);
			State = 2483;
			prog_name();
			State = 2484;
			Match(T__21);
			State = 2493;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2487;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
					case 1:
						{
						State = 2485;
						fb_instance_name();
						}
						break;
					case 2:
						{
						State = 2486;
						class_instance_name();
						}
						break;
					}
					State = 2489;
					Match(T__21);
					}
					} 
				}
				State = 2495;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
			}
			State = 2517;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				{
				State = 2496;
				variable_name();
				State = 2498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__71) {
					{
					State = 2497;
					located_at();
					}
				}

				State = 2500;
				Match(T__33);
				State = 2501;
				loc_var_spec_init();
				}
				break;
			case 2:
				{
				State = 2511;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
				case 1:
					{
					{
					State = 2503;
					fb_instance_name();
					State = 2504;
					Match(T__33);
					State = 2505;
					fb_type_access();
					}
					}
					break;
				case 2:
					{
					{
					State = 2507;
					class_instance_name();
					State = 2508;
					Match(T__33);
					State = 2509;
					class_type_access();
					}
					}
					break;
				}
				State = 2513;
				Match(T__33);
				State = 2514;
				Match(T__43);
				State = 2515;
				struct_init();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_h_nameContext namespace_h_name() {
			return GetRuleContext<Namespace_h_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_elementsContext namespace_elements() {
			return GetRuleContext<Namespace_elementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		public Namespace_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterNamespace_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitNamespace_decl(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declContext namespace_decl() {
		Namespace_declContext _localctx = new Namespace_declContext(Context, State);
		EnterRule(_localctx, 464, RULE_namespace_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2519;
			Match(T__112);
			State = 2521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__113) {
				{
				State = 2520;
				Match(T__113);
				}
			}

			State = 2523;
			namespace_h_name();
			State = 2527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__115) {
				{
				{
				State = 2524;
				using_directive();
				}
				}
				State = 2529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2530;
			namespace_elements();
			State = 2531;
			Match(T__114);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_elementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_declContext[] data_type_decl() {
			return GetRuleContexts<Data_type_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_declContext data_type_decl(int i) {
			return GetRuleContext<Data_type_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext[] func_decl() {
			return GetRuleContexts<Func_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext func_decl(int i) {
			return GetRuleContext<Func_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_declContext[] fb_decl() {
			return GetRuleContexts<Fb_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_declContext fb_decl(int i) {
			return GetRuleContext<Fb_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declContext[] class_decl() {
			return GetRuleContexts<Class_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declContext class_decl(int i) {
			return GetRuleContext<Class_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_declContext[] interface_decl() {
			return GetRuleContexts<Interface_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_declContext interface_decl(int i) {
			return GetRuleContext<Interface_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_declContext[] namespace_decl() {
			return GetRuleContexts<Namespace_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_declContext namespace_decl(int i) {
			return GetRuleContext<Namespace_declContext>(i);
		}
		public Namespace_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_elements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterNamespace_elements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitNamespace_elements(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_elementsContext namespace_elements() {
		Namespace_elementsContext _localctx = new Namespace_elementsContext(Context, State);
		EnterRule(_localctx, 466, RULE_namespace_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 2539;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__40:
					{
					State = 2533;
					data_type_decl();
					}
					break;
				case T__73:
					{
					State = 2534;
					func_decl();
					}
					break;
				case T__75:
					{
					State = 2535;
					fb_decl();
					}
					break;
				case T__84:
					{
					State = 2536;
					class_decl();
					}
					break;
				case T__86:
					{
					State = 2537;
					interface_decl();
					}
					break;
				case T__112:
					{
					State = 2538;
					namespace_decl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__40 || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 549755824133L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_h_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext[] namespace_name() {
			return GetRuleContexts<Namespace_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name(int i) {
			return GetRuleContext<Namespace_nameContext>(i);
		}
		public Namespace_h_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_h_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterNamespace_h_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitNamespace_h_name(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_h_nameContext namespace_h_name() {
		Namespace_h_nameContext _localctx = new Namespace_h_nameContext(Context, State);
		EnterRule(_localctx, 468, RULE_namespace_h_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2543;
			namespace_name();
			State = 2548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__21) {
				{
				{
				State = 2544;
				Match(T__21);
				State = 2545;
				namespace_name();
				}
				}
				State = 2550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Namespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterNamespace_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitNamespace_name(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_nameContext namespace_name() {
		Namespace_nameContext _localctx = new Namespace_nameContext(Context, State);
		EnterRule(_localctx, 470, RULE_namespace_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2551;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_h_nameContext[] namespace_h_name() {
			return GetRuleContexts<Namespace_h_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_h_nameContext namespace_h_name(int i) {
			return GetRuleContext<Namespace_h_nameContext>(i);
		}
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterUsing_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitUsing_directive(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(Context, State);
		EnterRule(_localctx, 472, RULE_using_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2553;
			Match(T__115);
			State = 2554;
			namespace_h_name();
			State = 2559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 2555;
				Match(T__47);
				State = 2556;
				namespace_h_name();
				}
				}
				State = 2561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2562;
			Match(T__41);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pou_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_declsContext[] global_var_decls() {
			return GetRuleContexts<Global_var_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_var_declsContext global_var_decls(int i) {
			return GetRuleContext<Global_var_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_declContext[] data_type_decl() {
			return GetRuleContexts<Data_type_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_type_declContext data_type_decl(int i) {
			return GetRuleContext<Data_type_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_declsContext[] access_decls() {
			return GetRuleContexts<Access_declsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_declsContext access_decls(int i) {
			return GetRuleContext<Access_declsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext[] func_decl() {
			return GetRuleContexts<Func_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_declContext func_decl(int i) {
			return GetRuleContext<Func_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_declContext[] fb_decl() {
			return GetRuleContexts<Fb_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_declContext fb_decl(int i) {
			return GetRuleContext<Fb_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declContext[] class_decl() {
			return GetRuleContexts<Class_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declContext class_decl(int i) {
			return GetRuleContext<Class_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_declContext[] interface_decl() {
			return GetRuleContexts<Interface_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_declContext interface_decl(int i) {
			return GetRuleContext<Interface_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_declContext[] namespace_decl() {
			return GetRuleContexts<Namespace_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_declContext namespace_decl(int i) {
			return GetRuleContext<Namespace_declContext>(i);
		}
		public Pou_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pou_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterPou_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitPou_decl(this);
		}
	}

	[RuleVersion(0)]
	public Pou_declContext pou_decl() {
		Pou_declContext _localctx = new Pou_declContext(Context, State);
		EnterRule(_localctx, 474, RULE_pou_decl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__115) {
				{
				{
				State = 2564;
				using_directive();
				}
				}
				State = 2569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2578;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2578;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__70:
						{
						State = 2570;
						global_var_decls();
						}
						break;
					case T__40:
						{
						State = 2571;
						data_type_decl();
						}
						break;
					case T__90:
						{
						State = 2572;
						access_decls();
						}
						break;
					case T__73:
						{
						State = 2573;
						func_decl();
						}
						break;
					case T__75:
						{
						State = 2574;
						fb_decl();
						}
						break;
					case T__84:
						{
						State = 2575;
						class_decl();
						}
						break;
					case T__86:
						{
						State = 2576;
						interface_decl();
						}
						break;
					case T__112:
						{
						State = 2577;
						namespace_decl();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2580;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,274,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_instructionContext[] il_instruction() {
			return GetRuleContexts<Il_instructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_instructionContext il_instruction(int i) {
			return GetRuleContext<Il_instructionContext>(i);
		}
		public Instruction_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInstruction_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInstruction_list(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_listContext instruction_list() {
		Instruction_listContext _localctx = new Instruction_listContext(Context, State);
		EnterRule(_localctx, 476, RULE_instruction_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2582;
				il_instruction();
				}
				}
				State = 2585;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & 578589406814797825L) != 0) || _la==EOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_instructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_labelContext il_label() {
			return GetRuleContext<Il_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_simple_operationContext il_simple_operation() {
			return GetRuleContext<Il_simple_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_exprContext il_expr() {
			return GetRuleContext<Il_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_jump_operationContext il_jump_operation() {
			return GetRuleContext<Il_jump_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_invocationContext il_invocation() {
			return GetRuleContext<Il_invocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_formal_func_callContext il_formal_func_call() {
			return GetRuleContext<Il_formal_func_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IL_Return_Operator() { return GetToken(PLCSTPARSERParser.IL_Return_Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(PLCSTPARSERParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(PLCSTPARSERParser.EOL, i);
		}
		public Il_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Il_instructionContext il_instruction() {
		Il_instructionContext _localctx = new Il_instructionContext(Context, State);
		EnterRule(_localctx, 478, RULE_il_instruction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				{
				State = 2587;
				il_label();
				State = 2588;
				Match(T__33);
				}
				break;
			}
			State = 2598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 2592;
				il_simple_operation();
				}
				break;
			case 2:
				{
				State = 2593;
				il_expr();
				}
				break;
			case 3:
				{
				State = 2594;
				il_jump_operation();
				}
				break;
			case 4:
				{
				State = 2595;
				il_invocation();
				}
				break;
			case 5:
				{
				State = 2596;
				il_formal_func_call();
				}
				break;
			case 6:
				{
				State = 2597;
				Match(IL_Return_Operator);
				}
				break;
			}
			State = 2601;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2600;
					Match(EOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2603;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,278,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_simple_instContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_simple_operationContext il_simple_operation() {
			return GetRuleContext<Il_simple_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_exprContext il_expr() {
			return GetRuleContext<Il_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_formal_func_callContext il_formal_func_call() {
			return GetRuleContext<Il_formal_func_callContext>(0);
		}
		public Il_simple_instContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_simple_inst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_simple_inst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_simple_inst(this);
		}
	}

	[RuleVersion(0)]
	public Il_simple_instContext il_simple_inst() {
		Il_simple_instContext _localctx = new Il_simple_instContext(Context, State);
		EnterRule(_localctx, 480, RULE_il_simple_inst);
		try {
			State = 2608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2605;
				il_simple_operation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2606;
				il_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2607;
				il_formal_func_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Il_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_label(this);
		}
	}

	[RuleVersion(0)]
	public Il_labelContext il_label() {
		Il_labelContext _localctx = new Il_labelContext(Context, State);
		EnterRule(_localctx, 482, RULE_il_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2610;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_simple_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_simple_operatorContext il_simple_operator() {
			return GetRuleContext<Il_simple_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_operandContext il_operand() {
			return GetRuleContext<Il_operandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_accessContext func_access() {
			return GetRuleContext<Func_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_operand_listContext il_operand_list() {
			return GetRuleContext<Il_operand_listContext>(0);
		}
		public Il_simple_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_simple_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_simple_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_simple_operation(this);
		}
	}

	[RuleVersion(0)]
	public Il_simple_operationContext il_simple_operation() {
		Il_simple_operationContext _localctx = new Il_simple_operationContext(Context, State);
		EnterRule(_localctx, 484, RULE_il_simple_operation);
		int _la;
		try {
			State = 2620;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__118:
			case IL_Expr_Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2612;
				il_simple_operator();
				State = 2614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144115231087886334L) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 2390756847L) != 0)) {
					{
					State = 2613;
					il_operand();
					}
				}

				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case Std_Func_Name:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2616;
				func_access();
				State = 2618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144115231087886334L) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 2390756847L) != 0)) {
					{
					State = 2617;
					il_operand_list();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IL_Expr_Operator() { return GetToken(PLCSTPARSERParser.IL_Expr_Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Il_operandContext il_operand() {
			return GetRuleContext<Il_operandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(PLCSTPARSERParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(PLCSTPARSERParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_simple_inst_listContext il_simple_inst_list() {
			return GetRuleContext<Il_simple_inst_listContext>(0);
		}
		public Il_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_expr(this);
		}
	}

	[RuleVersion(0)]
	public Il_exprContext il_expr() {
		Il_exprContext _localctx = new Il_exprContext(Context, State);
		EnterRule(_localctx, 486, RULE_il_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2622;
			Match(IL_Expr_Operator);
			State = 2623;
			Match(T__44);
			State = 2625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144115231087886334L) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 2390756847L) != 0)) {
				{
				State = 2624;
				il_operand();
				}
			}

			State = 2628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2627;
				Match(EOL);
				}
				}
				State = 2630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EOL );
			State = 2633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & 576619081977823233L) != 0)) {
				{
				State = 2632;
				il_simple_inst_list();
				}
			}

			State = 2635;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_jump_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IL_Jump_Operator() { return GetToken(PLCSTPARSERParser.IL_Jump_Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Il_labelContext il_label() {
			return GetRuleContext<Il_labelContext>(0);
		}
		public Il_jump_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_jump_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_jump_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_jump_operation(this);
		}
	}

	[RuleVersion(0)]
	public Il_jump_operationContext il_jump_operation() {
		Il_jump_operationContext _localctx = new Il_jump_operationContext(Context, State);
		EnterRule(_localctx, 488, RULE_il_jump_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2637;
			Match(IL_Jump_Operator);
			State = 2638;
			il_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IL_Call_Operator() { return GetToken(PLCSTPARSERParser.IL_Call_Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Derived_func_nameContext derived_func_name() {
			return GetRuleContext<Derived_func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext[] fb_instance_name() {
			return GetRuleContexts<Fb_instance_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext fb_instance_name(int i) {
			return GetRuleContext<Fb_instance_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_nameContext method_name() {
			return GetRuleContext<Method_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_operand_listContext il_operand_list() {
			return GetRuleContext<Il_operand_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(PLCSTPARSERParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(PLCSTPARSERParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_param_listContext il_param_list() {
			return GetRuleContext<Il_param_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_instance_nameContext[] class_instance_name() {
			return GetRuleContexts<Class_instance_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_instance_nameContext class_instance_name(int i) {
			return GetRuleContext<Class_instance_nameContext>(i);
		}
		public Il_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_invocation(this);
		}
	}

	[RuleVersion(0)]
	public Il_invocationContext il_invocation() {
		Il_invocationContext _localctx = new Il_invocationContext(Context, State);
		EnterRule(_localctx, 490, RULE_il_invocation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2640;
			Match(IL_Call_Operator);
			State = 2684;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__56:
			case T__116:
			case Std_Func_Name:
			case Identifier:
				{
				{
				State = 2659;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
				case 1:
					{
					State = 2641;
					fb_instance_name();
					}
					break;
				case 2:
					{
					State = 2642;
					func_name();
					}
					break;
				case 3:
					{
					State = 2643;
					method_name();
					}
					break;
				case 4:
					{
					State = 2644;
					Match(T__116);
					}
					break;
				case 5:
					{
					{
					{
					State = 2645;
					Match(T__56);
					State = 2646;
					Match(T__21);
					State = 2655;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,287,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2649;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
							case 1:
								{
								State = 2647;
								fb_instance_name();
								}
								break;
							case 2:
								{
								State = 2648;
								class_instance_name();
								}
								break;
							}
							State = 2651;
							Match(T__21);
							}
							} 
						}
						State = 2657;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,287,Context);
					}
					}
					State = 2658;
					method_name();
					}
					}
					break;
				}
				State = 2676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 2661;
					Match(T__44);
					State = 2673;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case EOL:
						{
						{
						State = 2663;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 2662;
							Match(EOL);
							}
							}
							State = 2665;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==EOL );
						State = 2668;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==T__119 || _la==Identifier) {
							{
							State = 2667;
							il_param_list();
							}
						}

						}
						}
						break;
					case T__0:
					case T__1:
					case T__2:
					case T__3:
					case T__4:
					case T__5:
					case T__6:
					case T__7:
					case T__8:
					case T__9:
					case T__10:
					case T__11:
					case T__12:
					case T__13:
					case T__15:
					case T__16:
					case T__17:
					case T__19:
					case T__20:
					case T__22:
					case T__23:
					case T__24:
					case T__32:
					case T__34:
					case T__45:
					case T__56:
					case Unsigned_int:
					case S_byte_char:
					case D_byte_char:
					case Direct_variable:
					case Sign_Int_Type_Name:
					case Unsign_Int_Type_Name:
					case Real_Type_Name:
					case Time_Type_Name:
					case Tod_Type_Name:
					case Multibits_Type_Name:
					case Date_Type_Name:
					case DT_Type_Name:
					case Bool_Type_Name:
					case Identifier:
					case Bit:
						{
						State = 2671;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144115231087886334L) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 2390756847L) != 0)) {
							{
							State = 2670;
							il_operand_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2675;
					Match(T__45);
					}
				}

				}
				}
				break;
			case T__117:
				{
				State = 2678;
				Match(T__117);
				State = 2679;
				Match(T__21);
				State = 2680;
				derived_func_name();
				State = 2681;
				Match(T__44);
				State = 2682;
				Match(T__45);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_formal_func_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_accessContext func_access() {
			return GetRuleContext<Func_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(PLCSTPARSERParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(PLCSTPARSERParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_param_listContext il_param_list() {
			return GetRuleContext<Il_param_listContext>(0);
		}
		public Il_formal_func_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_formal_func_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_formal_func_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_formal_func_call(this);
		}
	}

	[RuleVersion(0)]
	public Il_formal_func_callContext il_formal_func_call() {
		Il_formal_func_callContext _localctx = new Il_formal_func_callContext(Context, State);
		EnterRule(_localctx, 492, RULE_il_formal_func_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2686;
			func_access();
			State = 2687;
			Match(T__44);
			State = 2689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2688;
				Match(EOL);
				}
				}
				State = 2691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EOL );
			State = 2694;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || _la==T__119 || _la==Identifier) {
				{
				State = 2693;
				il_param_list();
				}
			}

			State = 2696;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_operandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_valueContext enum_value() {
			return GetRuleContext<Enum_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_accessContext variable_access() {
			return GetRuleContext<Variable_accessContext>(0);
		}
		public Il_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_operand(this);
		}
	}

	[RuleVersion(0)]
	public Il_operandContext il_operand() {
		Il_operandContext _localctx = new Il_operandContext(Context, State);
		EnterRule(_localctx, 494, RULE_il_operand);
		try {
			State = 2701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2698;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2699;
				enum_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2700;
				variable_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_operand_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_operandContext[] il_operand() {
			return GetRuleContexts<Il_operandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_operandContext il_operand(int i) {
			return GetRuleContext<Il_operandContext>(i);
		}
		public Il_operand_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_operand_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_operand_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_operand_list(this);
		}
	}

	[RuleVersion(0)]
	public Il_operand_listContext il_operand_list() {
		Il_operand_listContext _localctx = new Il_operand_listContext(Context, State);
		EnterRule(_localctx, 496, RULE_il_operand_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2703;
			il_operand();
			State = 2708;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 2704;
				Match(T__47);
				State = 2705;
				il_operand();
				}
				}
				State = 2710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_simple_inst_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_simple_instructionContext[] il_simple_instruction() {
			return GetRuleContexts<Il_simple_instructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_simple_instructionContext il_simple_instruction(int i) {
			return GetRuleContext<Il_simple_instructionContext>(i);
		}
		public Il_simple_inst_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_simple_inst_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_simple_inst_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_simple_inst_list(this);
		}
	}

	[RuleVersion(0)]
	public Il_simple_inst_listContext il_simple_inst_list() {
		Il_simple_inst_listContext _localctx = new Il_simple_inst_listContext(Context, State);
		EnterRule(_localctx, 498, RULE_il_simple_inst_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2711;
				il_simple_instruction();
				}
				}
				State = 2714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 32766L) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & 576619081977823233L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_simple_instructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_simple_operationContext il_simple_operation() {
			return GetRuleContext<Il_simple_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_exprContext il_expr() {
			return GetRuleContext<Il_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_formal_func_callContext il_formal_func_call() {
			return GetRuleContext<Il_formal_func_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(PLCSTPARSERParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(PLCSTPARSERParser.EOL, i);
		}
		public Il_simple_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_simple_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_simple_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_simple_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Il_simple_instructionContext il_simple_instruction() {
		Il_simple_instructionContext _localctx = new Il_simple_instructionContext(Context, State);
		EnterRule(_localctx, 500, RULE_il_simple_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2719;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				{
				State = 2716;
				il_simple_operation();
				}
				break;
			case 2:
				{
				State = 2717;
				il_expr();
				}
				break;
			case 3:
				{
				State = 2718;
				il_formal_func_call();
				}
				break;
			}
			State = 2722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2721;
				Match(EOL);
				}
				}
				State = 2724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_param_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_param_last_instContext il_param_last_inst() {
			return GetRuleContext<Il_param_last_instContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_param_instContext[] il_param_inst() {
			return GetRuleContexts<Il_param_instContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_param_instContext il_param_inst(int i) {
			return GetRuleContext<Il_param_instContext>(i);
		}
		public Il_param_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_param_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_param_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_param_list(this);
		}
	}

	[RuleVersion(0)]
	public Il_param_listContext il_param_list() {
		Il_param_listContext _localctx = new Il_param_listContext(Context, State);
		EnterRule(_localctx, 502, RULE_il_param_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2729;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2726;
					il_param_inst();
					}
					} 
				}
				State = 2731;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			}
			State = 2732;
			il_param_last_inst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_param_instContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_param_assignContext il_param_assign() {
			return GetRuleContext<Il_param_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_param_out_assignContext il_param_out_assign() {
			return GetRuleContext<Il_param_out_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(PLCSTPARSERParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(PLCSTPARSERParser.EOL, i);
		}
		public Il_param_instContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_param_inst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_param_inst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_param_inst(this);
		}
	}

	[RuleVersion(0)]
	public Il_param_instContext il_param_inst() {
		Il_param_instContext _localctx = new Il_param_instContext(Context, State);
		EnterRule(_localctx, 504, RULE_il_param_inst);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				State = 2734;
				il_param_assign();
				}
				break;
			case 2:
				{
				State = 2735;
				il_param_out_assign();
				}
				break;
			}
			State = 2738;
			Match(T__47);
			State = 2740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2739;
				Match(EOL);
				}
				}
				State = 2742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_param_last_instContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_param_assignContext il_param_assign() {
			return GetRuleContext<Il_param_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_param_out_assignContext il_param_out_assign() {
			return GetRuleContext<Il_param_out_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(PLCSTPARSERParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(PLCSTPARSERParser.EOL, i);
		}
		public Il_param_last_instContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_param_last_inst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_param_last_inst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_param_last_inst(this);
		}
	}

	[RuleVersion(0)]
	public Il_param_last_instContext il_param_last_inst() {
		Il_param_last_instContext _localctx = new Il_param_last_instContext(Context, State);
		EnterRule(_localctx, 506, RULE_il_param_last_inst);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2746;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				{
				State = 2744;
				il_param_assign();
				}
				break;
			case 2:
				{
				State = 2745;
				il_param_out_assign();
				}
				break;
			}
			State = 2749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2748;
				Match(EOL);
				}
				}
				State = 2751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_param_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_assignmentContext il_assignment() {
			return GetRuleContext<Il_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_operandContext il_operand() {
			return GetRuleContext<Il_operandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Il_simple_inst_listContext il_simple_inst_list() {
			return GetRuleContext<Il_simple_inst_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(PLCSTPARSERParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(PLCSTPARSERParser.EOL, i);
		}
		public Il_param_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_param_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_param_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_param_assign(this);
		}
	}

	[RuleVersion(0)]
	public Il_param_assignContext il_param_assign() {
		Il_param_assignContext _localctx = new Il_param_assignContext(Context, State);
		EnterRule(_localctx, 508, RULE_il_param_assign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2753;
			il_assignment();
			State = 2764;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__15:
			case T__16:
			case T__17:
			case T__19:
			case T__20:
			case T__22:
			case T__23:
			case T__24:
			case T__32:
			case T__34:
			case T__56:
			case Unsigned_int:
			case S_byte_char:
			case D_byte_char:
			case Direct_variable:
			case Sign_Int_Type_Name:
			case Unsign_Int_Type_Name:
			case Real_Type_Name:
			case Time_Type_Name:
			case Tod_Type_Name:
			case Multibits_Type_Name:
			case Date_Type_Name:
			case DT_Type_Name:
			case Bool_Type_Name:
			case Identifier:
			case Bit:
				{
				State = 2754;
				il_operand();
				}
				break;
			case T__44:
				{
				{
				State = 2755;
				Match(T__44);
				State = 2757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2756;
					Match(EOL);
					}
					}
					State = 2759;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL );
				State = 2761;
				il_simple_inst_list();
				State = 2762;
				Match(T__45);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_param_out_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Il_assign_out_operatorContext il_assign_out_operator() {
			return GetRuleContext<Il_assign_out_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_accessContext variable_access() {
			return GetRuleContext<Variable_accessContext>(0);
		}
		public Il_param_out_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_param_out_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_param_out_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_param_out_assign(this);
		}
	}

	[RuleVersion(0)]
	public Il_param_out_assignContext il_param_out_assign() {
		Il_param_out_assignContext _localctx = new Il_param_out_assignContext(Context, State);
		EnterRule(_localctx, 510, RULE_il_param_out_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2766;
			il_assign_out_operator();
			State = 2767;
			variable_access();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_simple_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IL_Expr_Operator() { return GetToken(PLCSTPARSERParser.IL_Expr_Operator, 0); }
		public Il_simple_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_simple_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_simple_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_simple_operator(this);
		}
	}

	[RuleVersion(0)]
	public Il_simple_operatorContext il_simple_operator() {
		Il_simple_operatorContext _localctx = new Il_simple_operatorContext(Context, State);
		EnterRule(_localctx, 512, RULE_il_simple_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2769;
			_la = TokenStream.LA(1);
			if ( !(_la==T__118 || _la==IL_Expr_Operator) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public Il_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Il_assignmentContext il_assignment() {
		Il_assignmentContext _localctx = new Il_assignmentContext(Context, State);
		EnterRule(_localctx, 514, RULE_il_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2771;
			variable_name();
			State = 2772;
			Match(T__33);
			State = 2773;
			Match(T__43);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Il_assign_out_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public Il_assign_out_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_il_assign_out_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIl_assign_out_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIl_assign_out_operator(this);
		}
	}

	[RuleVersion(0)]
	public Il_assign_out_operatorContext il_assign_out_operator() {
		Il_assign_out_operatorContext _localctx = new Il_assign_out_operatorContext(Context, State);
		EnterRule(_localctx, 516, RULE_il_assign_out_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__119) {
				{
				State = 2775;
				Match(T__119);
				}
			}

			State = 2778;
			variable_name();
			State = 2779;
			Match(T__43);
			State = 2780;
			Match(T__120);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xor_exprContext[] xor_expr() {
			return GetRuleContexts<Xor_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xor_exprContext xor_expr(int i) {
			return GetRuleContext<Xor_exprContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 518, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2782;
			xor_expr();
			State = 2787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__121) {
				{
				{
				State = 2783;
				Match(T__121);
				State = 2784;
				xor_expr();
				}
				}
				State = 2789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterConstant_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitConstant_expr(this);
		}
	}

	[RuleVersion(0)]
	public Constant_exprContext constant_expr() {
		Constant_exprContext _localctx = new Constant_exprContext(Context, State);
		EnterRule(_localctx, 520, RULE_constant_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2790;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xor_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext[] and_expr() {
			return GetRuleContexts<And_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext and_expr(int i) {
			return GetRuleContext<And_exprContext>(i);
		}
		public Xor_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterXor_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitXor_expr(this);
		}
	}

	[RuleVersion(0)]
	public Xor_exprContext xor_expr() {
		Xor_exprContext _localctx = new Xor_exprContext(Context, State);
		EnterRule(_localctx, 522, RULE_xor_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2792;
			and_expr();
			State = 2797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__122) {
				{
				{
				State = 2793;
				Match(T__122);
				State = 2794;
				and_expr();
				}
				}
				State = 2799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compare_exprContext[] compare_expr() {
			return GetRuleContexts<Compare_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compare_exprContext compare_expr(int i) {
			return GetRuleContext<Compare_exprContext>(i);
		}
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAnd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAnd_expr(this);
		}
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		And_exprContext _localctx = new And_exprContext(Context, State);
		EnterRule(_localctx, 524, RULE_and_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2800;
			compare_expr();
			State = 2805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__123 || _la==T__124) {
				{
				{
				State = 2801;
				_la = TokenStream.LA(1);
				if ( !(_la==T__123 || _la==T__124) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2802;
				compare_expr();
				}
				}
				State = 2807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compare_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equ_exprContext[] equ_expr() {
			return GetRuleContexts<Equ_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equ_exprContext equ_expr(int i) {
			return GetRuleContext<Equ_exprContext>(i);
		}
		public Compare_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterCompare_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitCompare_expr(this);
		}
	}

	[RuleVersion(0)]
	public Compare_exprContext compare_expr() {
		Compare_exprContext _localctx = new Compare_exprContext(Context, State);
		EnterRule(_localctx, 526, RULE_compare_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2808;
			equ_expr();
			State = 2813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__43 || _la==T__125) {
				{
				{
				State = 2809;
				_la = TokenStream.LA(1);
				if ( !(_la==T__43 || _la==T__125) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2810;
				equ_expr();
				}
				}
				State = 2815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equ_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext[] add_expr() {
			return GetRuleContexts<Add_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext add_expr(int i) {
			return GetRuleContext<Add_exprContext>(i);
		}
		public Equ_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equ_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterEqu_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitEqu_expr(this);
		}
	}

	[RuleVersion(0)]
	public Equ_exprContext equ_expr() {
		Equ_exprContext _localctx = new Equ_exprContext(Context, State);
		EnterRule(_localctx, 528, RULE_equ_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2816;
			add_expr();
			State = 2828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__120 || _la==T__126) {
				{
				{
				State = 2823;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
				case 1:
					{
					State = 2817;
					Match(T__126);
					}
					break;
				case 2:
					{
					State = 2818;
					Match(T__120);
					}
					break;
				case 3:
					{
					State = 2819;
					Match(T__126);
					State = 2820;
					Match(T__43);
					}
					break;
				case 4:
					{
					State = 2821;
					Match(T__120);
					State = 2822;
					Match(T__43);
					}
					break;
				}
				State = 2825;
				add_expr();
				}
				}
				State = 2830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Add_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAdd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAdd_expr(this);
		}
	}

	[RuleVersion(0)]
	public Add_exprContext add_expr() {
		Add_exprContext _localctx = new Add_exprContext(Context, State);
		EnterRule(_localctx, 530, RULE_add_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2831;
			term();
			State = 2836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15 || _la==T__16) {
				{
				{
				State = 2832;
				_la = TokenStream.LA(1);
				if ( !(_la==T__15 || _la==T__16) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2833;
				term();
				}
				}
				State = 2838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Power_exprContext[] power_expr() {
			return GetRuleContexts<Power_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Power_exprContext power_expr(int i) {
			return GetRuleContext<Power_exprContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 532, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2839;
			power_expr();
			State = 2848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__63 || _la==T__127 || _la==T__128) {
				{
				State = 2846;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__63:
					{
					State = 2840;
					Match(T__63);
					State = 2841;
					power_expr();
					}
					break;
				case T__127:
					{
					State = 2842;
					Match(T__127);
					State = 2843;
					power_expr();
					}
					break;
				case T__128:
					{
					State = 2844;
					Match(T__128);
					State = 2845;
					power_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Power_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext[] unary_expr() {
			return GetRuleContexts<Unary_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr(int i) {
			return GetRuleContext<Unary_exprContext>(i);
		}
		public Power_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterPower_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitPower_expr(this);
		}
	}

	[RuleVersion(0)]
	public Power_exprContext power_expr() {
		Power_exprContext _localctx = new Power_exprContext(Context, State);
		EnterRule(_localctx, 534, RULE_power_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2851;
			unary_expr();
			State = 2856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__129) {
				{
				{
				State = 2852;
				Match(T__129);
				State = 2853;
				unary_expr();
				}
				}
				State = 2858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_exprContext primary_expr() {
			return GetRuleContext<Primary_exprContext>(0);
		}
		public Unary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterUnary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitUnary_expr(this);
		}
	}

	[RuleVersion(0)]
	public Unary_exprContext unary_expr() {
		Unary_exprContext _localctx = new Unary_exprContext(Context, State);
		EnterRule(_localctx, 536, RULE_unary_expr);
		int _la;
		try {
			State = 2865;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2859;
				Match(T__16);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2860;
				Match(T__15);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__119) {
					{
					State = 2861;
					Match(T__119);
					}
				}

				State = 2864;
				primary_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_valueContext enum_value() {
			return GetRuleContext<Enum_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_accessContext variable_access() {
			return GetRuleContext<Variable_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_valueContext ref_value() {
			return GetRuleContext<Ref_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Primary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterPrimary_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitPrimary_expr(this);
		}
	}

	[RuleVersion(0)]
	public Primary_exprContext primary_expr() {
		Primary_exprContext _localctx = new Primary_exprContext(Context, State);
		EnterRule(_localctx, 538, RULE_primary_expr);
		try {
			State = 2876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2867;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2868;
				enum_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2869;
				variable_access();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2870;
				func_call();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2871;
				ref_value();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2872;
				Match(T__44);
				State = 2873;
				expression();
				State = 2874;
				Match(T__45);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multibit_part_accessContext multibit_part_access() {
			return GetRuleContext<Multibit_part_accessContext>(0);
		}
		public Variable_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterVariable_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitVariable_access(this);
		}
	}

	[RuleVersion(0)]
	public Variable_accessContext variable_access() {
		Variable_accessContext _localctx = new Variable_accessContext(Context, State);
		EnterRule(_localctx, 540, RULE_variable_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2878;
			variable();
			State = 2880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 2879;
				multibit_part_access();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multibit_part_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned_int() { return GetToken(PLCSTPARSERParser.Unsigned_int, 0); }
		public Multibit_part_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multibit_part_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterMultibit_part_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitMultibit_part_access(this);
		}
	}

	[RuleVersion(0)]
	public Multibit_part_accessContext multibit_part_access() {
		Multibit_part_accessContext _localctx = new Multibit_part_accessContext(Context, State);
		EnterRule(_localctx, 542, RULE_multibit_part_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2882;
			Match(T__21);
			State = 2889;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Unsigned_int:
				{
				State = 2883;
				Match(Unsigned_int);
				}
				break;
			case T__72:
				{
				State = 2884;
				Match(T__72);
				State = 2886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1816L) != 0)) {
					{
					State = 2885;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1816L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2888;
				Match(Unsigned_int);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_accessContext func_access() {
			return GetRuleContext<Func_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_assignContext[] param_assign() {
			return GetRuleContexts<Param_assignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_assignContext param_assign(int i) {
			return GetRuleContext<Param_assignContext>(i);
		}
		public Func_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFunc_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFunc_call(this);
		}
	}

	[RuleVersion(0)]
	public Func_callContext func_call() {
		Func_callContext _localctx = new Func_callContext(Context, State);
		EnterRule(_localctx, 544, RULE_func_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2891;
			func_access();
			State = 2892;
			Match(T__44);
			State = 2901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180179212478939134L) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 5135245931276402689L) != 0)) {
				{
				State = 2893;
				param_assign();
				State = 2898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__47) {
					{
					{
					State = 2894;
					Match(T__47);
					State = 2895;
					param_assign();
					}
					}
					State = 2900;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2903;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public Stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStmt_list(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_listContext stmt_list() {
		Stmt_listContext _localctx = new Stmt_listContext(Context, State);
		EnterRule(_localctx, 546, RULE_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2909;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2906;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144115188075888638L) != 0) || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & 1152956759071047681L) != 0)) {
						{
						State = 2905;
						stmt();
						}
					}

					State = 2908;
					Match(T__41);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2911;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,329,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_stmtContext assign_stmt() {
			return GetRuleContext<Assign_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprog_ctrl_stmtContext subprog_ctrl_stmt() {
			return GetRuleContext<Subprog_ctrl_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_stmtContext selection_stmt() {
			return GetRuleContext<Selection_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Iteration_stmtContext iteration_stmt() {
			return GetRuleContext<Iteration_stmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 548, RULE_stmt);
		try {
			State = 2917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2913;
				assign_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2914;
				subprog_ctrl_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2915;
				selection_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2916;
				iteration_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_assignContext ref_assign() {
			return GetRuleContext<Ref_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_attemptContext assignment_attempt() {
			return GetRuleContext<Assignment_attemptContext>(0);
		}
		public Assign_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAssign_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAssign_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Assign_stmtContext assign_stmt() {
		Assign_stmtContext _localctx = new Assign_stmtContext(Context, State);
		EnterRule(_localctx, 550, RULE_assign_stmt);
		try {
			State = 2926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2919;
				variable();
				State = 2920;
				Match(T__33);
				State = 2921;
				Match(T__43);
				State = 2922;
				expression();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2924;
				ref_assign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2925;
				assignment_attempt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_attemptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_nameContext[] ref_name() {
			return GetRuleContexts<Ref_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_nameContext ref_name(int i) {
			return GetRuleContext<Ref_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_derefContext[] ref_deref() {
			return GetRuleContexts<Ref_derefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_derefContext ref_deref(int i) {
			return GetRuleContext<Ref_derefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_valueContext ref_value() {
			return GetRuleContext<Ref_valueContext>(0);
		}
		public Assignment_attemptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_attempt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterAssignment_attempt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitAssignment_attempt(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_attemptContext assignment_attempt() {
		Assignment_attemptContext _localctx = new Assignment_attemptContext(Context, State);
		EnterRule(_localctx, 552, RULE_assignment_attempt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
			case 1:
				{
				State = 2928;
				ref_name();
				}
				break;
			case 2:
				{
				State = 2929;
				ref_deref();
				}
				break;
			}
			State = 2932;
			Match(T__130);
			State = 2933;
			Match(T__43);
			State = 2937;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				{
				State = 2934;
				ref_name();
				}
				break;
			case 2:
				{
				State = 2935;
				ref_deref();
				}
				break;
			case 3:
				{
				State = 2936;
				ref_value();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext[] fb_instance_name() {
			return GetRuleContexts<Fb_instance_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fb_instance_nameContext fb_instance_name(int i) {
			return GetRuleContext<Fb_instance_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_nameContext method_name() {
			return GetRuleContext<Method_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_assignContext[] param_assign() {
			return GetRuleContexts<Param_assignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_assignContext param_assign(int i) {
			return GetRuleContext<Param_assignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_instance_nameContext[] class_instance_name() {
			return GetRuleContexts<Class_instance_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_instance_nameContext class_instance_name(int i) {
			return GetRuleContext<Class_instance_nameContext>(i);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitInvocation(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 554, RULE_invocation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2958;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,337,Context) ) {
			case 1:
				{
				State = 2939;
				fb_instance_name();
				}
				break;
			case 2:
				{
				State = 2940;
				method_name();
				}
				break;
			case 3:
				{
				State = 2941;
				Match(T__56);
				}
				break;
			case 4:
				{
				{
				State = 2944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__56) {
					{
					State = 2942;
					Match(T__56);
					State = 2943;
					Match(T__21);
					}
				}

				{
				State = 2952;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2948;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
						case 1:
							{
							State = 2946;
							fb_instance_name();
							}
							break;
						case 2:
							{
							State = 2947;
							class_instance_name();
							}
							break;
						}
						State = 2950;
						Match(T__21);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2954;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,336,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				State = 2956;
				method_name();
				}
				}
				break;
			}
			State = 2960;
			Match(T__44);
			State = 2969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180179212478939134L) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 5135245931276402689L) != 0)) {
				{
				State = 2961;
				param_assign();
				State = 2966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__47) {
					{
					{
					State = 2962;
					Match(T__47);
					State = 2963;
					param_assign();
					}
					}
					State = 2968;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2971;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprog_ctrl_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Derived_func_nameContext derived_func_name() {
			return GetRuleContext<Derived_func_nameContext>(0);
		}
		public Subprog_ctrl_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprog_ctrl_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSubprog_ctrl_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSubprog_ctrl_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Subprog_ctrl_stmtContext subprog_ctrl_stmt() {
		Subprog_ctrl_stmtContext _localctx = new Subprog_ctrl_stmtContext(Context, State);
		EnterRule(_localctx, 556, RULE_subprog_ctrl_stmt);
		try {
			State = 2982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2973;
				func_call();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2974;
				invocation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2975;
				Match(T__117);
				State = 2976;
				Match(T__21);
				State = 2977;
				derived_func_name();
				State = 2978;
				Match(T__44);
				State = 2979;
				Match(T__45);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2981;
				Match(T__131);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_assignContext ref_assign() {
			return GetRuleContext<Ref_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Param_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterParam_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitParam_assign(this);
		}
	}

	[RuleVersion(0)]
	public Param_assignContext param_assign() {
		Param_assignContext _localctx = new Param_assignContext(Context, State);
		EnterRule(_localctx, 558, RULE_param_assign);
		int _la;
		try {
			State = 2999;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2988;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,341,Context) ) {
				case 1:
					{
					State = 2984;
					variable_name();
					State = 2985;
					Match(T__33);
					State = 2986;
					Match(T__43);
					}
					break;
				}
				State = 2990;
				expression();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2991;
				ref_assign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 2993;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__119) {
					{
					State = 2992;
					Match(T__119);
					}
				}

				State = 2995;
				variable_name();
				State = 2996;
				Match(T__110);
				State = 2997;
				variable();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_stmtContext case_stmt() {
			return GetRuleContext<Case_stmtContext>(0);
		}
		public Selection_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterSelection_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitSelection_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Selection_stmtContext selection_stmt() {
		Selection_stmtContext _localctx = new Selection_stmtContext(Context, State);
		EnterRule(_localctx, 560, RULE_selection_stmt);
		try {
			State = 3003;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__132:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3001;
				if_stmt();
				}
				break;
			case T__137:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3002;
				case_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext[] stmt_list() {
			return GetRuleContexts<Stmt_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list(int i) {
			return GetRuleContext<Stmt_listContext>(i);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 562, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3005;
			Match(T__132);
			State = 3006;
			expression();
			State = 3007;
			Match(T__133);
			State = 3008;
			stmt_list();
			State = 3016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__134) {
				{
				{
				State = 3009;
				Match(T__134);
				State = 3010;
				expression();
				State = 3011;
				Match(T__133);
				State = 3012;
				stmt_list();
				}
				}
				State = 3018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__135) {
				{
				State = 3019;
				Match(T__135);
				State = 3020;
				stmt_list();
				}
			}

			State = 3023;
			Match(T__136);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_selectionContext[] case_selection() {
			return GetRuleContexts<Case_selectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_selectionContext case_selection(int i) {
			return GetRuleContext<Case_selectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		public Case_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterCase_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitCase_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Case_stmtContext case_stmt() {
		Case_stmtContext _localctx = new Case_stmtContext(Context, State);
		EnterRule(_localctx, 564, RULE_case_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3025;
			Match(T__137);
			State = 3026;
			expression();
			State = 3027;
			Match(T__49);
			State = 3029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3028;
				case_selection();
				}
				}
				State = 3031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 180179212478939134L) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 5135245931276402689L) != 0) );
			State = 3035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__135) {
				{
				State = 3033;
				Match(T__135);
				State = 3034;
				stmt_list();
				}
			}

			State = 3037;
			Match(T__138);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_selectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_listContext case_list() {
			return GetRuleContext<Case_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		public Case_selectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_selection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterCase_selection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitCase_selection(this);
		}
	}

	[RuleVersion(0)]
	public Case_selectionContext case_selection() {
		Case_selectionContext _localctx = new Case_selectionContext(Context, State);
		EnterRule(_localctx, 566, RULE_case_selection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3039;
			case_list();
			State = 3040;
			Match(T__33);
			State = 3041;
			stmt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_list_elemContext[] case_list_elem() {
			return GetRuleContexts<Case_list_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_list_elemContext case_list_elem(int i) {
			return GetRuleContext<Case_list_elemContext>(i);
		}
		public Case_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterCase_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitCase_list(this);
		}
	}

	[RuleVersion(0)]
	public Case_listContext case_list() {
		Case_listContext _localctx = new Case_listContext(Context, State);
		EnterRule(_localctx, 568, RULE_case_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3043;
			case_list_elem();
			State = 3048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__47) {
				{
				{
				State = 3044;
				Match(T__47);
				State = 3045;
				case_list_elem();
				}
				}
				State = 3050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_list_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubrangeContext subrange() {
			return GetRuleContext<SubrangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext constant_expr() {
			return GetRuleContext<Constant_exprContext>(0);
		}
		public Case_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_list_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterCase_list_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitCase_list_elem(this);
		}
	}

	[RuleVersion(0)]
	public Case_list_elemContext case_list_elem() {
		Case_list_elemContext _localctx = new Case_list_elemContext(Context, State);
		EnterRule(_localctx, 570, RULE_case_list_elem);
		try {
			State = 3053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3051;
				subrange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3052;
				constant_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_stmtContext for_stmt() {
			return GetRuleContext<For_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_stmtContext repeat_stmt() {
			return GetRuleContext<Repeat_stmtContext>(0);
		}
		public Iteration_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterIteration_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitIteration_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_stmtContext iteration_stmt() {
		Iteration_stmtContext _localctx = new Iteration_stmtContext(Context, State);
		EnterRule(_localctx, 572, RULE_iteration_stmt);
		try {
			State = 3060;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__141:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3055;
				for_stmt();
				}
				break;
			case T__145:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3056;
				while_stmt();
				}
				break;
			case T__147:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3057;
				repeat_stmt();
				}
				break;
			case T__139:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3058;
				Match(T__139);
				}
				break;
			case T__140:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3059;
				Match(T__140);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Control_variableContext control_variable() {
			return GetRuleContext<Control_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_listContext for_list() {
			return GetRuleContext<For_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		public For_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFor_stmt(this);
		}
	}

	[RuleVersion(0)]
	public For_stmtContext for_stmt() {
		For_stmtContext _localctx = new For_stmtContext(Context, State);
		EnterRule(_localctx, 574, RULE_for_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3062;
			Match(T__141);
			State = 3063;
			control_variable();
			State = 3064;
			Match(T__33);
			State = 3065;
			Match(T__43);
			State = 3066;
			for_list();
			State = 3067;
			Match(T__142);
			State = 3068;
			stmt_list();
			State = 3069;
			Match(T__143);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Control_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterControl_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitControl_variable(this);
		}
	}

	[RuleVersion(0)]
	public Control_variableContext control_variable() {
		Control_variableContext _localctx = new Control_variableContext(Context, State);
		EnterRule(_localctx, 576, RULE_control_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3071;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public For_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFor_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFor_list(this);
		}
	}

	[RuleVersion(0)]
	public For_listContext for_list() {
		For_listContext _localctx = new For_listContext(Context, State);
		EnterRule(_localctx, 578, RULE_for_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3073;
			expression();
			State = 3074;
			Match(T__97);
			State = 3075;
			expression();
			State = 3078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__144) {
				{
				State = 3076;
				Match(T__144);
				State = 3077;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitWhile_stmt(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(Context, State);
		EnterRule(_localctx, 580, RULE_while_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3080;
			Match(T__145);
			State = 3081;
			expression();
			State = 3082;
			Match(T__142);
			State = 3083;
			stmt_list();
			State = 3084;
			Match(T__146);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_listContext stmt_list() {
			return GetRuleContext<Stmt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Repeat_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterRepeat_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitRepeat_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_stmtContext repeat_stmt() {
		Repeat_stmtContext _localctx = new Repeat_stmtContext(Context, State);
		EnterRule(_localctx, 582, RULE_repeat_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3086;
			Match(T__147);
			State = 3087;
			stmt_list();
			State = 3088;
			Match(T__148);
			State = 3089;
			expression();
			State = 3090;
			Match(T__149);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ladder_diagramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LD_Rung() { return GetTokens(PLCSTPARSERParser.LD_Rung); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LD_Rung(int i) {
			return GetToken(PLCSTPARSERParser.LD_Rung, i);
		}
		public Ladder_diagramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ladder_diagram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterLadder_diagram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitLadder_diagram(this);
		}
	}

	[RuleVersion(0)]
	public Ladder_diagramContext ladder_diagram() {
		Ladder_diagramContext _localctx = new Ladder_diagramContext(Context, State);
		EnterRule(_localctx, 584, RULE_ladder_diagram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3092;
				Match(LD_Rung);
				}
				}
				State = 3095;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LD_Rung );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fb_diagramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FBD_Network() { return GetTokens(PLCSTPARSERParser.FBD_Network); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FBD_Network(int i) {
			return GetToken(PLCSTPARSERParser.FBD_Network, i);
		}
		public Fb_diagramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fb_diagram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterFb_diagram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitFb_diagram(this);
		}
	}

	[RuleVersion(0)]
	public Fb_diagramContext fb_diagram() {
		Fb_diagramContext _localctx = new Fb_diagramContext(Context, State);
		EnterRule(_localctx, 586, RULE_fb_diagram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3098;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3097;
				Match(FBD_Network);
				}
				}
				State = 3100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FBD_Network );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedKeywordContext : ParserRuleContext {
		public ReservedKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.EnterReservedKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPLCSTPARSERListener typedListener = listener as IPLCSTPARSERListener;
			if (typedListener != null) typedListener.ExitReservedKeyword(this);
		}
	}

	[RuleVersion(0)]
	public ReservedKeywordContext reservedKeyword() {
		ReservedKeywordContext _localctx = new ReservedKeywordContext(Context, State);
		EnterRule(_localctx, 588, RULE_reservedKeyword);
		try {
			State = 3188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3103;
				Match(T__40);
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3104;
				Match(T__42);
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3105;
				Match(T__48);
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3106;
				Match(T__49);
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3107;
				Match(T__50);
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3108;
				Match(T__51);
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3109;
				Match(T__52);
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3110;
				Match(T__53);
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3111;
				Match(T__54);
				}
				break;
			case T__56:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3112;
				Match(T__56);
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3113;
				Match(T__57);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3114;
				Match(T__58);
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3115;
				Match(T__59);
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3116;
				Match(T__60);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3117;
				Match(T__61);
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3118;
				Match(T__62);
				}
				break;
			case T__65:
				EnterOuterAlt(_localctx, 18);
				{
				State = 3119;
				Match(T__65);
				}
				break;
			case T__67:
				EnterOuterAlt(_localctx, 19);
				{
				State = 3120;
				Match(T__67);
				}
				break;
			case T__66:
				EnterOuterAlt(_localctx, 20);
				{
				State = 3121;
				Match(T__66);
				}
				break;
			case T__68:
				EnterOuterAlt(_localctx, 21);
				{
				State = 3122;
				Match(T__68);
				}
				break;
			case T__69:
				EnterOuterAlt(_localctx, 22);
				{
				State = 3123;
				Match(T__69);
				}
				break;
			case T__70:
				EnterOuterAlt(_localctx, 23);
				{
				State = 3124;
				Match(T__70);
				}
				break;
			case T__71:
				EnterOuterAlt(_localctx, 24);
				{
				State = 3125;
				Match(T__71);
				}
				break;
			case T__73:
				EnterOuterAlt(_localctx, 25);
				{
				State = 3126;
				Match(T__73);
				}
				break;
			case T__74:
				EnterOuterAlt(_localctx, 26);
				{
				State = 3127;
				Match(T__74);
				}
				break;
			case T__75:
				EnterOuterAlt(_localctx, 27);
				{
				State = 3128;
				Match(T__75);
				}
				break;
			case T__76:
				EnterOuterAlt(_localctx, 28);
				{
				State = 3129;
				Match(T__76);
				}
				break;
			case T__77:
				EnterOuterAlt(_localctx, 29);
				{
				State = 3130;
				Match(T__77);
				}
				break;
			case T__78:
				EnterOuterAlt(_localctx, 30);
				{
				State = 3131;
				Match(T__78);
				}
				break;
			case T__79:
				EnterOuterAlt(_localctx, 31);
				{
				State = 3132;
				Match(T__79);
				}
				break;
			case T__80:
				EnterOuterAlt(_localctx, 32);
				{
				State = 3133;
				Match(T__80);
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 33);
				{
				State = 3134;
				Match(T__64);
				}
				break;
			case T__82:
				EnterOuterAlt(_localctx, 34);
				{
				State = 3135;
				Match(T__82);
				}
				break;
			case T__81:
				EnterOuterAlt(_localctx, 35);
				{
				State = 3136;
				Match(T__81);
				}
				break;
			case T__83:
				EnterOuterAlt(_localctx, 36);
				{
				State = 3137;
				Match(T__83);
				}
				break;
			case T__84:
				EnterOuterAlt(_localctx, 37);
				{
				State = 3138;
				Match(T__84);
				}
				break;
			case T__85:
				EnterOuterAlt(_localctx, 38);
				{
				State = 3139;
				Match(T__85);
				}
				break;
			case T__87:
				EnterOuterAlt(_localctx, 39);
				{
				State = 3140;
				Match(T__87);
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 40);
				{
				State = 3141;
				Match(T__88);
				}
				break;
			case T__89:
				EnterOuterAlt(_localctx, 41);
				{
				State = 3142;
				Match(T__89);
				}
				break;
			case T__90:
				EnterOuterAlt(_localctx, 42);
				{
				State = 3143;
				Match(T__90);
				}
				break;
			case T__91:
				EnterOuterAlt(_localctx, 43);
				{
				State = 3144;
				Match(T__91);
				}
				break;
			case T__92:
				EnterOuterAlt(_localctx, 44);
				{
				State = 3145;
				Match(T__92);
				}
				break;
			case T__93:
				EnterOuterAlt(_localctx, 45);
				{
				State = 3146;
				Match(T__93);
				}
				break;
			case T__94:
				EnterOuterAlt(_localctx, 46);
				{
				State = 3147;
				Match(T__94);
				}
				break;
			case T__95:
				EnterOuterAlt(_localctx, 47);
				{
				State = 3148;
				Match(T__95);
				}
				break;
			case T__96:
				EnterOuterAlt(_localctx, 48);
				{
				State = 3149;
				Match(T__96);
				}
				break;
			case T__97:
				EnterOuterAlt(_localctx, 49);
				{
				State = 3150;
				Match(T__97);
				}
				break;
			case T__98:
				EnterOuterAlt(_localctx, 50);
				{
				State = 3151;
				Match(T__98);
				}
				break;
			case T__99:
				EnterOuterAlt(_localctx, 51);
				{
				State = 3152;
				Match(T__99);
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 52);
				{
				State = 3153;
				Match(T__100);
				}
				break;
			case T__101:
				EnterOuterAlt(_localctx, 53);
				{
				State = 3154;
				Match(T__101);
				}
				break;
			case T__102:
				EnterOuterAlt(_localctx, 54);
				{
				State = 3155;
				Match(T__102);
				}
				break;
			case T__103:
				EnterOuterAlt(_localctx, 55);
				{
				State = 3156;
				Match(T__103);
				}
				break;
			case T__104:
				EnterOuterAlt(_localctx, 56);
				{
				State = 3157;
				Match(T__104);
				}
				break;
			case T__105:
				EnterOuterAlt(_localctx, 57);
				{
				State = 3158;
				Match(T__105);
				}
				break;
			case T__106:
				EnterOuterAlt(_localctx, 58);
				{
				State = 3159;
				Match(T__106);
				}
				break;
			case T__107:
				EnterOuterAlt(_localctx, 59);
				{
				State = 3160;
				Match(T__107);
				}
				break;
			case T__108:
				EnterOuterAlt(_localctx, 60);
				{
				State = 3161;
				Match(T__108);
				}
				break;
			case T__109:
				EnterOuterAlt(_localctx, 61);
				{
				State = 3162;
				Match(T__109);
				}
				break;
			case T__111:
				EnterOuterAlt(_localctx, 62);
				{
				State = 3163;
				Match(T__111);
				}
				break;
			case T__112:
				EnterOuterAlt(_localctx, 63);
				{
				State = 3164;
				Match(T__112);
				}
				break;
			case T__114:
				EnterOuterAlt(_localctx, 64);
				{
				State = 3165;
				Match(T__114);
				}
				break;
			case T__115:
				EnterOuterAlt(_localctx, 65);
				{
				State = 3166;
				Match(T__115);
				}
				break;
			case T__117:
				EnterOuterAlt(_localctx, 66);
				{
				State = 3167;
				Match(T__117);
				}
				break;
			case T__118:
				EnterOuterAlt(_localctx, 67);
				{
				State = 3168;
				Match(T__118);
				}
				break;
			case T__131:
				EnterOuterAlt(_localctx, 68);
				{
				State = 3169;
				Match(T__131);
				}
				break;
			case T__132:
				EnterOuterAlt(_localctx, 69);
				{
				State = 3170;
				Match(T__132);
				}
				break;
			case T__133:
				EnterOuterAlt(_localctx, 70);
				{
				State = 3171;
				Match(T__133);
				}
				break;
			case T__134:
				EnterOuterAlt(_localctx, 71);
				{
				State = 3172;
				Match(T__134);
				}
				break;
			case T__135:
				EnterOuterAlt(_localctx, 72);
				{
				State = 3173;
				Match(T__135);
				}
				break;
			case T__136:
				EnterOuterAlt(_localctx, 73);
				{
				State = 3174;
				Match(T__136);
				}
				break;
			case T__137:
				EnterOuterAlt(_localctx, 74);
				{
				State = 3175;
				Match(T__137);
				}
				break;
			case T__138:
				EnterOuterAlt(_localctx, 75);
				{
				State = 3176;
				Match(T__138);
				}
				break;
			case T__139:
				EnterOuterAlt(_localctx, 76);
				{
				State = 3177;
				Match(T__139);
				}
				break;
			case T__140:
				EnterOuterAlt(_localctx, 77);
				{
				State = 3178;
				Match(T__140);
				}
				break;
			case T__141:
				EnterOuterAlt(_localctx, 78);
				{
				State = 3179;
				Match(T__141);
				}
				break;
			case T__143:
				EnterOuterAlt(_localctx, 79);
				{
				State = 3180;
				Match(T__143);
				}
				break;
			case T__142:
				EnterOuterAlt(_localctx, 80);
				{
				State = 3181;
				Match(T__142);
				}
				break;
			case T__145:
				EnterOuterAlt(_localctx, 81);
				{
				State = 3182;
				Match(T__145);
				}
				break;
			case T__144:
				EnterOuterAlt(_localctx, 82);
				{
				State = 3183;
				Match(T__144);
				}
				break;
			case T__146:
				EnterOuterAlt(_localctx, 83);
				{
				State = 3184;
				Match(T__146);
				}
				break;
			case T__147:
				EnterOuterAlt(_localctx, 84);
				{
				State = 3185;
				Match(T__147);
				}
				break;
			case T__148:
				EnterOuterAlt(_localctx, 85);
				{
				State = 3186;
				Match(T__148);
				}
				break;
			case T__149:
				EnterOuterAlt(_localctx, 86);
				{
				State = 3187;
				Match(T__149);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,199,3191,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,1,0,1,0,1,0,1,0,1,0,1,
		0,4,0,597,8,0,11,0,12,0,598,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,3,2,610,
		8,2,1,3,1,3,3,3,614,8,3,1,4,1,4,1,4,3,4,619,8,4,1,4,1,4,1,4,1,4,3,4,625,
		8,4,1,5,3,5,628,8,5,1,5,1,5,1,6,1,6,3,6,634,8,6,1,6,4,6,637,8,6,11,6,12,
		6,638,1,7,1,7,3,7,643,8,7,1,7,4,7,646,8,7,11,7,12,7,647,1,8,1,8,3,8,652,
		8,8,1,8,4,8,655,8,8,11,8,12,8,656,1,9,1,9,3,9,661,8,9,1,9,1,9,1,9,1,9,
		1,9,3,9,668,8,9,1,10,1,10,3,10,672,8,10,1,10,1,10,1,10,1,10,3,10,678,8,
		10,1,11,1,11,3,11,682,8,11,1,11,1,11,1,12,1,12,3,12,688,8,12,1,12,1,12,
		1,13,1,13,1,14,4,14,695,8,14,11,14,12,14,696,1,14,1,14,1,14,1,14,1,14,
		3,14,704,8,14,1,15,1,15,1,15,1,15,3,15,710,8,15,1,16,1,16,1,16,1,16,3,
		16,716,8,16,1,16,1,16,3,16,720,8,16,1,16,1,16,1,17,1,17,1,17,3,17,727,
		8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,736,8,18,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,3,19,745,8,19,3,19,747,8,19,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,3,20,756,8,20,3,20,758,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,3,21,767,8,21,3,21,769,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
		778,8,22,3,22,780,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,
		23,791,8,23,3,23,793,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		3,24,804,8,24,3,24,806,8,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
		27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,
		31,1,31,3,31,832,8,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
		1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,3,37,
		857,8,37,1,38,1,38,1,38,1,38,1,38,3,38,864,8,38,1,39,1,39,3,39,868,8,39,
		1,40,1,40,1,41,1,41,1,41,1,41,3,41,876,8,41,1,41,1,41,1,41,1,41,3,41,882,
		8,41,1,41,1,41,3,41,886,8,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,
		43,3,43,897,8,43,1,44,1,44,1,44,5,44,902,8,44,10,44,12,44,905,9,44,1,44,
		1,44,1,45,1,45,1,45,3,45,912,8,45,1,46,1,46,1,46,5,46,917,8,46,10,46,12,
		46,920,9,46,1,46,1,46,1,47,1,47,1,47,5,47,927,8,47,10,47,12,47,930,9,47,
		1,47,1,47,1,48,1,48,1,48,5,48,937,8,48,10,48,12,48,940,9,48,1,48,1,48,
		1,49,1,49,1,49,5,49,947,8,49,10,49,12,49,950,9,49,1,49,1,49,1,50,1,50,
		1,50,5,50,957,8,50,10,50,12,50,960,9,50,1,50,1,50,1,51,1,51,1,52,1,52,
		1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,4,56,978,8,56,11,56,
		12,56,979,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,992,8,
		57,1,58,1,58,1,58,1,58,1,59,1,59,1,60,1,60,1,60,3,60,1003,8,60,1,60,1,
		60,3,60,1007,8,60,1,60,1,60,1,60,1,60,3,60,1013,8,60,1,61,1,61,1,61,1,
		61,1,62,1,62,1,62,1,62,3,62,1023,8,62,1,63,1,63,3,63,1027,8,63,1,64,1,
		64,1,64,1,64,1,65,1,65,1,65,1,65,3,65,1037,8,65,1,66,1,66,1,66,1,66,1,
		66,1,66,3,66,1045,8,66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,3,68,1054,8,
		68,1,68,1,68,3,68,1058,8,68,1,69,1,69,1,69,1,69,5,69,1064,8,69,10,69,12,
		69,1067,9,69,1,69,1,69,1,69,1,69,3,69,1073,8,69,1,70,1,70,1,70,1,70,5,
		70,1079,8,70,10,70,12,70,1082,9,70,1,70,1,70,1,70,3,70,1087,8,70,1,70,
		1,70,1,70,3,70,1092,8,70,1,71,1,71,1,71,1,71,1,71,3,71,1099,8,71,3,71,
		1101,8,71,1,72,1,72,1,72,3,72,1106,8,72,1,72,1,72,1,73,1,73,1,73,1,73,
		1,74,1,74,1,74,1,74,3,74,1118,8,74,1,75,1,75,1,75,1,75,1,75,1,75,5,75,
		1126,8,75,10,75,12,75,1129,9,75,1,75,1,75,1,75,1,75,3,75,1135,8,75,1,76,
		1,76,1,76,1,76,5,76,1141,8,76,10,76,12,76,1144,9,76,1,76,1,76,1,77,1,77,
		3,77,1150,8,77,1,78,1,78,1,78,3,78,1155,8,78,1,78,1,78,5,78,1159,8,78,
		10,78,12,78,1162,9,78,1,78,1,78,1,79,1,79,1,79,1,79,3,79,1170,8,79,1,80,
		1,80,1,80,1,80,1,81,1,81,3,81,1178,8,81,1,82,1,82,1,82,1,82,3,82,1184,
		8,82,1,83,1,83,3,83,1188,8,83,1,83,1,83,1,83,4,83,1193,8,83,11,83,12,83,
		1194,1,83,1,83,1,84,1,84,1,84,3,84,1202,8,84,3,84,1204,8,84,1,84,1,84,
		1,84,1,84,3,84,1210,8,84,1,84,1,84,1,84,1,84,1,84,3,84,1217,8,84,1,85,
		1,85,1,86,1,86,1,86,1,86,5,86,1225,8,86,10,86,12,86,1228,9,86,1,86,1,86,
		1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1240,8,87,1,88,1,88,1,88,
		1,88,1,88,1,88,3,88,1248,8,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,
		3,90,1258,8,90,1,91,4,91,1261,8,91,11,91,12,91,1262,1,91,1,91,1,92,1,92,
		1,93,1,93,1,93,5,93,1272,8,93,10,93,12,93,1275,9,93,1,93,1,93,1,94,1,94,
		1,95,1,95,3,95,1283,8,95,1,96,1,96,1,96,1,96,1,96,3,96,1290,8,96,1,96,
		1,96,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1300,8,97,1,98,1,98,4,98,1304,
		8,98,11,98,12,98,1305,1,99,1,99,3,99,1310,8,99,1,100,1,100,1,100,1,100,
		1,100,4,100,1317,8,100,11,100,12,100,1318,3,100,1321,8,100,1,100,1,100,
		3,100,1325,8,100,1,101,1,101,3,101,1329,8,101,1,102,1,102,1,103,1,103,
		1,103,4,103,1336,8,103,11,103,12,103,1337,1,104,1,104,1,104,1,104,5,104,
		1344,8,104,10,104,12,104,1347,9,104,1,104,1,104,1,105,1,105,1,106,1,106,
		1,106,1,107,1,107,1,108,1,108,3,108,1360,8,108,1,108,1,108,1,108,5,108,
		1365,8,108,10,108,12,108,1368,9,108,1,108,1,108,1,109,1,109,1,109,3,109,
		1375,8,109,1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,
		1,111,1,111,1,111,1,111,3,111,1391,8,111,1,111,3,111,1394,8,111,1,111,
		1,111,1,111,1,111,3,111,1400,8,111,1,112,1,112,1,112,1,112,1,113,1,113,
		1,113,1,113,1,114,1,114,1,114,5,114,1413,8,114,10,114,12,114,1416,9,114,
		1,115,1,115,1,116,1,116,1,116,1,116,1,116,5,116,1425,8,116,10,116,12,116,
		1428,9,116,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,1,118,1,118,
		1,118,1,118,1,119,1,119,1,119,5,119,1445,8,119,10,119,12,119,1448,9,119,
		1,119,1,119,1,119,1,120,1,120,1,120,1,120,3,120,1457,8,120,1,121,1,121,
		1,122,1,122,1,122,5,122,1464,8,122,10,122,12,122,1467,9,122,1,122,1,122,
		5,122,1471,8,122,10,122,12,122,1474,9,122,1,123,1,123,3,123,1478,8,123,
		1,123,1,123,1,123,5,123,1483,8,123,10,123,12,123,1486,9,123,1,123,1,123,
		1,124,1,124,3,124,1492,8,124,1,125,1,125,1,125,1,125,5,125,1498,8,125,
		10,125,12,125,1501,9,125,1,125,1,125,1,126,1,126,1,126,3,126,1508,8,126,
		1,127,1,127,1,127,1,127,1,127,1,127,3,127,1516,8,127,1,128,1,128,1,128,
		1,128,1,129,1,129,1,129,1,129,1,130,1,130,3,130,1528,8,130,1,130,3,130,
		1531,8,130,1,130,1,130,1,130,5,130,1536,8,130,10,130,12,130,1539,9,130,
		1,130,1,130,1,131,1,131,1,131,3,131,1546,8,131,1,131,1,131,1,131,5,131,
		1551,8,131,10,131,12,131,1554,9,131,1,131,1,131,1,132,1,132,3,132,1560,
		8,132,1,132,1,132,1,132,5,132,1565,8,132,10,132,12,132,1568,9,132,1,132,
		1,132,1,133,3,133,1573,8,133,1,133,1,133,1,133,1,133,1,134,1,134,1,134,
		1,134,3,134,1583,8,134,1,134,1,134,5,134,1587,8,134,10,134,12,134,1590,
		9,134,1,134,1,134,1,135,1,135,3,135,1596,8,135,1,135,1,135,1,135,5,135,
		1601,8,135,10,135,12,135,1604,9,135,1,135,1,135,1,136,1,136,1,136,1,136,
		1,136,1,136,1,136,3,136,1615,8,136,1,137,1,137,1,138,1,138,3,138,1621,
		8,138,1,138,1,138,1,138,5,138,1626,8,138,10,138,12,138,1629,9,138,1,138,
		1,138,1,139,1,139,1,139,1,139,3,139,1637,8,139,1,140,1,140,1,140,5,140,
		1642,8,140,10,140,12,140,1645,9,140,1,140,1,140,1,140,3,140,1650,8,140,
		1,141,1,141,1,141,1,141,1,141,3,141,1657,8,141,1,142,1,142,1,142,1,143,
		1,143,1,143,1,143,1,144,1,144,3,144,1668,8,144,1,145,1,145,1,145,1,145,
		1,146,1,146,1,146,1,146,3,146,1678,8,146,1,146,1,146,1,146,3,146,1683,
		8,146,1,147,1,147,1,147,1,147,1,148,1,148,1,148,1,148,3,148,1693,8,148,
		1,148,1,148,1,148,3,148,1698,8,148,1,149,1,149,3,149,1702,8,149,1,149,
		5,149,1705,8,149,10,149,12,149,1708,9,149,1,149,1,149,1,150,1,150,1,150,
		1,150,1,150,1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,3,151,1728,8,151,3,151,1730,8,151,1,152,1,152,3,152,1734,8,152,1,
		153,1,153,1,153,5,153,1739,8,153,10,153,12,153,1742,9,153,1,153,1,153,
		1,154,1,154,1,155,1,155,1,155,1,155,3,155,1752,8,155,1,155,5,155,1755,
		8,155,10,155,12,155,1758,9,155,1,155,1,155,1,155,5,155,1763,8,155,10,155,
		12,155,1766,9,155,1,155,3,155,1769,8,155,1,155,1,155,1,156,1,156,1,156,
		3,156,1776,8,156,1,157,1,157,3,157,1780,8,157,1,158,1,158,1,158,1,158,
		1,158,3,158,1787,8,158,1,159,1,159,3,159,1791,8,159,1,160,1,160,1,160,
		5,160,1796,8,160,10,160,12,160,1799,9,160,1,160,1,160,1,161,1,161,1,162,
		1,162,3,162,1807,8,162,1,162,1,162,5,162,1811,8,162,10,162,12,162,1814,
		9,162,1,162,1,162,1,162,3,162,1819,8,162,3,162,1821,8,162,1,162,1,162,
		3,162,1825,8,162,1,162,1,162,1,162,1,162,5,162,1831,8,162,10,162,12,162,
		1834,9,162,1,162,5,162,1837,8,162,10,162,12,162,1840,9,162,1,162,3,162,
		1843,8,162,1,162,1,162,1,163,1,163,1,163,3,163,1850,8,163,1,164,1,164,
		3,164,1854,8,164,1,164,1,164,1,164,5,164,1859,8,164,10,164,12,164,1862,
		9,164,1,164,1,164,1,165,1,165,1,165,3,165,1869,8,165,1,166,1,166,3,166,
		1873,8,166,1,166,1,166,1,166,5,166,1878,8,166,10,166,12,166,1881,9,166,
		1,166,1,166,1,167,1,167,3,167,1887,8,167,1,168,1,168,1,168,3,168,1892,
		8,168,1,169,1,169,1,169,3,169,1897,8,169,1,169,1,169,1,169,5,169,1902,
		8,169,10,169,12,169,1905,9,169,1,169,1,169,1,170,1,170,1,170,1,170,1,170,
		1,170,3,170,1915,8,170,1,171,1,171,3,171,1919,8,171,1,171,3,171,1922,8,
		171,1,171,3,171,1925,8,171,1,171,1,171,1,171,3,171,1930,8,171,1,171,1,
		171,1,171,5,171,1935,8,171,10,171,12,171,1938,9,171,1,171,1,171,1,171,
		1,172,1,172,1,173,1,173,3,173,1947,8,173,1,173,1,173,5,173,1951,8,173,
		10,173,12,173,1954,9,173,1,173,1,173,3,173,1958,8,173,1,173,1,173,3,173,
		1962,8,173,1,173,1,173,5,173,1966,8,173,10,173,12,173,1969,9,173,1,173,
		5,173,1972,8,173,10,173,12,173,1975,9,173,1,173,1,173,1,174,1,174,1,175,
		1,175,1,175,5,175,1984,8,175,10,175,12,175,1987,9,175,1,175,1,175,1,176,
		1,176,1,177,1,177,1,177,5,177,1996,8,177,10,177,12,177,1999,9,177,1,177,
		1,177,5,177,2003,8,177,10,177,12,177,2006,9,177,1,178,1,178,1,178,5,178,
		2011,8,178,10,178,12,178,2014,9,178,1,178,1,178,3,178,2018,8,178,1,178,
		5,178,2021,8,178,10,178,12,178,2024,9,178,1,178,1,178,1,179,1,179,1,179,
		1,179,3,179,2032,8,179,1,179,5,179,2035,8,179,10,179,12,179,2038,9,179,
		1,179,1,179,1,180,1,180,1,180,1,180,3,180,2046,8,180,1,181,1,181,1,181,
		1,181,3,181,2052,8,181,1,182,1,182,1,182,5,182,2057,8,182,10,182,12,182,
		2060,9,182,1,183,1,183,1,184,1,184,1,184,5,184,2067,8,184,10,184,12,184,
		2070,9,184,1,184,1,184,1,185,1,185,1,186,1,186,1,186,1,186,1,186,1,186,
		1,186,1,186,5,186,2084,8,186,10,186,12,186,2087,9,186,1,186,3,186,2090,
		8,186,1,186,1,186,1,187,1,187,1,188,1,188,1,188,5,188,2099,8,188,10,188,
		12,188,2102,9,188,1,188,1,188,1,189,1,189,1,189,1,189,5,189,2110,8,189,
		10,189,12,189,2113,9,189,1,189,1,189,1,190,1,190,1,190,1,190,3,190,2121,
		8,190,1,190,1,190,1,190,3,190,2126,8,190,1,191,4,191,2129,8,191,11,191,
		12,191,2130,1,192,1,192,1,192,1,192,5,192,2137,8,192,10,192,12,192,2140,
		9,192,1,193,1,193,1,193,1,193,1,193,1,193,5,193,2148,8,193,10,193,12,193,
		2151,9,193,1,193,1,193,1,194,1,194,1,194,1,194,1,194,1,194,5,194,2161,
		8,194,10,194,12,194,2164,9,194,1,194,1,194,1,195,1,195,1,196,1,196,1,196,
		3,196,2173,8,196,1,196,1,196,5,196,2177,8,196,10,196,12,196,2180,9,196,
		1,196,1,196,1,197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
		1,198,1,198,1,198,1,198,3,198,2198,8,198,1,198,1,198,3,198,2202,8,198,
		1,199,1,199,3,199,2206,8,199,1,200,1,200,1,201,1,201,3,201,2212,8,201,
		1,201,1,201,1,201,1,201,1,201,1,201,3,201,2220,8,201,1,201,1,201,1,201,
		1,201,1,201,1,201,1,201,1,201,1,202,1,202,1,203,1,203,1,203,1,203,1,203,
		4,203,2237,8,203,11,203,12,203,2238,1,203,1,203,3,203,2243,8,203,1,204,
		1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,3,204,2255,8,204,
		1,205,1,205,1,205,1,205,1,205,1,205,1,206,1,206,1,207,1,207,1,208,1,208,
		1,208,3,208,2270,8,208,1,208,1,208,4,208,2274,8,208,11,208,12,208,2275,
		3,208,2278,8,208,1,208,3,208,2281,8,208,1,208,3,208,2284,8,208,1,208,1,
		208,1,209,1,209,1,209,1,209,1,209,3,209,2293,8,209,1,209,1,209,1,209,1,
		210,1,210,1,210,5,210,2301,8,210,10,210,12,210,2304,9,210,1,210,1,210,
		1,210,4,210,2309,8,210,11,210,12,210,2310,1,211,1,211,1,212,1,212,1,212,
		1,212,5,212,2319,8,212,10,212,12,212,2322,9,212,1,212,1,212,1,213,1,213,
		1,213,1,213,1,213,1,213,3,213,2332,8,213,1,214,1,214,1,214,3,214,2337,
		8,214,1,214,1,214,1,214,1,214,3,214,2343,8,214,1,214,1,214,1,214,3,214,
		2348,8,214,1,214,1,214,3,214,2352,8,214,1,214,1,214,5,214,2356,8,214,10,
		214,12,214,2359,9,214,1,214,3,214,2362,8,214,1,215,1,215,1,215,3,215,2367,
		8,215,1,215,1,215,1,215,3,215,2372,8,215,1,216,1,216,1,217,1,217,1,217,
		1,217,1,218,1,218,1,219,1,219,1,219,1,219,1,220,1,220,1,221,1,221,1,221,
		1,221,1,221,1,221,1,221,3,221,2395,8,221,1,221,1,221,1,221,1,221,1,221,
		1,221,3,221,2403,8,221,1,221,1,221,1,221,1,221,1,221,1,221,1,222,1,222,
		1,222,1,222,3,222,2415,8,222,1,223,1,223,3,223,2419,8,223,1,223,1,223,
		1,223,3,223,2424,8,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,2432,
		8,223,1,224,1,224,1,224,5,224,2437,8,224,10,224,12,224,2440,9,224,1,225,
		1,225,3,225,2444,8,225,1,226,1,226,1,226,1,226,1,227,1,227,1,227,1,227,
		1,227,1,227,1,227,1,227,1,227,3,227,2459,8,227,1,228,1,228,1,228,1,228,
		3,228,2465,8,228,1,229,1,229,3,229,2469,8,229,1,230,1,230,1,230,1,230,
		5,230,2475,8,230,10,230,12,230,2478,9,230,1,230,1,230,1,231,1,231,1,231,
		1,231,1,231,1,231,3,231,2488,8,231,1,231,1,231,5,231,2492,8,231,10,231,
		12,231,2495,9,231,1,231,1,231,3,231,2499,8,231,1,231,1,231,1,231,1,231,
		1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,2512,8,231,1,231,1,231,
		1,231,1,231,3,231,2518,8,231,1,232,1,232,3,232,2522,8,232,1,232,1,232,
		5,232,2526,8,232,10,232,12,232,2529,9,232,1,232,1,232,1,232,1,233,1,233,
		1,233,1,233,1,233,1,233,4,233,2540,8,233,11,233,12,233,2541,1,234,1,234,
		1,234,5,234,2547,8,234,10,234,12,234,2550,9,234,1,235,1,235,1,236,1,236,
		1,236,1,236,5,236,2558,8,236,10,236,12,236,2561,9,236,1,236,1,236,1,237,
		5,237,2566,8,237,10,237,12,237,2569,9,237,1,237,1,237,1,237,1,237,1,237,
		1,237,1,237,1,237,4,237,2579,8,237,11,237,12,237,2580,1,238,4,238,2584,
		8,238,11,238,12,238,2585,1,239,1,239,1,239,3,239,2591,8,239,1,239,1,239,
		1,239,1,239,1,239,1,239,3,239,2599,8,239,1,239,4,239,2602,8,239,11,239,
		12,239,2603,1,240,1,240,1,240,3,240,2609,8,240,1,241,1,241,1,242,1,242,
		3,242,2615,8,242,1,242,1,242,3,242,2619,8,242,3,242,2621,8,242,1,243,1,
		243,1,243,3,243,2626,8,243,1,243,4,243,2629,8,243,11,243,12,243,2630,1,
		243,3,243,2634,8,243,1,243,1,243,1,244,1,244,1,244,1,245,1,245,1,245,1,
		245,1,245,1,245,1,245,1,245,1,245,3,245,2650,8,245,1,245,1,245,5,245,2654,
		8,245,10,245,12,245,2657,9,245,1,245,3,245,2660,8,245,1,245,1,245,4,245,
		2664,8,245,11,245,12,245,2665,1,245,3,245,2669,8,245,1,245,3,245,2672,
		8,245,3,245,2674,8,245,1,245,3,245,2677,8,245,1,245,1,245,1,245,1,245,
		1,245,1,245,3,245,2685,8,245,1,246,1,246,1,246,4,246,2690,8,246,11,246,
		12,246,2691,1,246,3,246,2695,8,246,1,246,1,246,1,247,1,247,1,247,3,247,
		2702,8,247,1,248,1,248,1,248,5,248,2707,8,248,10,248,12,248,2710,9,248,
		1,249,4,249,2713,8,249,11,249,12,249,2714,1,250,1,250,1,250,3,250,2720,
		8,250,1,250,4,250,2723,8,250,11,250,12,250,2724,1,251,5,251,2728,8,251,
		10,251,12,251,2731,9,251,1,251,1,251,1,252,1,252,3,252,2737,8,252,1,252,
		1,252,4,252,2741,8,252,11,252,12,252,2742,1,253,1,253,3,253,2747,8,253,
		1,253,4,253,2750,8,253,11,253,12,253,2751,1,254,1,254,1,254,1,254,4,254,
		2758,8,254,11,254,12,254,2759,1,254,1,254,1,254,3,254,2765,8,254,1,255,
		1,255,1,255,1,256,1,256,1,257,1,257,1,257,1,257,1,258,3,258,2777,8,258,
		1,258,1,258,1,258,1,258,1,259,1,259,1,259,5,259,2786,8,259,10,259,12,259,
		2789,9,259,1,260,1,260,1,261,1,261,1,261,5,261,2796,8,261,10,261,12,261,
		2799,9,261,1,262,1,262,1,262,5,262,2804,8,262,10,262,12,262,2807,9,262,
		1,263,1,263,1,263,5,263,2812,8,263,10,263,12,263,2815,9,263,1,264,1,264,
		1,264,1,264,1,264,1,264,1,264,3,264,2824,8,264,1,264,5,264,2827,8,264,
		10,264,12,264,2830,9,264,1,265,1,265,1,265,5,265,2835,8,265,10,265,12,
		265,2838,9,265,1,266,1,266,1,266,1,266,1,266,1,266,1,266,5,266,2847,8,
		266,10,266,12,266,2850,9,266,1,267,1,267,1,267,5,267,2855,8,267,10,267,
		12,267,2858,9,267,1,268,1,268,1,268,3,268,2863,8,268,1,268,3,268,2866,
		8,268,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,269,2877,
		8,269,1,270,1,270,3,270,2881,8,270,1,271,1,271,1,271,1,271,3,271,2887,
		8,271,1,271,3,271,2890,8,271,1,272,1,272,1,272,1,272,1,272,5,272,2897,
		8,272,10,272,12,272,2900,9,272,3,272,2902,8,272,1,272,1,272,1,273,3,273,
		2907,8,273,1,273,4,273,2910,8,273,11,273,12,273,2911,1,274,1,274,1,274,
		1,274,3,274,2918,8,274,1,275,1,275,1,275,1,275,1,275,1,275,1,275,3,275,
		2927,8,275,1,276,1,276,3,276,2931,8,276,1,276,1,276,1,276,1,276,1,276,
		3,276,2938,8,276,1,277,1,277,1,277,1,277,1,277,3,277,2945,8,277,1,277,
		1,277,3,277,2949,8,277,1,277,1,277,4,277,2953,8,277,11,277,12,277,2954,
		1,277,1,277,3,277,2959,8,277,1,277,1,277,1,277,1,277,5,277,2965,8,277,
		10,277,12,277,2968,9,277,3,277,2970,8,277,1,277,1,277,1,278,1,278,1,278,
		1,278,1,278,1,278,1,278,1,278,1,278,3,278,2983,8,278,1,279,1,279,1,279,
		1,279,3,279,2989,8,279,1,279,1,279,1,279,3,279,2994,8,279,1,279,1,279,
		1,279,1,279,3,279,3000,8,279,1,280,1,280,3,280,3004,8,280,1,281,1,281,
		1,281,1,281,1,281,1,281,1,281,1,281,1,281,5,281,3015,8,281,10,281,12,281,
		3018,9,281,1,281,1,281,3,281,3022,8,281,1,281,1,281,1,282,1,282,1,282,
		1,282,4,282,3030,8,282,11,282,12,282,3031,1,282,1,282,3,282,3036,8,282,
		1,282,1,282,1,283,1,283,1,283,1,283,1,284,1,284,1,284,5,284,3047,8,284,
		10,284,12,284,3050,9,284,1,285,1,285,3,285,3054,8,285,1,286,1,286,1,286,
		1,286,1,286,3,286,3061,8,286,1,287,1,287,1,287,1,287,1,287,1,287,1,287,
		1,287,1,287,1,288,1,288,1,289,1,289,1,289,1,289,1,289,3,289,3079,8,289,
		1,290,1,290,1,290,1,290,1,290,1,290,1,291,1,291,1,291,1,291,1,291,1,291,
		1,292,4,292,3094,8,292,11,292,12,292,3095,1,293,4,293,3099,8,293,11,293,
		12,293,3100,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,3,294,3189,8,294,1,294,0,0,295,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
		144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
		180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
		216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
		252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
		288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
		324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,
		360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,
		396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,
		432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,
		468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,
		504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,
		540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,
		576,578,580,582,584,586,588,0,21,2,0,1,14,178,178,1,0,16,17,2,0,23,24,
		182,182,1,0,152,153,2,0,33,33,161,161,2,0,35,35,176,176,1,0,156,157,2,
		0,162,162,177,177,4,0,156,159,161,162,174,174,176,177,1,0,59,60,1,0,62,
		63,2,0,59,60,68,68,2,0,59,59,68,68,1,0,5,7,2,0,25,25,38,38,1,0,77,78,1,
		0,171,172,2,0,119,119,166,166,1,0,124,125,2,0,44,44,126,126,2,0,3,4,8,
		10,3480,0,596,1,0,0,0,2,602,1,0,0,0,4,609,1,0,0,0,6,613,1,0,0,0,8,618,
		1,0,0,0,10,627,1,0,0,0,12,631,1,0,0,0,14,640,1,0,0,0,16,649,1,0,0,0,18,
		660,1,0,0,0,20,671,1,0,0,0,22,681,1,0,0,0,24,687,1,0,0,0,26,691,1,0,0,
		0,28,703,1,0,0,0,30,709,1,0,0,0,32,715,1,0,0,0,34,723,1,0,0,0,36,735,1,
		0,0,0,38,746,1,0,0,0,40,757,1,0,0,0,42,768,1,0,0,0,44,779,1,0,0,0,46,792,
		1,0,0,0,48,805,1,0,0,0,50,807,1,0,0,0,52,811,1,0,0,0,54,815,1,0,0,0,56,
		821,1,0,0,0,58,823,1,0,0,0,60,825,1,0,0,0,62,831,1,0,0,0,64,836,1,0,0,
		0,66,842,1,0,0,0,68,844,1,0,0,0,70,846,1,0,0,0,72,848,1,0,0,0,74,856,1,
		0,0,0,76,863,1,0,0,0,78,867,1,0,0,0,80,869,1,0,0,0,82,885,1,0,0,0,84,887,
		1,0,0,0,86,896,1,0,0,0,88,903,1,0,0,0,90,911,1,0,0,0,92,918,1,0,0,0,94,
		928,1,0,0,0,96,938,1,0,0,0,98,948,1,0,0,0,100,958,1,0,0,0,102,963,1,0,
		0,0,104,965,1,0,0,0,106,967,1,0,0,0,108,969,1,0,0,0,110,971,1,0,0,0,112,
		973,1,0,0,0,114,991,1,0,0,0,116,993,1,0,0,0,118,997,1,0,0,0,120,1012,1,
		0,0,0,122,1014,1,0,0,0,124,1018,1,0,0,0,126,1026,1,0,0,0,128,1028,1,0,
		0,0,130,1032,1,0,0,0,132,1044,1,0,0,0,134,1046,1,0,0,0,136,1050,1,0,0,
		0,138,1059,1,0,0,0,140,1086,1,0,0,0,142,1093,1,0,0,0,144,1105,1,0,0,0,
		146,1109,1,0,0,0,148,1113,1,0,0,0,150,1134,1,0,0,0,152,1136,1,0,0,0,154,
		1149,1,0,0,0,156,1151,1,0,0,0,158,1169,1,0,0,0,160,1171,1,0,0,0,162,1177,
		1,0,0,0,164,1179,1,0,0,0,166,1185,1,0,0,0,168,1198,1,0,0,0,170,1218,1,
		0,0,0,172,1220,1,0,0,0,174,1231,1,0,0,0,176,1241,1,0,0,0,178,1249,1,0,
		0,0,180,1253,1,0,0,0,182,1260,1,0,0,0,184,1266,1,0,0,0,186,1273,1,0,0,
		0,188,1278,1,0,0,0,190,1282,1,0,0,0,192,1284,1,0,0,0,194,1293,1,0,0,0,
		196,1301,1,0,0,0,198,1309,1,0,0,0,200,1320,1,0,0,0,202,1328,1,0,0,0,204,
		1330,1,0,0,0,206,1332,1,0,0,0,208,1339,1,0,0,0,210,1350,1,0,0,0,212,1352,
		1,0,0,0,214,1355,1,0,0,0,216,1357,1,0,0,0,218,1374,1,0,0,0,220,1376,1,
		0,0,0,222,1399,1,0,0,0,224,1401,1,0,0,0,226,1405,1,0,0,0,228,1409,1,0,
		0,0,230,1417,1,0,0,0,232,1419,1,0,0,0,234,1433,1,0,0,0,236,1437,1,0,0,
		0,238,1441,1,0,0,0,240,1452,1,0,0,0,242,1458,1,0,0,0,244,1465,1,0,0,0,
		246,1475,1,0,0,0,248,1491,1,0,0,0,250,1493,1,0,0,0,252,1507,1,0,0,0,254,
		1509,1,0,0,0,256,1517,1,0,0,0,258,1521,1,0,0,0,260,1525,1,0,0,0,262,1542,
		1,0,0,0,264,1557,1,0,0,0,266,1572,1,0,0,0,268,1578,1,0,0,0,270,1593,1,
		0,0,0,272,1607,1,0,0,0,274,1616,1,0,0,0,276,1618,1,0,0,0,278,1632,1,0,
		0,0,280,1649,1,0,0,0,282,1656,1,0,0,0,284,1658,1,0,0,0,286,1661,1,0,0,
		0,288,1667,1,0,0,0,290,1669,1,0,0,0,292,1673,1,0,0,0,294,1684,1,0,0,0,
		296,1688,1,0,0,0,298,1699,1,0,0,0,300,1711,1,0,0,0,302,1729,1,0,0,0,304,
		1733,1,0,0,0,306,1740,1,0,0,0,308,1745,1,0,0,0,310,1747,1,0,0,0,312,1775,
		1,0,0,0,314,1779,1,0,0,0,316,1786,1,0,0,0,318,1790,1,0,0,0,320,1797,1,
		0,0,0,322,1802,1,0,0,0,324,1804,1,0,0,0,326,1849,1,0,0,0,328,1851,1,0,
		0,0,330,1868,1,0,0,0,332,1870,1,0,0,0,334,1886,1,0,0,0,336,1891,1,0,0,
		0,338,1893,1,0,0,0,340,1914,1,0,0,0,342,1916,1,0,0,0,344,1942,1,0,0,0,
		346,1944,1,0,0,0,348,1978,1,0,0,0,350,1985,1,0,0,0,352,1990,1,0,0,0,354,
		1997,1,0,0,0,356,2007,1,0,0,0,358,2027,1,0,0,0,360,2041,1,0,0,0,362,2051,
		1,0,0,0,364,2053,1,0,0,0,366,2061,1,0,0,0,368,2068,1,0,0,0,370,2073,1,
		0,0,0,372,2075,1,0,0,0,374,2093,1,0,0,0,376,2100,1,0,0,0,378,2105,1,0,
		0,0,380,2116,1,0,0,0,382,2128,1,0,0,0,384,2132,1,0,0,0,386,2141,1,0,0,
		0,388,2154,1,0,0,0,390,2167,1,0,0,0,392,2169,1,0,0,0,394,2183,1,0,0,0,
		396,2201,1,0,0,0,398,2205,1,0,0,0,400,2207,1,0,0,0,402,2209,1,0,0,0,404,
		2229,1,0,0,0,406,2242,1,0,0,0,408,2254,1,0,0,0,410,2256,1,0,0,0,412,2262,
		1,0,0,0,414,2264,1,0,0,0,416,2266,1,0,0,0,418,2287,1,0,0,0,420,2302,1,
		0,0,0,422,2312,1,0,0,0,424,2314,1,0,0,0,426,2325,1,0,0,0,428,2361,1,0,
		0,0,430,2366,1,0,0,0,432,2373,1,0,0,0,434,2375,1,0,0,0,436,2379,1,0,0,
		0,438,2381,1,0,0,0,440,2385,1,0,0,0,442,2387,1,0,0,0,444,2414,1,0,0,0,
		446,2416,1,0,0,0,448,2433,1,0,0,0,450,2443,1,0,0,0,452,2445,1,0,0,0,454,
		2458,1,0,0,0,456,2464,1,0,0,0,458,2468,1,0,0,0,460,2470,1,0,0,0,462,2481,
		1,0,0,0,464,2519,1,0,0,0,466,2539,1,0,0,0,468,2543,1,0,0,0,470,2551,1,
		0,0,0,472,2553,1,0,0,0,474,2567,1,0,0,0,476,2583,1,0,0,0,478,2590,1,0,
		0,0,480,2608,1,0,0,0,482,2610,1,0,0,0,484,2620,1,0,0,0,486,2622,1,0,0,
		0,488,2637,1,0,0,0,490,2640,1,0,0,0,492,2686,1,0,0,0,494,2701,1,0,0,0,
		496,2703,1,0,0,0,498,2712,1,0,0,0,500,2719,1,0,0,0,502,2729,1,0,0,0,504,
		2736,1,0,0,0,506,2746,1,0,0,0,508,2753,1,0,0,0,510,2766,1,0,0,0,512,2769,
		1,0,0,0,514,2771,1,0,0,0,516,2776,1,0,0,0,518,2782,1,0,0,0,520,2790,1,
		0,0,0,522,2792,1,0,0,0,524,2800,1,0,0,0,526,2808,1,0,0,0,528,2816,1,0,
		0,0,530,2831,1,0,0,0,532,2839,1,0,0,0,534,2851,1,0,0,0,536,2865,1,0,0,
		0,538,2876,1,0,0,0,540,2878,1,0,0,0,542,2882,1,0,0,0,544,2891,1,0,0,0,
		546,2909,1,0,0,0,548,2917,1,0,0,0,550,2926,1,0,0,0,552,2930,1,0,0,0,554,
		2958,1,0,0,0,556,2982,1,0,0,0,558,2999,1,0,0,0,560,3003,1,0,0,0,562,3005,
		1,0,0,0,564,3025,1,0,0,0,566,3039,1,0,0,0,568,3043,1,0,0,0,570,3053,1,
		0,0,0,572,3060,1,0,0,0,574,3062,1,0,0,0,576,3071,1,0,0,0,578,3073,1,0,
		0,0,580,3080,1,0,0,0,582,3086,1,0,0,0,584,3093,1,0,0,0,586,3098,1,0,0,
		0,588,3188,1,0,0,0,590,597,3,310,155,0,591,597,3,416,208,0,592,597,3,372,
		186,0,593,597,3,474,237,0,594,597,3,324,162,0,595,597,3,474,237,0,596,
		590,1,0,0,0,596,591,1,0,0,0,596,592,1,0,0,0,596,593,1,0,0,0,596,594,1,
		0,0,0,596,595,1,0,0,0,597,598,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,
		599,600,1,0,0,0,600,601,5,0,0,1,601,1,1,0,0,0,602,603,7,0,0,0,603,3,1,
		0,0,0,604,610,3,6,3,0,605,610,3,24,12,0,606,610,3,30,15,0,607,610,3,20,
		10,0,608,610,3,22,11,0,609,604,1,0,0,0,609,605,1,0,0,0,609,606,1,0,0,0,
		609,607,1,0,0,0,609,608,1,0,0,0,610,5,1,0,0,0,611,614,3,8,4,0,612,614,
		3,18,9,0,613,611,1,0,0,0,613,612,1,0,0,0,614,7,1,0,0,0,615,616,3,80,40,
		0,616,617,5,15,0,0,617,619,1,0,0,0,618,615,1,0,0,0,618,619,1,0,0,0,619,
		624,1,0,0,0,620,625,3,10,5,0,621,625,3,12,6,0,622,625,3,14,7,0,623,625,
		3,16,8,0,624,620,1,0,0,0,624,621,1,0,0,0,624,622,1,0,0,0,624,623,1,0,0,
		0,625,9,1,0,0,0,626,628,7,1,0,0,627,626,1,0,0,0,627,628,1,0,0,0,628,629,
		1,0,0,0,629,630,5,151,0,0,630,11,1,0,0,0,631,636,5,18,0,0,632,634,5,19,
		0,0,633,632,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,637,5,182,0,0,
		636,633,1,0,0,0,637,638,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,13,
		1,0,0,0,640,645,5,20,0,0,641,643,5,19,0,0,642,641,1,0,0,0,642,643,1,0,
		0,0,643,644,1,0,0,0,644,646,5,183,0,0,645,642,1,0,0,0,646,647,1,0,0,0,
		647,645,1,0,0,0,647,648,1,0,0,0,648,15,1,0,0,0,649,654,5,21,0,0,650,652,
		5,19,0,0,651,650,1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,0,653,655,5,184,
		0,0,654,651,1,0,0,0,655,656,1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,
		17,1,0,0,0,658,659,5,158,0,0,659,661,5,15,0,0,660,658,1,0,0,0,660,661,
		1,0,0,0,661,662,1,0,0,0,662,663,3,10,5,0,663,664,5,22,0,0,664,667,5,151,
		0,0,665,666,5,1,0,0,666,668,3,10,5,0,667,665,1,0,0,0,667,668,1,0,0,0,668,
		19,1,0,0,0,669,670,5,162,0,0,670,672,5,15,0,0,671,669,1,0,0,0,671,672,
		1,0,0,0,672,677,1,0,0,0,673,678,5,151,0,0,674,678,3,12,6,0,675,678,3,14,
		7,0,676,678,3,16,8,0,677,673,1,0,0,0,677,674,1,0,0,0,677,675,1,0,0,0,677,
		676,1,0,0,0,678,21,1,0,0,0,679,680,5,177,0,0,680,682,5,15,0,0,681,679,
		1,0,0,0,681,682,1,0,0,0,682,683,1,0,0,0,683,684,7,2,0,0,684,23,1,0,0,0,
		685,686,5,25,0,0,686,688,5,15,0,0,687,685,1,0,0,0,687,688,1,0,0,0,688,
		689,1,0,0,0,689,690,3,26,13,0,690,25,1,0,0,0,691,692,7,3,0,0,692,27,1,
		0,0,0,693,695,5,191,0,0,694,693,1,0,0,0,695,696,1,0,0,0,696,694,1,0,0,
		0,696,697,1,0,0,0,697,704,1,0,0,0,698,699,5,26,0,0,699,700,5,184,0,0,700,
		701,5,184,0,0,701,702,5,184,0,0,702,704,5,184,0,0,703,694,1,0,0,0,703,
		698,1,0,0,0,704,29,1,0,0,0,705,710,3,32,16,0,706,710,3,52,26,0,707,710,
		3,62,31,0,708,710,3,72,36,0,709,705,1,0,0,0,709,706,1,0,0,0,709,707,1,
		0,0,0,709,708,1,0,0,0,710,31,1,0,0,0,711,716,5,159,0,0,712,716,5,2,0,0,
		713,714,5,3,0,0,714,716,5,2,0,0,715,711,1,0,0,0,715,712,1,0,0,0,715,713,
		1,0,0,0,716,717,1,0,0,0,717,719,5,15,0,0,718,720,7,1,0,0,719,718,1,0,0,
		0,719,720,1,0,0,0,720,721,1,0,0,0,721,722,3,36,18,0,722,33,1,0,0,0,723,
		726,5,151,0,0,724,725,5,22,0,0,725,727,5,151,0,0,726,724,1,0,0,0,726,727,
		1,0,0,0,727,35,1,0,0,0,728,736,3,38,19,0,729,736,3,40,20,0,730,736,3,42,
		21,0,731,736,3,44,22,0,732,736,3,46,23,0,733,736,3,48,24,0,734,736,3,50,
		25,0,735,728,1,0,0,0,735,729,1,0,0,0,735,730,1,0,0,0,735,731,1,0,0,0,735,
		732,1,0,0,0,735,733,1,0,0,0,735,734,1,0,0,0,736,37,1,0,0,0,737,738,3,34,
		17,0,738,739,5,27,0,0,739,747,1,0,0,0,740,741,5,151,0,0,741,744,5,27,0,
		0,742,743,5,19,0,0,743,745,3,40,20,0,744,742,1,0,0,0,744,745,1,0,0,0,745,
		747,1,0,0,0,746,737,1,0,0,0,746,740,1,0,0,0,747,39,1,0,0,0,748,749,3,34,
		17,0,749,750,5,28,0,0,750,758,1,0,0,0,751,752,5,151,0,0,752,755,5,28,0,
		0,753,754,5,19,0,0,754,756,3,42,21,0,755,753,1,0,0,0,755,756,1,0,0,0,756,
		758,1,0,0,0,757,748,1,0,0,0,757,751,1,0,0,0,758,41,1,0,0,0,759,760,3,34,
		17,0,760,761,5,29,0,0,761,769,1,0,0,0,762,763,5,151,0,0,763,766,5,29,0,
		0,764,765,5,19,0,0,765,767,3,44,22,0,766,764,1,0,0,0,766,767,1,0,0,0,767,
		769,1,0,0,0,768,759,1,0,0,0,768,762,1,0,0,0,769,43,1,0,0,0,770,771,3,34,
		17,0,771,772,5,30,0,0,772,780,1,0,0,0,773,774,5,151,0,0,774,777,5,30,0,
		0,775,776,5,19,0,0,776,778,3,46,23,0,777,775,1,0,0,0,777,778,1,0,0,0,778,
		780,1,0,0,0,779,770,1,0,0,0,779,773,1,0,0,0,780,45,1,0,0,0,781,782,3,34,
		17,0,782,783,5,29,0,0,783,784,5,30,0,0,784,793,1,0,0,0,785,786,5,151,0,
		0,786,787,5,29,0,0,787,790,5,30,0,0,788,789,5,19,0,0,789,791,3,48,24,0,
		790,788,1,0,0,0,790,791,1,0,0,0,791,793,1,0,0,0,792,781,1,0,0,0,792,785,
		1,0,0,0,793,47,1,0,0,0,794,795,3,34,17,0,795,796,5,31,0,0,796,797,5,30,
		0,0,797,806,1,0,0,0,798,799,5,151,0,0,799,800,5,31,0,0,800,803,5,30,0,
		0,801,802,5,19,0,0,802,804,3,50,25,0,803,801,1,0,0,0,803,804,1,0,0,0,804,
		806,1,0,0,0,805,794,1,0,0,0,805,798,1,0,0,0,806,49,1,0,0,0,807,808,3,34,
		17,0,808,809,5,32,0,0,809,810,5,30,0,0,810,51,1,0,0,0,811,812,7,4,0,0,
		812,813,5,15,0,0,813,814,3,54,27,0,814,53,1,0,0,0,815,816,3,56,28,0,816,
		817,5,34,0,0,817,818,3,58,29,0,818,819,5,34,0,0,819,820,3,60,30,0,820,
		55,1,0,0,0,821,822,5,151,0,0,822,57,1,0,0,0,823,824,5,151,0,0,824,59,1,
		0,0,0,825,826,3,34,17,0,826,61,1,0,0,0,827,832,5,174,0,0,828,832,5,4,0,
		0,829,830,5,3,0,0,830,832,5,4,0,0,831,827,1,0,0,0,831,828,1,0,0,0,831,
		829,1,0,0,0,832,833,1,0,0,0,833,834,5,15,0,0,834,835,3,64,32,0,835,63,
		1,0,0,0,836,837,3,66,33,0,837,838,5,17,0,0,838,839,3,68,34,0,839,840,5,
		17,0,0,840,841,3,70,35,0,841,65,1,0,0,0,842,843,5,151,0,0,843,67,1,0,0,
		0,844,845,5,151,0,0,845,69,1,0,0,0,846,847,5,151,0,0,847,71,1,0,0,0,848,
		849,7,5,0,0,849,850,5,15,0,0,850,851,3,64,32,0,851,852,5,17,0,0,852,853,
		3,54,27,0,853,73,1,0,0,0,854,857,3,76,38,0,855,857,3,86,43,0,856,854,1,
		0,0,0,856,855,1,0,0,0,857,75,1,0,0,0,858,864,3,78,39,0,859,864,3,84,42,
		0,860,864,3,82,41,0,861,864,5,174,0,0,862,864,5,159,0,0,863,858,1,0,0,
		0,863,859,1,0,0,0,863,860,1,0,0,0,863,861,1,0,0,0,863,862,1,0,0,0,864,
		77,1,0,0,0,865,868,3,80,40,0,866,868,5,158,0,0,867,865,1,0,0,0,867,866,
		1,0,0,0,868,79,1,0,0,0,869,870,7,6,0,0,870,81,1,0,0,0,871,875,5,25,0,0,
		872,873,5,36,0,0,873,874,5,151,0,0,874,876,5,37,0,0,875,872,1,0,0,0,875,
		876,1,0,0,0,876,886,1,0,0,0,877,881,5,38,0,0,878,879,5,36,0,0,879,880,
		5,151,0,0,880,882,5,37,0,0,881,878,1,0,0,0,881,882,1,0,0,0,882,886,1,0,
		0,0,883,886,5,39,0,0,884,886,5,40,0,0,885,871,1,0,0,0,885,877,1,0,0,0,
		885,883,1,0,0,0,885,884,1,0,0,0,886,83,1,0,0,0,887,888,7,7,0,0,888,85,
		1,0,0,0,889,897,3,90,45,0,890,897,3,98,49,0,891,897,3,100,50,0,892,897,
		3,88,44,0,893,897,3,350,175,0,894,897,3,186,93,0,895,897,3,368,184,0,896,
		889,1,0,0,0,896,890,1,0,0,0,896,891,1,0,0,0,896,892,1,0,0,0,896,893,1,
		0,0,0,896,894,1,0,0,0,896,895,1,0,0,0,897,87,1,0,0,0,898,899,3,470,235,
		0,899,900,5,22,0,0,900,902,1,0,0,0,901,898,1,0,0,0,902,905,1,0,0,0,903,
		901,1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,903,1,0,0,0,906,907,3,
		82,41,0,907,89,1,0,0,0,908,912,3,92,46,0,909,912,3,94,47,0,910,912,3,96,
		48,0,911,908,1,0,0,0,911,909,1,0,0,0,911,910,1,0,0,0,912,91,1,0,0,0,913,
		914,3,470,235,0,914,915,5,22,0,0,915,917,1,0,0,0,916,913,1,0,0,0,917,920,
		1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,921,1,0,0,0,920,918,1,0,0,
		0,921,922,3,102,51,0,922,93,1,0,0,0,923,924,3,470,235,0,924,925,5,22,0,
		0,925,927,1,0,0,0,926,923,1,0,0,0,927,930,1,0,0,0,928,926,1,0,0,0,928,
		929,1,0,0,0,929,931,1,0,0,0,930,928,1,0,0,0,931,932,3,104,52,0,932,95,
		1,0,0,0,933,934,3,470,235,0,934,935,5,22,0,0,935,937,1,0,0,0,936,933,1,
		0,0,0,937,940,1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,941,1,0,0,0,
		940,938,1,0,0,0,941,942,3,106,53,0,942,97,1,0,0,0,943,944,3,470,235,0,
		944,945,5,22,0,0,945,947,1,0,0,0,946,943,1,0,0,0,947,950,1,0,0,0,948,946,
		1,0,0,0,948,949,1,0,0,0,949,951,1,0,0,0,950,948,1,0,0,0,951,952,3,108,
		54,0,952,99,1,0,0,0,953,954,3,470,235,0,954,955,5,22,0,0,955,957,1,0,0,
		0,956,953,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,
		961,1,0,0,0,960,958,1,0,0,0,961,962,3,110,55,0,962,101,1,0,0,0,963,964,
		7,8,0,0,964,103,1,0,0,0,965,966,3,2,1,0,966,105,1,0,0,0,967,968,3,2,1,
		0,968,107,1,0,0,0,969,970,3,2,1,0,970,109,1,0,0,0,971,972,3,2,1,0,972,
		111,1,0,0,0,973,977,5,41,0,0,974,975,3,114,57,0,975,976,5,42,0,0,976,978,
		1,0,0,0,977,974,1,0,0,0,978,979,1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,
		0,980,981,1,0,0,0,981,982,5,43,0,0,982,113,1,0,0,0,983,992,3,122,61,0,
		984,992,3,128,64,0,985,992,3,136,68,0,986,992,3,146,73,0,987,992,3,160,
		80,0,988,992,3,176,88,0,989,992,3,178,89,0,990,992,3,116,58,0,991,983,
		1,0,0,0,991,984,1,0,0,0,991,985,1,0,0,0,991,986,1,0,0,0,991,987,1,0,0,
		0,991,988,1,0,0,0,991,989,1,0,0,0,991,990,1,0,0,0,992,115,1,0,0,0,993,
		994,3,118,59,0,994,995,5,34,0,0,995,996,3,120,60,0,996,117,1,0,0,0,997,
		998,3,2,1,0,998,119,1,0,0,0,999,1013,3,124,62,0,1000,1013,3,130,65,0,1001,
		1003,3,76,38,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,
		1007,3,138,69,0,1005,1007,3,140,70,0,1006,1002,1,0,0,0,1006,1005,1,0,0,
		0,1007,1013,1,0,0,0,1008,1013,3,146,73,0,1009,1013,3,160,80,0,1010,1013,
		3,178,89,0,1011,1013,3,176,88,0,1012,999,1,0,0,0,1012,1000,1,0,0,0,1012,
		1006,1,0,0,0,1012,1008,1,0,0,0,1012,1009,1,0,0,0,1012,1010,1,0,0,0,1012,
		1011,1,0,0,0,1013,121,1,0,0,0,1014,1015,3,102,51,0,1015,1016,5,34,0,0,
		1016,1017,3,124,62,0,1017,123,1,0,0,0,1018,1022,3,126,63,0,1019,1020,5,
		34,0,0,1020,1021,5,44,0,0,1021,1023,3,520,260,0,1022,1019,1,0,0,0,1022,
		1023,1,0,0,0,1023,125,1,0,0,0,1024,1027,3,76,38,0,1025,1027,3,92,46,0,
		1026,1024,1,0,0,0,1026,1025,1,0,0,0,1027,127,1,0,0,0,1028,1029,3,104,52,
		0,1029,1030,5,34,0,0,1030,1031,3,130,65,0,1031,129,1,0,0,0,1032,1036,3,
		132,66,0,1033,1034,5,34,0,0,1034,1035,5,44,0,0,1035,1037,3,10,5,0,1036,
		1033,1,0,0,0,1036,1037,1,0,0,0,1037,131,1,0,0,0,1038,1039,3,80,40,0,1039,
		1040,5,45,0,0,1040,1041,3,134,67,0,1041,1042,5,46,0,0,1042,1045,1,0,0,
		0,1043,1045,3,94,47,0,1044,1038,1,0,0,0,1044,1043,1,0,0,0,1045,133,1,0,
		0,0,1046,1047,3,520,260,0,1047,1048,5,47,0,0,1048,1049,3,520,260,0,1049,
		135,1,0,0,0,1050,1051,3,106,53,0,1051,1057,5,34,0,0,1052,1054,3,76,38,
		0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,1058,3,138,
		69,0,1056,1058,3,140,70,0,1057,1053,1,0,0,0,1057,1056,1,0,0,0,1058,137,
		1,0,0,0,1059,1060,5,45,0,0,1060,1065,3,142,71,0,1061,1062,5,48,0,0,1062,
		1064,3,142,71,0,1063,1061,1,0,0,0,1064,1067,1,0,0,0,1065,1063,1,0,0,0,
		1065,1066,1,0,0,0,1066,1068,1,0,0,0,1067,1065,1,0,0,0,1068,1072,5,46,0,
		0,1069,1070,5,34,0,0,1070,1071,5,44,0,0,1071,1073,3,144,72,0,1072,1069,
		1,0,0,0,1072,1073,1,0,0,0,1073,139,1,0,0,0,1074,1075,5,45,0,0,1075,1080,
		3,2,1,0,1076,1077,5,48,0,0,1077,1079,3,2,1,0,1078,1076,1,0,0,0,1079,1082,
		1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,1083,1,0,0,0,1082,1080,
		1,0,0,0,1083,1084,5,46,0,0,1084,1087,1,0,0,0,1085,1087,3,96,48,0,1086,
		1074,1,0,0,0,1086,1085,1,0,0,0,1087,1091,1,0,0,0,1088,1089,5,34,0,0,1089,
		1090,5,44,0,0,1090,1092,3,144,72,0,1091,1088,1,0,0,0,1091,1092,1,0,0,0,
		1092,141,1,0,0,0,1093,1100,3,2,1,0,1094,1095,5,34,0,0,1095,1098,5,44,0,
		0,1096,1099,3,8,4,0,1097,1099,3,520,260,0,1098,1096,1,0,0,0,1098,1097,
		1,0,0,0,1099,1101,1,0,0,0,1100,1094,1,0,0,0,1100,1101,1,0,0,0,1101,143,
		1,0,0,0,1102,1103,3,106,53,0,1103,1104,5,15,0,0,1104,1106,1,0,0,0,1105,
		1102,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,1107,1108,3,2,1,0,1108,
		145,1,0,0,0,1109,1110,3,108,54,0,1110,1111,5,34,0,0,1111,1112,3,148,74,
		0,1112,147,1,0,0,0,1113,1117,3,150,75,0,1114,1115,5,34,0,0,1115,1116,5,
		44,0,0,1116,1118,3,152,76,0,1117,1114,1,0,0,0,1117,1118,1,0,0,0,1118,149,
		1,0,0,0,1119,1135,3,98,49,0,1120,1121,5,49,0,0,1121,1122,5,36,0,0,1122,
		1127,3,134,67,0,1123,1124,5,48,0,0,1124,1126,3,134,67,0,1125,1123,1,0,
		0,0,1126,1129,1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,1130,1,
		0,0,0,1129,1127,1,0,0,0,1130,1131,5,37,0,0,1131,1132,5,50,0,0,1132,1133,
		3,74,37,0,1133,1135,1,0,0,0,1134,1119,1,0,0,0,1134,1120,1,0,0,0,1135,151,
		1,0,0,0,1136,1137,5,36,0,0,1137,1142,3,154,77,0,1138,1139,5,48,0,0,1139,
		1141,3,154,77,0,1140,1138,1,0,0,0,1141,1144,1,0,0,0,1142,1140,1,0,0,0,
		1142,1143,1,0,0,0,1143,1145,1,0,0,0,1144,1142,1,0,0,0,1145,1146,5,37,0,
		0,1146,153,1,0,0,0,1147,1150,3,158,79,0,1148,1150,3,156,78,0,1149,1147,
		1,0,0,0,1149,1148,1,0,0,0,1150,155,1,0,0,0,1151,1152,5,151,0,0,1152,1154,
		5,45,0,0,1153,1155,3,158,79,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,
		1160,1,0,0,0,1156,1157,5,48,0,0,1157,1159,3,158,79,0,1158,1156,1,0,0,0,
		1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,1161,1,0,0,0,1161,1163,1,0,0,
		0,1162,1160,1,0,0,0,1163,1164,5,46,0,0,1164,157,1,0,0,0,1165,1170,3,520,
		260,0,1166,1170,3,144,72,0,1167,1170,3,172,86,0,1168,1170,3,152,76,0,1169,
		1165,1,0,0,0,1169,1166,1,0,0,0,1169,1167,1,0,0,0,1169,1168,1,0,0,0,1170,
		159,1,0,0,0,1171,1172,3,110,55,0,1172,1173,5,34,0,0,1173,1174,3,162,81,
		0,1174,161,1,0,0,0,1175,1178,3,166,83,0,1176,1178,3,164,82,0,1177,1175,
		1,0,0,0,1177,1176,1,0,0,0,1178,163,1,0,0,0,1179,1183,3,100,50,0,1180,1181,
		5,34,0,0,1181,1182,5,44,0,0,1182,1184,3,172,86,0,1183,1180,1,0,0,0,1183,
		1184,1,0,0,0,1184,165,1,0,0,0,1185,1187,5,51,0,0,1186,1188,5,52,0,0,1187,
		1186,1,0,0,0,1187,1188,1,0,0,0,1188,1192,1,0,0,0,1189,1190,3,168,84,0,
		1190,1191,5,42,0,0,1191,1193,1,0,0,0,1192,1189,1,0,0,0,1193,1194,1,0,0,
		0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,1196,1,0,0,0,1196,1197,5,53,
		0,0,1197,167,1,0,0,0,1198,1209,3,170,85,0,1199,1201,3,284,142,0,1200,1202,
		3,542,271,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,1202,1204,1,0,0,0,1203,
		1199,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1210,5,34,0,0,1206,
		1207,3,286,143,0,1207,1208,5,34,0,0,1208,1210,1,0,0,0,1209,1203,1,0,0,
		0,1209,1206,1,0,0,0,1210,1216,1,0,0,0,1211,1217,3,124,62,0,1212,1217,3,
		130,65,0,1213,1217,3,140,70,0,1214,1217,3,148,74,0,1215,1217,3,164,82,
		0,1216,1211,1,0,0,0,1216,1212,1,0,0,0,1216,1213,1,0,0,0,1216,1214,1,0,
		0,0,1216,1215,1,0,0,0,1217,169,1,0,0,0,1218,1219,3,2,1,0,1219,171,1,0,
		0,0,1220,1221,5,45,0,0,1221,1226,3,174,87,0,1222,1223,5,48,0,0,1223,1225,
		3,174,87,0,1224,1222,1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1226,
		1227,1,0,0,0,1227,1229,1,0,0,0,1228,1226,1,0,0,0,1229,1230,5,46,0,0,1230,
		173,1,0,0,0,1231,1232,3,170,85,0,1232,1233,5,34,0,0,1233,1239,5,44,0,0,
		1234,1240,3,520,260,0,1235,1240,3,144,72,0,1236,1240,3,152,76,0,1237,1240,
		3,172,86,0,1238,1240,3,190,95,0,1239,1234,1,0,0,0,1239,1235,1,0,0,0,1239,
		1236,1,0,0,0,1239,1237,1,0,0,0,1239,1238,1,0,0,0,1240,175,1,0,0,0,1241,
		1242,3,82,41,0,1242,1243,5,34,0,0,1243,1247,3,82,41,0,1244,1245,5,34,0,
		0,1245,1246,5,44,0,0,1246,1248,3,26,13,0,1247,1244,1,0,0,0,1247,1248,1,
		0,0,0,1248,177,1,0,0,0,1249,1250,3,184,92,0,1250,1251,5,34,0,0,1251,1252,
		3,180,90,0,1252,179,1,0,0,0,1253,1257,3,182,91,0,1254,1255,5,34,0,0,1255,
		1256,5,44,0,0,1256,1258,3,190,95,0,1257,1254,1,0,0,0,1257,1258,1,0,0,0,
		1258,181,1,0,0,0,1259,1261,5,54,0,0,1260,1259,1,0,0,0,1261,1262,1,0,0,
		0,1262,1260,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1265,3,74,
		37,0,1265,183,1,0,0,0,1266,1267,3,2,1,0,1267,185,1,0,0,0,1268,1269,3,470,
		235,0,1269,1270,5,22,0,0,1270,1272,1,0,0,0,1271,1268,1,0,0,0,1272,1275,
		1,0,0,0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,0,1275,1273,
		1,0,0,0,1276,1277,3,184,92,0,1277,187,1,0,0,0,1278,1279,3,2,1,0,1279,189,
		1,0,0,0,1280,1283,3,192,96,0,1281,1283,5,170,0,0,1282,1280,1,0,0,0,1282,
		1281,1,0,0,0,1283,191,1,0,0,0,1284,1285,5,55,0,0,1285,1289,5,45,0,0,1286,
		1290,3,200,100,0,1287,1290,3,244,122,0,1288,1290,3,354,177,0,1289,1286,
		1,0,0,0,1289,1287,1,0,0,0,1289,1288,1,0,0,0,1290,1291,1,0,0,0,1291,1292,
		5,46,0,0,1292,193,1,0,0,0,1293,1294,3,188,94,0,1294,1295,5,34,0,0,1295,
		1299,5,44,0,0,1296,1300,3,188,94,0,1297,1300,3,196,98,0,1298,1300,3,190,
		95,0,1299,1296,1,0,0,0,1299,1297,1,0,0,0,1299,1298,1,0,0,0,1300,195,1,
		0,0,0,1301,1303,3,188,94,0,1302,1304,5,56,0,0,1303,1302,1,0,0,0,1304,1305,
		1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,197,1,0,0,0,1307,1310,
		5,154,0,0,1308,1310,3,200,100,0,1309,1307,1,0,0,0,1309,1308,1,0,0,0,1310,
		199,1,0,0,0,1311,1312,5,57,0,0,1312,1321,5,22,0,0,1313,1314,3,470,235,
		0,1314,1315,5,22,0,0,1315,1317,1,0,0,0,1316,1313,1,0,0,0,1317,1318,1,0,
		0,0,1318,1316,1,0,0,0,1318,1319,1,0,0,0,1319,1321,1,0,0,0,1320,1311,1,
		0,0,0,1320,1316,1,0,0,0,1320,1321,1,0,0,0,1321,1324,1,0,0,0,1322,1325,
		3,202,101,0,1323,1325,3,206,103,0,1324,1322,1,0,0,0,1324,1323,1,0,0,0,
		1325,201,1,0,0,0,1326,1329,3,204,102,0,1327,1329,3,196,98,0,1328,1326,
		1,0,0,0,1328,1327,1,0,0,0,1329,203,1,0,0,0,1330,1331,3,2,1,0,1331,205,
		1,0,0,0,1332,1335,3,202,101,0,1333,1336,3,208,104,0,1334,1336,3,212,106,
		0,1335,1333,1,0,0,0,1335,1334,1,0,0,0,1336,1337,1,0,0,0,1337,1335,1,0,
		0,0,1337,1338,1,0,0,0,1338,207,1,0,0,0,1339,1340,5,36,0,0,1340,1345,3,
		210,105,0,1341,1342,5,48,0,0,1342,1344,3,210,105,0,1343,1341,1,0,0,0,1344,
		1347,1,0,0,0,1345,1343,1,0,0,0,1345,1346,1,0,0,0,1346,1348,1,0,0,0,1347,
		1345,1,0,0,0,1348,1349,5,37,0,0,1349,209,1,0,0,0,1350,1351,3,518,259,0,
		1351,211,1,0,0,0,1352,1353,5,22,0,0,1353,1354,3,214,107,0,1354,213,1,0,
		0,0,1355,1356,3,202,101,0,1356,215,1,0,0,0,1357,1359,5,58,0,0,1358,1360,
		7,9,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1366,1,0,0,0,1361,1362,
		3,218,109,0,1362,1363,5,42,0,0,1363,1365,1,0,0,0,1364,1361,1,0,0,0,1365,
		1368,1,0,0,0,1366,1364,1,0,0,0,1366,1367,1,0,0,0,1367,1369,1,0,0,0,1368,
		1366,1,0,0,0,1369,1370,5,61,0,0,1370,217,1,0,0,0,1371,1375,3,222,111,0,
		1372,1375,3,220,110,0,1373,1375,3,234,117,0,1374,1371,1,0,0,0,1374,1372,
		1,0,0,0,1374,1373,1,0,0,0,1375,219,1,0,0,0,1376,1377,3,228,114,0,1377,
		1378,5,34,0,0,1378,1379,5,177,0,0,1379,1380,7,10,0,0,1380,221,1,0,0,0,
		1381,1382,3,228,114,0,1382,1390,5,34,0,0,1383,1391,3,124,62,0,1384,1391,
		3,288,144,0,1385,1391,3,180,90,0,1386,1391,3,230,115,0,1387,1391,3,236,
		118,0,1388,1391,3,240,120,0,1389,1391,3,360,180,0,1390,1383,1,0,0,0,1390,
		1384,1,0,0,0,1390,1385,1,0,0,0,1390,1386,1,0,0,0,1390,1387,1,0,0,0,1390,
		1388,1,0,0,0,1390,1389,1,0,0,0,1391,1400,1,0,0,0,1392,1394,3,204,102,0,
		1393,1392,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1396,3,284,
		142,0,1396,1397,5,34,0,0,1397,1398,3,282,141,0,1398,1400,1,0,0,0,1399,
		1381,1,0,0,0,1399,1393,1,0,0,0,1400,223,1,0,0,0,1401,1402,3,228,114,0,
		1402,1403,5,34,0,0,1403,1404,3,182,91,0,1404,225,1,0,0,0,1405,1406,3,228,
		114,0,1406,1407,5,34,0,0,1407,1408,3,368,184,0,1408,227,1,0,0,0,1409,1414,
		3,204,102,0,1410,1411,5,48,0,0,1411,1413,3,204,102,0,1412,1410,1,0,0,0,
		1413,1416,1,0,0,0,1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,229,1,0,0,0,
		1416,1414,1,0,0,0,1417,1418,3,148,74,0,1418,231,1,0,0,0,1419,1420,5,49,
		0,0,1420,1421,5,36,0,0,1421,1426,5,64,0,0,1422,1423,5,48,0,0,1423,1425,
		5,64,0,0,1424,1422,1,0,0,0,1425,1428,1,0,0,0,1426,1424,1,0,0,0,1426,1427,
		1,0,0,0,1427,1429,1,0,0,0,1428,1426,1,0,0,0,1429,1430,5,37,0,0,1430,1431,
		5,50,0,0,1431,1432,3,74,37,0,1432,233,1,0,0,0,1433,1434,3,228,114,0,1434,
		1435,5,34,0,0,1435,1436,3,232,116,0,1436,235,1,0,0,0,1437,1438,3,228,114,
		0,1438,1439,5,34,0,0,1439,1440,3,164,82,0,1440,237,1,0,0,0,1441,1446,3,
		242,121,0,1442,1443,5,48,0,0,1443,1445,3,242,121,0,1444,1442,1,0,0,0,1445,
		1448,1,0,0,0,1446,1444,1,0,0,0,1446,1447,1,0,0,0,1447,1449,1,0,0,0,1448,
		1446,1,0,0,0,1449,1450,5,34,0,0,1450,1451,3,320,160,0,1451,239,1,0,0,0,
		1452,1456,3,238,119,0,1453,1454,5,34,0,0,1454,1455,5,44,0,0,1455,1457,
		3,172,86,0,1456,1453,1,0,0,0,1456,1457,1,0,0,0,1457,241,1,0,0,0,1458,1459,
		3,2,1,0,1459,243,1,0,0,0,1460,1461,3,470,235,0,1461,1462,5,22,0,0,1462,
		1464,1,0,0,0,1463,1460,1,0,0,0,1464,1467,1,0,0,0,1465,1463,1,0,0,0,1465,
		1466,1,0,0,0,1466,1468,1,0,0,0,1467,1465,1,0,0,0,1468,1472,3,242,121,0,
		1469,1471,5,56,0,0,1470,1469,1,0,0,0,1471,1474,1,0,0,0,1472,1470,1,0,0,
		0,1472,1473,1,0,0,0,1473,245,1,0,0,0,1474,1472,1,0,0,0,1475,1477,5,65,
		0,0,1476,1478,7,9,0,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1484,1,
		0,0,0,1479,1480,3,248,124,0,1480,1481,5,42,0,0,1481,1483,1,0,0,0,1482,
		1479,1,0,0,0,1483,1486,1,0,0,0,1484,1482,1,0,0,0,1484,1485,1,0,0,0,1485,
		1487,1,0,0,0,1486,1484,1,0,0,0,1487,1488,5,61,0,0,1488,247,1,0,0,0,1489,
		1492,3,222,111,0,1490,1492,3,234,117,0,1491,1489,1,0,0,0,1491,1490,1,0,
		0,0,1492,249,1,0,0,0,1493,1499,5,66,0,0,1494,1495,3,252,126,0,1495,1496,
		5,42,0,0,1496,1498,1,0,0,0,1497,1494,1,0,0,0,1498,1501,1,0,0,0,1499,1497,
		1,0,0,0,1499,1500,1,0,0,0,1500,1502,1,0,0,0,1501,1499,1,0,0,0,1502,1503,
		5,61,0,0,1503,251,1,0,0,0,1504,1508,3,254,127,0,1505,1508,3,234,117,0,
		1506,1508,3,238,119,0,1507,1504,1,0,0,0,1507,1505,1,0,0,0,1507,1506,1,
		0,0,0,1508,253,1,0,0,0,1509,1510,3,228,114,0,1510,1515,5,34,0,0,1511,1516,
		3,126,63,0,1512,1516,3,288,144,0,1513,1516,3,256,128,0,1514,1516,3,258,
		129,0,1515,1511,1,0,0,0,1515,1512,1,0,0,0,1515,1513,1,0,0,0,1515,1514,
		1,0,0,0,1516,255,1,0,0,0,1517,1518,3,228,114,0,1518,1519,5,34,0,0,1519,
		1520,3,150,75,0,1520,257,1,0,0,0,1521,1522,3,228,114,0,1522,1523,5,34,
		0,0,1523,1524,3,100,50,0,1524,259,1,0,0,0,1525,1527,5,67,0,0,1526,1528,
		5,68,0,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,1530,1,0,0,0,1529,1531,
		5,160,0,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,1531,1537,1,0,0,0,1532,1533,
		3,222,111,0,1533,1534,5,42,0,0,1534,1536,1,0,0,0,1535,1532,1,0,0,0,1536,
		1539,1,0,0,0,1537,1535,1,0,0,0,1537,1538,1,0,0,0,1538,1540,1,0,0,0,1539,
		1537,1,0,0,0,1540,1541,5,61,0,0,1541,261,1,0,0,0,1542,1543,5,67,0,0,1543,
		1545,5,59,0,0,1544,1546,5,160,0,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,
		1546,1552,1,0,0,0,1547,1548,3,222,111,0,1548,1549,5,42,0,0,1549,1551,1,
		0,0,0,1550,1547,1,0,0,0,1551,1554,1,0,0,0,1552,1550,1,0,0,0,1552,1553,
		1,0,0,0,1553,1555,1,0,0,0,1554,1552,1,0,0,0,1555,1556,5,61,0,0,1556,263,
		1,0,0,0,1557,1559,5,67,0,0,1558,1560,7,11,0,0,1559,1558,1,0,0,0,1559,1560,
		1,0,0,0,1560,1566,1,0,0,0,1561,1562,3,266,133,0,1562,1563,5,42,0,0,1563,
		1565,1,0,0,0,1564,1561,1,0,0,0,1565,1568,1,0,0,0,1566,1564,1,0,0,0,1566,
		1567,1,0,0,0,1567,1569,1,0,0,0,1568,1566,1,0,0,0,1569,1570,5,61,0,0,1570,
		265,1,0,0,0,1571,1573,3,204,102,0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,
		1573,1574,1,0,0,0,1574,1575,3,284,142,0,1575,1576,5,34,0,0,1576,1577,3,
		282,141,0,1577,267,1,0,0,0,1578,1588,5,69,0,0,1579,1583,3,254,127,0,1580,
		1583,3,224,112,0,1581,1583,3,226,113,0,1582,1579,1,0,0,0,1582,1580,1,0,
		0,0,1582,1581,1,0,0,0,1583,1584,1,0,0,0,1584,1585,5,42,0,0,1585,1587,1,
		0,0,0,1586,1582,1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,1588,1589,
		1,0,0,0,1589,1591,1,0,0,0,1590,1588,1,0,0,0,1591,1592,5,61,0,0,1592,269,
		1,0,0,0,1593,1595,5,70,0,0,1594,1596,5,68,0,0,1595,1594,1,0,0,0,1595,1596,
		1,0,0,0,1596,1602,1,0,0,0,1597,1598,3,272,136,0,1598,1599,5,42,0,0,1599,
		1601,1,0,0,0,1600,1597,1,0,0,0,1601,1604,1,0,0,0,1602,1600,1,0,0,0,1602,
		1603,1,0,0,0,1603,1605,1,0,0,0,1604,1602,1,0,0,0,1605,1606,5,61,0,0,1606,
		271,1,0,0,0,1607,1608,3,274,137,0,1608,1614,5,34,0,0,1609,1615,3,126,63,
		0,1610,1615,3,150,75,0,1611,1615,3,100,50,0,1612,1615,3,320,160,0,1613,
		1615,3,186,93,0,1614,1609,1,0,0,0,1614,1610,1,0,0,0,1614,1611,1,0,0,0,
		1614,1612,1,0,0,0,1614,1613,1,0,0,0,1615,273,1,0,0,0,1616,1617,3,2,1,0,
		1617,275,1,0,0,0,1618,1620,5,71,0,0,1619,1621,7,12,0,0,1620,1619,1,0,0,
		0,1620,1621,1,0,0,0,1621,1627,1,0,0,0,1622,1623,3,278,139,0,1623,1624,
		5,42,0,0,1624,1626,1,0,0,0,1625,1622,1,0,0,0,1626,1629,1,0,0,0,1627,1625,
		1,0,0,0,1627,1628,1,0,0,0,1628,1630,1,0,0,0,1629,1627,1,0,0,0,1630,1631,
		5,61,0,0,1631,277,1,0,0,0,1632,1633,3,280,140,0,1633,1636,5,34,0,0,1634,
		1637,3,282,141,0,1635,1637,3,320,160,0,1636,1634,1,0,0,0,1636,1635,1,0,
		0,0,1637,279,1,0,0,0,1638,1643,3,274,137,0,1639,1640,5,48,0,0,1640,1642,
		3,274,137,0,1641,1639,1,0,0,0,1642,1645,1,0,0,0,1643,1641,1,0,0,0,1643,
		1644,1,0,0,0,1644,1650,1,0,0,0,1645,1643,1,0,0,0,1646,1647,3,274,137,0,
		1647,1648,3,284,142,0,1648,1650,1,0,0,0,1649,1638,1,0,0,0,1649,1646,1,
		0,0,0,1650,281,1,0,0,0,1651,1657,3,124,62,0,1652,1657,3,148,74,0,1653,
		1657,3,164,82,0,1654,1657,3,292,146,0,1655,1657,3,296,148,0,1656,1651,
		1,0,0,0,1656,1652,1,0,0,0,1656,1653,1,0,0,0,1656,1654,1,0,0,0,1656,1655,
		1,0,0,0,1657,283,1,0,0,0,1658,1659,5,72,0,0,1659,1660,5,154,0,0,1660,285,
		1,0,0,0,1661,1662,5,72,0,0,1662,1663,5,155,0,0,1663,1664,5,64,0,0,1664,
		287,1,0,0,0,1665,1668,3,290,145,0,1666,1668,3,294,147,0,1667,1665,1,0,
		0,0,1667,1666,1,0,0,0,1668,289,1,0,0,0,1669,1670,3,228,114,0,1670,1671,
		5,34,0,0,1671,1672,3,292,146,0,1672,291,1,0,0,0,1673,1677,5,25,0,0,1674,
		1675,5,36,0,0,1675,1676,5,151,0,0,1676,1678,5,37,0,0,1677,1674,1,0,0,0,
		1677,1678,1,0,0,0,1678,1682,1,0,0,0,1679,1680,5,34,0,0,1680,1681,5,44,
		0,0,1681,1683,5,152,0,0,1682,1679,1,0,0,0,1682,1683,1,0,0,0,1683,293,1,
		0,0,0,1684,1685,3,228,114,0,1685,1686,5,34,0,0,1686,1687,3,296,148,0,1687,
		295,1,0,0,0,1688,1692,5,38,0,0,1689,1690,5,36,0,0,1690,1691,5,151,0,0,
		1691,1693,5,37,0,0,1692,1689,1,0,0,0,1692,1693,1,0,0,0,1693,1697,1,0,0,
		0,1694,1695,5,34,0,0,1695,1696,5,44,0,0,1696,1698,5,153,0,0,1697,1694,
		1,0,0,0,1697,1698,1,0,0,0,1698,297,1,0,0,0,1699,1701,5,67,0,0,1700,1702,
		7,9,0,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,1706,1,0,0,0,1703,1705,
		3,300,150,0,1704,1703,1,0,0,0,1705,1708,1,0,0,0,1706,1704,1,0,0,0,1706,
		1707,1,0,0,0,1707,1709,1,0,0,0,1708,1706,1,0,0,0,1709,1710,5,61,0,0,1710,
		299,1,0,0,0,1711,1712,3,204,102,0,1712,1713,5,72,0,0,1713,1714,5,73,0,
		0,1714,1715,7,13,0,0,1715,1716,5,64,0,0,1716,1717,5,34,0,0,1717,1718,3,
		302,151,0,1718,1719,5,42,0,0,1719,301,1,0,0,0,1720,1730,3,126,63,0,1721,
		1730,3,150,75,0,1722,1730,3,100,50,0,1723,1727,7,14,0,0,1724,1725,5,36,
		0,0,1725,1726,5,151,0,0,1726,1728,5,37,0,0,1727,1724,1,0,0,0,1727,1728,
		1,0,0,0,1728,1730,1,0,0,0,1729,1720,1,0,0,0,1729,1721,1,0,0,0,1729,1722,
		1,0,0,0,1729,1723,1,0,0,0,1730,303,1,0,0,0,1731,1734,5,163,0,0,1732,1734,
		3,308,154,0,1733,1731,1,0,0,0,1733,1732,1,0,0,0,1734,305,1,0,0,0,1735,
		1736,3,470,235,0,1736,1737,5,22,0,0,1737,1739,1,0,0,0,1738,1735,1,0,0,
		0,1739,1742,1,0,0,0,1740,1738,1,0,0,0,1740,1741,1,0,0,0,1741,1743,1,0,
		0,0,1742,1740,1,0,0,0,1743,1744,3,304,152,0,1744,307,1,0,0,0,1745,1746,
		3,2,1,0,1746,309,1,0,0,0,1747,1748,5,74,0,0,1748,1751,3,308,154,0,1749,
		1750,5,34,0,0,1750,1752,3,74,37,0,1751,1749,1,0,0,0,1751,1752,1,0,0,0,
		1752,1756,1,0,0,0,1753,1755,3,472,236,0,1754,1753,1,0,0,0,1755,1758,1,
		0,0,0,1756,1754,1,0,0,0,1756,1757,1,0,0,0,1757,1764,1,0,0,0,1758,1756,
		1,0,0,0,1759,1763,3,312,156,0,1760,1763,3,314,157,0,1761,1763,3,268,134,
		0,1762,1759,1,0,0,0,1762,1760,1,0,0,0,1762,1761,1,0,0,0,1763,1766,1,0,
		0,0,1764,1762,1,0,0,0,1764,1765,1,0,0,0,1765,1768,1,0,0,0,1766,1764,1,
		0,0,0,1767,1769,3,316,158,0,1768,1767,1,0,0,0,1768,1769,1,0,0,0,1769,1770,
		1,0,0,0,1770,1771,5,75,0,0,1771,311,1,0,0,0,1772,1776,3,216,108,0,1773,
		1776,3,246,123,0,1774,1776,3,250,125,0,1775,1772,1,0,0,0,1775,1773,1,0,
		0,0,1775,1774,1,0,0,0,1776,313,1,0,0,0,1777,1780,3,270,135,0,1778,1780,
		3,260,130,0,1779,1777,1,0,0,0,1779,1778,1,0,0,0,1780,315,1,0,0,0,1781,
		1787,3,584,292,0,1782,1787,3,586,293,0,1783,1787,3,546,273,0,1784,1787,
		3,476,238,0,1785,1787,5,173,0,0,1786,1781,1,0,0,0,1786,1782,1,0,0,0,1786,
		1783,1,0,0,0,1786,1784,1,0,0,0,1786,1785,1,0,0,0,1787,317,1,0,0,0,1788,
		1791,5,164,0,0,1789,1791,3,322,161,0,1790,1788,1,0,0,0,1790,1789,1,0,0,
		0,1791,319,1,0,0,0,1792,1793,3,470,235,0,1793,1794,5,22,0,0,1794,1796,
		1,0,0,0,1795,1792,1,0,0,0,1796,1799,1,0,0,0,1797,1795,1,0,0,0,1797,1798,
		1,0,0,0,1798,1800,1,0,0,0,1799,1797,1,0,0,0,1800,1801,3,318,159,0,1801,
		321,1,0,0,0,1802,1803,3,2,1,0,1803,323,1,0,0,0,1804,1806,5,76,0,0,1805,
		1807,7,15,0,0,1806,1805,1,0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,1808,
		1812,3,322,161,0,1809,1811,3,472,236,0,1810,1809,1,0,0,0,1811,1814,1,0,
		0,0,1812,1810,1,0,0,0,1812,1813,1,0,0,0,1813,1820,1,0,0,0,1814,1812,1,
		0,0,0,1815,1818,5,79,0,0,1816,1819,3,320,160,0,1817,1819,3,350,175,0,1818,
		1816,1,0,0,0,1818,1817,1,0,0,0,1819,1821,1,0,0,0,1820,1815,1,0,0,0,1820,
		1821,1,0,0,0,1821,1824,1,0,0,0,1822,1823,5,80,0,0,1823,1825,3,364,182,
		0,1824,1822,1,0,0,0,1824,1825,1,0,0,0,1825,1832,1,0,0,0,1826,1831,3,326,
		163,0,1827,1831,3,314,157,0,1828,1831,3,268,134,0,1829,1831,3,336,168,
		0,1830,1826,1,0,0,0,1830,1827,1,0,0,0,1830,1828,1,0,0,0,1830,1829,1,0,
		0,0,1831,1834,1,0,0,0,1832,1830,1,0,0,0,1832,1833,1,0,0,0,1833,1838,1,
		0,0,0,1834,1832,1,0,0,0,1835,1837,3,342,171,0,1836,1835,1,0,0,0,1837,1840,
		1,0,0,0,1838,1836,1,0,0,0,1838,1839,1,0,0,0,1839,1842,1,0,0,0,1840,1838,
		1,0,0,0,1841,1843,3,340,170,0,1842,1841,1,0,0,0,1842,1843,1,0,0,0,1843,
		1844,1,0,0,0,1844,1845,5,81,0,0,1845,325,1,0,0,0,1846,1850,3,328,164,0,
		1847,1850,3,332,166,0,1848,1850,3,250,125,0,1849,1846,1,0,0,0,1849,1847,
		1,0,0,0,1849,1848,1,0,0,0,1850,327,1,0,0,0,1851,1853,5,58,0,0,1852,1854,
		7,9,0,0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,1860,1,0,0,0,1855,1856,
		3,330,165,0,1856,1857,5,42,0,0,1857,1859,1,0,0,0,1858,1855,1,0,0,0,1859,
		1862,1,0,0,0,1860,1858,1,0,0,0,1860,1861,1,0,0,0,1861,1863,1,0,0,0,1862,
		1860,1,0,0,0,1863,1864,5,61,0,0,1864,329,1,0,0,0,1865,1869,3,222,111,0,
		1866,1869,3,220,110,0,1867,1869,3,234,117,0,1868,1865,1,0,0,0,1868,1866,
		1,0,0,0,1868,1867,1,0,0,0,1869,331,1,0,0,0,1870,1872,5,65,0,0,1871,1873,
		7,9,0,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1879,1,0,0,0,1874,1875,
		3,334,167,0,1875,1876,5,42,0,0,1876,1878,1,0,0,0,1877,1874,1,0,0,0,1878,
		1881,1,0,0,0,1879,1877,1,0,0,0,1879,1880,1,0,0,0,1880,1882,1,0,0,0,1881,
		1879,1,0,0,0,1882,1883,5,61,0,0,1883,333,1,0,0,0,1884,1887,3,222,111,0,
		1885,1887,3,234,117,0,1886,1884,1,0,0,0,1886,1885,1,0,0,0,1887,335,1,0,
		0,0,1888,1892,3,262,131,0,1889,1892,3,338,169,0,1890,1892,3,298,149,0,
		1891,1888,1,0,0,0,1891,1889,1,0,0,0,1891,1890,1,0,0,0,1892,337,1,0,0,0,
		1893,1894,5,67,0,0,1894,1896,5,60,0,0,1895,1897,5,160,0,0,1896,1895,1,
		0,0,0,1896,1897,1,0,0,0,1897,1903,1,0,0,0,1898,1899,3,222,111,0,1899,1900,
		5,42,0,0,1900,1902,1,0,0,0,1901,1898,1,0,0,0,1902,1905,1,0,0,0,1903,1901,
		1,0,0,0,1903,1904,1,0,0,0,1904,1906,1,0,0,0,1905,1903,1,0,0,0,1906,1907,
		5,61,0,0,1907,339,1,0,0,0,1908,1915,3,382,191,0,1909,1915,3,584,292,0,
		1910,1915,3,586,293,0,1911,1915,3,476,238,0,1912,1915,3,546,273,0,1913,
		1915,5,173,0,0,1914,1908,1,0,0,0,1914,1909,1,0,0,0,1914,1910,1,0,0,0,1914,
		1911,1,0,0,0,1914,1912,1,0,0,0,1914,1913,1,0,0,0,1915,341,1,0,0,0,1916,
		1918,5,82,0,0,1917,1919,5,160,0,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,
		1919,1921,1,0,0,0,1920,1922,7,15,0,0,1921,1920,1,0,0,0,1921,1922,1,0,0,
		0,1922,1924,1,0,0,0,1923,1925,5,83,0,0,1924,1923,1,0,0,0,1924,1925,1,0,
		0,0,1925,1926,1,0,0,0,1926,1929,3,344,172,0,1927,1928,5,34,0,0,1928,1930,
		3,74,37,0,1929,1927,1,0,0,0,1929,1930,1,0,0,0,1930,1936,1,0,0,0,1931,1935,
		3,312,156,0,1932,1935,3,314,157,0,1933,1935,3,268,134,0,1934,1931,1,0,
		0,0,1934,1932,1,0,0,0,1934,1933,1,0,0,0,1935,1938,1,0,0,0,1936,1934,1,
		0,0,0,1936,1937,1,0,0,0,1937,1939,1,0,0,0,1938,1936,1,0,0,0,1939,1940,
		3,316,158,0,1940,1941,5,84,0,0,1941,343,1,0,0,0,1942,1943,3,2,1,0,1943,
		345,1,0,0,0,1944,1946,5,85,0,0,1945,1947,7,15,0,0,1946,1945,1,0,0,0,1946,
		1947,1,0,0,0,1947,1948,1,0,0,0,1948,1952,3,348,174,0,1949,1951,3,472,236,
		0,1950,1949,1,0,0,0,1951,1954,1,0,0,0,1952,1950,1,0,0,0,1952,1953,1,0,
		0,0,1953,1957,1,0,0,0,1954,1952,1,0,0,0,1955,1956,5,79,0,0,1956,1958,3,
		350,175,0,1957,1955,1,0,0,0,1957,1958,1,0,0,0,1958,1961,1,0,0,0,1959,1960,
		5,80,0,0,1960,1962,3,364,182,0,1961,1959,1,0,0,0,1961,1962,1,0,0,0,1962,
		1967,1,0,0,0,1963,1966,3,314,157,0,1964,1966,3,336,168,0,1965,1963,1,0,
		0,0,1965,1964,1,0,0,0,1966,1969,1,0,0,0,1967,1965,1,0,0,0,1967,1968,1,
		0,0,0,1968,1973,1,0,0,0,1969,1967,1,0,0,0,1970,1972,3,342,171,0,1971,1970,
		1,0,0,0,1972,1975,1,0,0,0,1973,1971,1,0,0,0,1973,1974,1,0,0,0,1974,1976,
		1,0,0,0,1975,1973,1,0,0,0,1976,1977,5,86,0,0,1977,347,1,0,0,0,1978,1979,
		3,2,1,0,1979,349,1,0,0,0,1980,1981,3,470,235,0,1981,1982,5,22,0,0,1982,
		1984,1,0,0,0,1983,1980,1,0,0,0,1984,1987,1,0,0,0,1985,1983,1,0,0,0,1985,
		1986,1,0,0,0,1986,1988,1,0,0,0,1987,1985,1,0,0,0,1988,1989,3,348,174,0,
		1989,351,1,0,0,0,1990,1991,3,2,1,0,1991,353,1,0,0,0,1992,1993,3,470,235,
		0,1993,1994,5,22,0,0,1994,1996,1,0,0,0,1995,1992,1,0,0,0,1996,1999,1,0,
		0,0,1997,1995,1,0,0,0,1997,1998,1,0,0,0,1998,2000,1,0,0,0,1999,1997,1,
		0,0,0,2000,2004,3,352,176,0,2001,2003,5,56,0,0,2002,2001,1,0,0,0,2003,
		2006,1,0,0,0,2004,2002,1,0,0,0,2004,2005,1,0,0,0,2005,355,1,0,0,0,2006,
		2004,1,0,0,0,2007,2008,5,87,0,0,2008,2012,3,366,183,0,2009,2011,3,472,
		236,0,2010,2009,1,0,0,0,2011,2014,1,0,0,0,2012,2010,1,0,0,0,2012,2013,
		1,0,0,0,2013,2017,1,0,0,0,2014,2012,1,0,0,0,2015,2016,5,79,0,0,2016,2018,
		3,364,182,0,2017,2015,1,0,0,0,2017,2018,1,0,0,0,2018,2022,1,0,0,0,2019,
		2021,3,358,179,0,2020,2019,1,0,0,0,2021,2024,1,0,0,0,2022,2020,1,0,0,0,
		2022,2023,1,0,0,0,2023,2025,1,0,0,0,2024,2022,1,0,0,0,2025,2026,5,88,0,
		0,2026,357,1,0,0,0,2027,2028,5,82,0,0,2028,2031,3,344,172,0,2029,2030,
		5,34,0,0,2030,2032,3,74,37,0,2031,2029,1,0,0,0,2031,2032,1,0,0,0,2032,
		2036,1,0,0,0,2033,2035,3,312,156,0,2034,2033,1,0,0,0,2035,2038,1,0,0,0,
		2036,2034,1,0,0,0,2036,2037,1,0,0,0,2037,2039,1,0,0,0,2038,2036,1,0,0,
		0,2039,2040,5,84,0,0,2040,359,1,0,0,0,2041,2045,3,228,114,0,2042,2043,
		5,34,0,0,2043,2044,5,44,0,0,2044,2046,3,362,181,0,2045,2042,1,0,0,0,2045,
		2046,1,0,0,0,2046,361,1,0,0,0,2047,2052,3,200,100,0,2048,2052,3,244,122,
		0,2049,2052,3,354,177,0,2050,2052,5,170,0,0,2051,2047,1,0,0,0,2051,2048,
		1,0,0,0,2051,2049,1,0,0,0,2051,2050,1,0,0,0,2052,363,1,0,0,0,2053,2058,
		3,368,184,0,2054,2055,5,48,0,0,2055,2057,3,368,184,0,2056,2054,1,0,0,0,
		2057,2060,1,0,0,0,2058,2056,1,0,0,0,2058,2059,1,0,0,0,2059,365,1,0,0,0,
		2060,2058,1,0,0,0,2061,2062,3,2,1,0,2062,367,1,0,0,0,2063,2064,3,470,235,
		0,2064,2065,5,22,0,0,2065,2067,1,0,0,0,2066,2063,1,0,0,0,2067,2070,1,0,
		0,0,2068,2066,1,0,0,0,2068,2069,1,0,0,0,2069,2071,1,0,0,0,2070,2068,1,
		0,0,0,2071,2072,3,366,183,0,2072,369,1,0,0,0,2073,2074,3,2,1,0,2074,371,
		1,0,0,0,2075,2076,5,89,0,0,2076,2085,3,374,187,0,2077,2084,3,312,156,0,
		2078,2084,3,314,157,0,2079,2084,3,268,134,0,2080,2084,3,336,168,0,2081,
		2084,3,264,132,0,2082,2084,3,378,189,0,2083,2077,1,0,0,0,2083,2078,1,0,
		0,0,2083,2079,1,0,0,0,2083,2080,1,0,0,0,2083,2081,1,0,0,0,2083,2082,1,
		0,0,0,2084,2087,1,0,0,0,2085,2083,1,0,0,0,2085,2086,1,0,0,0,2086,2089,
		1,0,0,0,2087,2085,1,0,0,0,2088,2090,3,340,170,0,2089,2088,1,0,0,0,2089,
		2090,1,0,0,0,2090,2091,1,0,0,0,2091,2092,5,90,0,0,2092,373,1,0,0,0,2093,
		2094,3,2,1,0,2094,375,1,0,0,0,2095,2096,3,470,235,0,2096,2097,5,22,0,0,
		2097,2099,1,0,0,0,2098,2095,1,0,0,0,2099,2102,1,0,0,0,2100,2098,1,0,0,
		0,2100,2101,1,0,0,0,2101,2103,1,0,0,0,2102,2100,1,0,0,0,2103,2104,3,374,
		187,0,2104,377,1,0,0,0,2105,2111,5,91,0,0,2106,2107,3,380,190,0,2107,2108,
		5,42,0,0,2108,2110,1,0,0,0,2109,2106,1,0,0,0,2110,2113,1,0,0,0,2111,2109,
		1,0,0,0,2111,2112,1,0,0,0,2112,2114,1,0,0,0,2113,2111,1,0,0,0,2114,2115,
		5,61,0,0,2115,379,1,0,0,0,2116,2117,3,432,216,0,2117,2118,5,34,0,0,2118,
		2120,3,200,100,0,2119,2121,3,542,271,0,2120,2119,1,0,0,0,2120,2121,1,0,
		0,0,2121,2122,1,0,0,0,2122,2123,5,34,0,0,2123,2125,3,74,37,0,2124,2126,
		5,165,0,0,2125,2124,1,0,0,0,2125,2126,1,0,0,0,2126,381,1,0,0,0,2127,2129,
		3,384,192,0,2128,2127,1,0,0,0,2129,2130,1,0,0,0,2130,2128,1,0,0,0,2130,
		2131,1,0,0,0,2131,383,1,0,0,0,2132,2138,3,386,193,0,2133,2137,3,388,194,
		0,2134,2137,3,402,201,0,2135,2137,3,410,205,0,2136,2133,1,0,0,0,2136,2134,
		1,0,0,0,2136,2135,1,0,0,0,2137,2140,1,0,0,0,2138,2136,1,0,0,0,2138,2139,
		1,0,0,0,2139,385,1,0,0,0,2140,2138,1,0,0,0,2141,2142,5,92,0,0,2142,2143,
		3,390,195,0,2143,2149,5,34,0,0,2144,2145,3,392,196,0,2145,2146,5,42,0,
		0,2146,2148,1,0,0,0,2147,2144,1,0,0,0,2148,2151,1,0,0,0,2149,2147,1,0,
		0,0,2149,2150,1,0,0,0,2150,2152,1,0,0,0,2151,2149,1,0,0,0,2152,2153,5,
		93,0,0,2153,387,1,0,0,0,2154,2155,5,94,0,0,2155,2156,3,390,195,0,2156,
		2162,5,34,0,0,2157,2158,3,392,196,0,2158,2159,5,42,0,0,2159,2161,1,0,0,
		0,2160,2157,1,0,0,0,2161,2164,1,0,0,0,2162,2160,1,0,0,0,2162,2163,1,0,
		0,0,2163,2165,1,0,0,0,2164,2162,1,0,0,0,2165,2166,5,93,0,0,2166,389,1,
		0,0,0,2167,2168,3,2,1,0,2168,391,1,0,0,0,2169,2170,3,394,197,0,2170,2172,
		5,45,0,0,2171,2173,3,396,198,0,2172,2171,1,0,0,0,2172,2173,1,0,0,0,2173,
		2178,1,0,0,0,2174,2175,5,48,0,0,2175,2177,3,400,200,0,2176,2174,1,0,0,
		0,2177,2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,2181,1,0,
		0,0,2180,2178,1,0,0,0,2181,2182,5,46,0,0,2182,393,1,0,0,0,2183,2184,3,
		2,1,0,2184,395,1,0,0,0,2185,2202,5,11,0,0,2186,2202,5,12,0,0,2187,2202,
		5,13,0,0,2188,2202,5,14,0,0,2189,2198,5,3,0,0,2190,2198,5,4,0,0,2191,2192,
		5,13,0,0,2192,2198,5,4,0,0,2193,2194,5,4,0,0,2194,2198,5,13,0,0,2195,2196,
		5,13,0,0,2196,2198,5,3,0,0,2197,2189,1,0,0,0,2197,2190,1,0,0,0,2197,2191,
		1,0,0,0,2197,2193,1,0,0,0,2197,2195,1,0,0,0,2198,2199,1,0,0,0,2199,2200,
		5,48,0,0,2200,2202,3,398,199,0,2201,2185,1,0,0,0,2201,2186,1,0,0,0,2201,
		2187,1,0,0,0,2201,2188,1,0,0,0,2201,2197,1,0,0,0,2202,397,1,0,0,0,2203,
		2206,3,32,16,0,2204,2206,3,204,102,0,2205,2203,1,0,0,0,2205,2204,1,0,0,
		0,2206,399,1,0,0,0,2207,2208,3,204,102,0,2208,401,1,0,0,0,2209,2211,5,
		95,0,0,2210,2212,3,404,202,0,2211,2210,1,0,0,0,2211,2212,1,0,0,0,2212,
		2219,1,0,0,0,2213,2214,5,45,0,0,2214,2215,5,96,0,0,2215,2216,5,34,0,0,
		2216,2217,5,44,0,0,2217,2218,5,151,0,0,2218,2220,5,46,0,0,2219,2213,1,
		0,0,0,2219,2220,1,0,0,0,2220,2221,1,0,0,0,2221,2222,5,97,0,0,2222,2223,
		3,406,203,0,2223,2224,5,98,0,0,2224,2225,3,406,203,0,2225,2226,5,34,0,
		0,2226,2227,3,408,204,0,2227,2228,5,99,0,0,2228,403,1,0,0,0,2229,2230,
		3,2,1,0,2230,405,1,0,0,0,2231,2243,3,390,195,0,2232,2233,5,45,0,0,2233,
		2236,3,390,195,0,2234,2235,5,48,0,0,2235,2237,3,390,195,0,2236,2234,1,
		0,0,0,2237,2238,1,0,0,0,2238,2236,1,0,0,0,2238,2239,1,0,0,0,2239,2240,
		1,0,0,0,2240,2241,5,46,0,0,2241,2243,1,0,0,0,2242,2231,1,0,0,0,2242,2232,
		1,0,0,0,2243,407,1,0,0,0,2244,2245,5,34,0,0,2245,2246,5,44,0,0,2246,2247,
		3,518,259,0,2247,2248,5,42,0,0,2248,2255,1,0,0,0,2249,2250,5,34,0,0,2250,
		2255,7,16,0,0,2251,2252,5,34,0,0,2252,2253,5,44,0,0,2253,2255,3,480,240,
		0,2254,2244,1,0,0,0,2254,2249,1,0,0,0,2254,2251,1,0,0,0,2255,409,1,0,0,
		0,2256,2257,5,100,0,0,2257,2258,3,394,197,0,2258,2259,5,34,0,0,2259,2260,
		3,340,170,0,2260,2261,5,101,0,0,2261,411,1,0,0,0,2262,2263,3,2,1,0,2263,
		413,1,0,0,0,2264,2265,3,2,1,0,2265,415,1,0,0,0,2266,2267,5,102,0,0,2267,
		2269,3,412,206,0,2268,2270,3,276,138,0,2269,2268,1,0,0,0,2269,2270,1,0,
		0,0,2270,2277,1,0,0,0,2271,2278,3,420,210,0,2272,2274,3,418,209,0,2273,
		2272,1,0,0,0,2274,2275,1,0,0,0,2275,2273,1,0,0,0,2275,2276,1,0,0,0,2276,
		2278,1,0,0,0,2277,2271,1,0,0,0,2277,2273,1,0,0,0,2278,2280,1,0,0,0,2279,
		2281,3,424,212,0,2280,2279,1,0,0,0,2280,2281,1,0,0,0,2281,2283,1,0,0,0,
		2282,2284,3,460,230,0,2283,2282,1,0,0,0,2283,2284,1,0,0,0,2284,2285,1,
		0,0,0,2285,2286,5,103,0,0,2286,417,1,0,0,0,2287,2288,5,104,0,0,2288,2289,
		3,422,211,0,2289,2290,5,105,0,0,2290,2292,3,414,207,0,2291,2293,3,276,
		138,0,2292,2291,1,0,0,0,2292,2293,1,0,0,0,2293,2294,1,0,0,0,2294,2295,
		3,420,210,0,2295,2296,5,106,0,0,2296,419,1,0,0,0,2297,2298,3,438,219,0,
		2298,2299,5,42,0,0,2299,2301,1,0,0,0,2300,2297,1,0,0,0,2301,2304,1,0,0,
		0,2302,2300,1,0,0,0,2302,2303,1,0,0,0,2303,2308,1,0,0,0,2304,2302,1,0,
		0,0,2305,2306,3,446,223,0,2306,2307,5,42,0,0,2307,2309,1,0,0,0,2308,2305,
		1,0,0,0,2309,2310,1,0,0,0,2310,2308,1,0,0,0,2310,2311,1,0,0,0,2311,421,
		1,0,0,0,2312,2313,3,2,1,0,2313,423,1,0,0,0,2314,2320,5,91,0,0,2315,2316,
		3,426,213,0,2316,2317,5,42,0,0,2317,2319,1,0,0,0,2318,2315,1,0,0,0,2319,
		2322,1,0,0,0,2320,2318,1,0,0,0,2320,2321,1,0,0,0,2321,2323,1,0,0,0,2322,
		2320,1,0,0,0,2323,2324,5,61,0,0,2324,425,1,0,0,0,2325,2326,3,432,216,0,
		2326,2327,5,34,0,0,2327,2328,3,428,214,0,2328,2329,5,34,0,0,2329,2331,
		3,74,37,0,2330,2332,5,165,0,0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,
		427,1,0,0,0,2333,2334,3,422,211,0,2334,2335,5,22,0,0,2335,2337,1,0,0,0,
		2336,2333,1,0,0,0,2336,2337,1,0,0,0,2337,2338,1,0,0,0,2338,2362,5,154,
		0,0,2339,2340,3,422,211,0,2340,2341,5,22,0,0,2341,2343,1,0,0,0,2342,2339,
		1,0,0,0,2342,2343,1,0,0,0,2343,2347,1,0,0,0,2344,2345,3,436,218,0,2345,
		2346,5,22,0,0,2346,2348,1,0,0,0,2347,2344,1,0,0,0,2347,2348,1,0,0,0,2348,
		2357,1,0,0,0,2349,2352,3,244,122,0,2350,2352,3,354,177,0,2351,2349,1,0,
		0,0,2351,2350,1,0,0,0,2352,2353,1,0,0,0,2353,2354,5,22,0,0,2354,2356,1,
		0,0,0,2355,2351,1,0,0,0,2356,2359,1,0,0,0,2357,2355,1,0,0,0,2357,2358,
		1,0,0,0,2358,2360,1,0,0,0,2359,2357,1,0,0,0,2360,2362,3,200,100,0,2361,
		2336,1,0,0,0,2361,2342,1,0,0,0,2362,429,1,0,0,0,2363,2364,3,422,211,0,
		2364,2365,5,22,0,0,2365,2367,1,0,0,0,2366,2363,1,0,0,0,2366,2367,1,0,0,
		0,2367,2368,1,0,0,0,2368,2371,3,274,137,0,2369,2370,5,22,0,0,2370,2372,
		3,170,85,0,2371,2369,1,0,0,0,2371,2372,1,0,0,0,2372,431,1,0,0,0,2373,2374,
		3,2,1,0,2374,433,1,0,0,0,2375,2376,3,436,218,0,2376,2377,5,22,0,0,2377,
		2378,3,200,100,0,2378,435,1,0,0,0,2379,2380,3,2,1,0,2380,437,1,0,0,0,2381,
		2382,5,107,0,0,2382,2383,3,440,220,0,2383,2384,3,442,221,0,2384,439,1,
		0,0,0,2385,2386,3,2,1,0,2386,441,1,0,0,0,2387,2394,5,45,0,0,2388,2389,
		5,108,0,0,2389,2390,5,34,0,0,2390,2391,5,44,0,0,2391,2392,3,444,222,0,
		2392,2393,5,48,0,0,2393,2395,1,0,0,0,2394,2388,1,0,0,0,2394,2395,1,0,0,
		0,2395,2402,1,0,0,0,2396,2397,5,109,0,0,2397,2398,5,34,0,0,2398,2399,5,
		44,0,0,2399,2400,3,444,222,0,2400,2401,5,48,0,0,2401,2403,1,0,0,0,2402,
		2396,1,0,0,0,2402,2403,1,0,0,0,2403,2404,1,0,0,0,2404,2405,5,96,0,0,2405,
		2406,5,34,0,0,2406,2407,5,44,0,0,2407,2408,5,151,0,0,2408,2409,5,46,0,
		0,2409,443,1,0,0,0,2410,2415,3,4,2,0,2411,2415,3,430,215,0,2412,2415,3,
		434,217,0,2413,2415,5,154,0,0,2414,2410,1,0,0,0,2414,2411,1,0,0,0,2414,
		2412,1,0,0,0,2414,2413,1,0,0,0,2415,445,1,0,0,0,2416,2418,5,89,0,0,2417,
		2419,7,9,0,0,2418,2417,1,0,0,0,2418,2419,1,0,0,0,2419,2420,1,0,0,0,2420,
		2423,3,436,218,0,2421,2422,5,110,0,0,2422,2424,3,440,220,0,2423,2421,1,
		0,0,0,2423,2424,1,0,0,0,2424,2425,1,0,0,0,2425,2426,5,34,0,0,2426,2431,
		3,376,188,0,2427,2428,5,45,0,0,2428,2429,3,448,224,0,2429,2430,5,46,0,
		0,2430,2432,1,0,0,0,2431,2427,1,0,0,0,2431,2432,1,0,0,0,2432,447,1,0,0,
		0,2433,2438,3,450,225,0,2434,2435,5,48,0,0,2435,2437,3,450,225,0,2436,
		2434,1,0,0,0,2437,2440,1,0,0,0,2438,2436,1,0,0,0,2438,2439,1,0,0,0,2439,
		449,1,0,0,0,2440,2438,1,0,0,0,2441,2444,3,452,226,0,2442,2444,3,454,227,
		0,2443,2441,1,0,0,0,2443,2442,1,0,0,0,2444,451,1,0,0,0,2445,2446,3,244,
		122,0,2446,2447,5,110,0,0,2447,2448,3,440,220,0,2448,453,1,0,0,0,2449,
		2450,3,200,100,0,2450,2451,5,34,0,0,2451,2452,5,44,0,0,2452,2453,3,456,
		228,0,2453,2459,1,0,0,0,2454,2455,3,200,100,0,2455,2456,5,111,0,0,2456,
		2457,3,458,229,0,2457,2459,1,0,0,0,2458,2449,1,0,0,0,2458,2454,1,0,0,0,
		2459,455,1,0,0,0,2460,2465,3,4,2,0,2461,2465,3,144,72,0,2462,2465,3,430,
		215,0,2463,2465,5,154,0,0,2464,2460,1,0,0,0,2464,2461,1,0,0,0,2464,2462,
		1,0,0,0,2464,2463,1,0,0,0,2465,457,1,0,0,0,2466,2469,3,430,215,0,2467,
		2469,5,154,0,0,2468,2466,1,0,0,0,2468,2467,1,0,0,0,2469,459,1,0,0,0,2470,
		2476,5,112,0,0,2471,2472,3,462,231,0,2472,2473,5,42,0,0,2473,2475,1,0,
		0,0,2474,2471,1,0,0,0,2475,2478,1,0,0,0,2476,2474,1,0,0,0,2476,2477,1,
		0,0,0,2477,2479,1,0,0,0,2478,2476,1,0,0,0,2479,2480,5,61,0,0,2480,461,
		1,0,0,0,2481,2482,3,422,211,0,2482,2483,5,22,0,0,2483,2484,3,436,218,0,
		2484,2493,5,22,0,0,2485,2488,3,244,122,0,2486,2488,3,354,177,0,2487,2485,
		1,0,0,0,2487,2486,1,0,0,0,2488,2489,1,0,0,0,2489,2490,5,22,0,0,2490,2492,
		1,0,0,0,2491,2487,1,0,0,0,2492,2495,1,0,0,0,2493,2491,1,0,0,0,2493,2494,
		1,0,0,0,2494,2517,1,0,0,0,2495,2493,1,0,0,0,2496,2498,3,204,102,0,2497,
		2499,3,284,142,0,2498,2497,1,0,0,0,2498,2499,1,0,0,0,2499,2500,1,0,0,0,
		2500,2501,5,34,0,0,2501,2502,3,282,141,0,2502,2518,1,0,0,0,2503,2504,3,
		244,122,0,2504,2505,5,34,0,0,2505,2506,3,320,160,0,2506,2512,1,0,0,0,2507,
		2508,3,354,177,0,2508,2509,5,34,0,0,2509,2510,3,350,175,0,2510,2512,1,
		0,0,0,2511,2503,1,0,0,0,2511,2507,1,0,0,0,2512,2513,1,0,0,0,2513,2514,
		5,34,0,0,2514,2515,5,44,0,0,2515,2516,3,172,86,0,2516,2518,1,0,0,0,2517,
		2496,1,0,0,0,2517,2511,1,0,0,0,2518,463,1,0,0,0,2519,2521,5,113,0,0,2520,
		2522,5,114,0,0,2521,2520,1,0,0,0,2521,2522,1,0,0,0,2522,2523,1,0,0,0,2523,
		2527,3,468,234,0,2524,2526,3,472,236,0,2525,2524,1,0,0,0,2526,2529,1,0,
		0,0,2527,2525,1,0,0,0,2527,2528,1,0,0,0,2528,2530,1,0,0,0,2529,2527,1,
		0,0,0,2530,2531,3,466,233,0,2531,2532,5,115,0,0,2532,465,1,0,0,0,2533,
		2540,3,112,56,0,2534,2540,3,310,155,0,2535,2540,3,324,162,0,2536,2540,
		3,346,173,0,2537,2540,3,356,178,0,2538,2540,3,464,232,0,2539,2533,1,0,
		0,0,2539,2534,1,0,0,0,2539,2535,1,0,0,0,2539,2536,1,0,0,0,2539,2537,1,
		0,0,0,2539,2538,1,0,0,0,2540,2541,1,0,0,0,2541,2539,1,0,0,0,2541,2542,
		1,0,0,0,2542,467,1,0,0,0,2543,2548,3,470,235,0,2544,2545,5,22,0,0,2545,
		2547,3,470,235,0,2546,2544,1,0,0,0,2547,2550,1,0,0,0,2548,2546,1,0,0,0,
		2548,2549,1,0,0,0,2549,469,1,0,0,0,2550,2548,1,0,0,0,2551,2552,3,2,1,0,
		2552,471,1,0,0,0,2553,2554,5,116,0,0,2554,2559,3,468,234,0,2555,2556,5,
		48,0,0,2556,2558,3,468,234,0,2557,2555,1,0,0,0,2558,2561,1,0,0,0,2559,
		2557,1,0,0,0,2559,2560,1,0,0,0,2560,2562,1,0,0,0,2561,2559,1,0,0,0,2562,
		2563,5,42,0,0,2563,473,1,0,0,0,2564,2566,3,472,236,0,2565,2564,1,0,0,0,
		2566,2569,1,0,0,0,2567,2565,1,0,0,0,2567,2568,1,0,0,0,2568,2578,1,0,0,
		0,2569,2567,1,0,0,0,2570,2579,3,276,138,0,2571,2579,3,112,56,0,2572,2579,
		3,424,212,0,2573,2579,3,310,155,0,2574,2579,3,324,162,0,2575,2579,3,346,
		173,0,2576,2579,3,356,178,0,2577,2579,3,464,232,0,2578,2570,1,0,0,0,2578,
		2571,1,0,0,0,2578,2572,1,0,0,0,2578,2573,1,0,0,0,2578,2574,1,0,0,0,2578,
		2575,1,0,0,0,2578,2576,1,0,0,0,2578,2577,1,0,0,0,2579,2580,1,0,0,0,2580,
		2578,1,0,0,0,2580,2581,1,0,0,0,2581,475,1,0,0,0,2582,2584,3,478,239,0,
		2583,2582,1,0,0,0,2584,2585,1,0,0,0,2585,2583,1,0,0,0,2585,2586,1,0,0,
		0,2586,477,1,0,0,0,2587,2588,3,482,241,0,2588,2589,5,34,0,0,2589,2591,
		1,0,0,0,2590,2587,1,0,0,0,2590,2591,1,0,0,0,2591,2598,1,0,0,0,2592,2599,
		3,484,242,0,2593,2599,3,486,243,0,2594,2599,3,488,244,0,2595,2599,3,490,
		245,0,2596,2599,3,492,246,0,2597,2599,5,168,0,0,2598,2592,1,0,0,0,2598,
		2593,1,0,0,0,2598,2594,1,0,0,0,2598,2595,1,0,0,0,2598,2596,1,0,0,0,2598,
		2597,1,0,0,0,2598,2599,1,0,0,0,2599,2601,1,0,0,0,2600,2602,5,187,0,0,2601,
		2600,1,0,0,0,2602,2603,1,0,0,0,2603,2601,1,0,0,0,2603,2604,1,0,0,0,2604,
		479,1,0,0,0,2605,2609,3,484,242,0,2606,2609,3,486,243,0,2607,2609,3,492,
		246,0,2608,2605,1,0,0,0,2608,2606,1,0,0,0,2608,2607,1,0,0,0,2609,481,1,
		0,0,0,2610,2611,3,2,1,0,2611,483,1,0,0,0,2612,2614,3,512,256,0,2613,2615,
		3,494,247,0,2614,2613,1,0,0,0,2614,2615,1,0,0,0,2615,2621,1,0,0,0,2616,
		2618,3,306,153,0,2617,2619,3,496,248,0,2618,2617,1,0,0,0,2618,2619,1,0,
		0,0,2619,2621,1,0,0,0,2620,2612,1,0,0,0,2620,2616,1,0,0,0,2621,485,1,0,
		0,0,2622,2623,5,166,0,0,2623,2625,5,45,0,0,2624,2626,3,494,247,0,2625,
		2624,1,0,0,0,2625,2626,1,0,0,0,2626,2628,1,0,0,0,2627,2629,5,187,0,0,2628,
		2627,1,0,0,0,2629,2630,1,0,0,0,2630,2628,1,0,0,0,2630,2631,1,0,0,0,2631,
		2633,1,0,0,0,2632,2634,3,498,249,0,2633,2632,1,0,0,0,2633,2634,1,0,0,0,
		2634,2635,1,0,0,0,2635,2636,5,46,0,0,2636,487,1,0,0,0,2637,2638,5,169,
		0,0,2638,2639,3,482,241,0,2639,489,1,0,0,0,2640,2684,5,167,0,0,2641,2660,
		3,244,122,0,2642,2660,3,304,152,0,2643,2660,3,344,172,0,2644,2660,5,117,
		0,0,2645,2646,5,57,0,0,2646,2655,5,22,0,0,2647,2650,3,244,122,0,2648,2650,
		3,354,177,0,2649,2647,1,0,0,0,2649,2648,1,0,0,0,2650,2651,1,0,0,0,2651,
		2652,5,22,0,0,2652,2654,1,0,0,0,2653,2649,1,0,0,0,2654,2657,1,0,0,0,2655,
		2653,1,0,0,0,2655,2656,1,0,0,0,2656,2658,1,0,0,0,2657,2655,1,0,0,0,2658,
		2660,3,344,172,0,2659,2641,1,0,0,0,2659,2642,1,0,0,0,2659,2643,1,0,0,0,
		2659,2644,1,0,0,0,2659,2645,1,0,0,0,2660,2676,1,0,0,0,2661,2673,5,45,0,
		0,2662,2664,5,187,0,0,2663,2662,1,0,0,0,2664,2665,1,0,0,0,2665,2663,1,
		0,0,0,2665,2666,1,0,0,0,2666,2668,1,0,0,0,2667,2669,3,502,251,0,2668,2667,
		1,0,0,0,2668,2669,1,0,0,0,2669,2674,1,0,0,0,2670,2672,3,496,248,0,2671,
		2670,1,0,0,0,2671,2672,1,0,0,0,2672,2674,1,0,0,0,2673,2663,1,0,0,0,2673,
		2671,1,0,0,0,2674,2675,1,0,0,0,2675,2677,5,46,0,0,2676,2661,1,0,0,0,2676,
		2677,1,0,0,0,2677,2685,1,0,0,0,2678,2679,5,118,0,0,2679,2680,5,22,0,0,
		2680,2681,3,308,154,0,2681,2682,5,45,0,0,2682,2683,5,46,0,0,2683,2685,
		1,0,0,0,2684,2659,1,0,0,0,2684,2678,1,0,0,0,2685,491,1,0,0,0,2686,2687,
		3,306,153,0,2687,2689,5,45,0,0,2688,2690,5,187,0,0,2689,2688,1,0,0,0,2690,
		2691,1,0,0,0,2691,2689,1,0,0,0,2691,2692,1,0,0,0,2692,2694,1,0,0,0,2693,
		2695,3,502,251,0,2694,2693,1,0,0,0,2694,2695,1,0,0,0,2695,2696,1,0,0,0,
		2696,2697,5,46,0,0,2697,493,1,0,0,0,2698,2702,3,4,2,0,2699,2702,3,144,
		72,0,2700,2702,3,540,270,0,2701,2698,1,0,0,0,2701,2699,1,0,0,0,2701,2700,
		1,0,0,0,2702,495,1,0,0,0,2703,2708,3,494,247,0,2704,2705,5,48,0,0,2705,
		2707,3,494,247,0,2706,2704,1,0,0,0,2707,2710,1,0,0,0,2708,2706,1,0,0,0,
		2708,2709,1,0,0,0,2709,497,1,0,0,0,2710,2708,1,0,0,0,2711,2713,3,500,250,
		0,2712,2711,1,0,0,0,2713,2714,1,0,0,0,2714,2712,1,0,0,0,2714,2715,1,0,
		0,0,2715,499,1,0,0,0,2716,2720,3,484,242,0,2717,2720,3,486,243,0,2718,
		2720,3,492,246,0,2719,2716,1,0,0,0,2719,2717,1,0,0,0,2719,2718,1,0,0,0,
		2720,2722,1,0,0,0,2721,2723,5,187,0,0,2722,2721,1,0,0,0,2723,2724,1,0,
		0,0,2724,2722,1,0,0,0,2724,2725,1,0,0,0,2725,501,1,0,0,0,2726,2728,3,504,
		252,0,2727,2726,1,0,0,0,2728,2731,1,0,0,0,2729,2727,1,0,0,0,2729,2730,
		1,0,0,0,2730,2732,1,0,0,0,2731,2729,1,0,0,0,2732,2733,3,506,253,0,2733,
		503,1,0,0,0,2734,2737,3,508,254,0,2735,2737,3,510,255,0,2736,2734,1,0,
		0,0,2736,2735,1,0,0,0,2737,2738,1,0,0,0,2738,2740,5,48,0,0,2739,2741,5,
		187,0,0,2740,2739,1,0,0,0,2741,2742,1,0,0,0,2742,2740,1,0,0,0,2742,2743,
		1,0,0,0,2743,505,1,0,0,0,2744,2747,3,508,254,0,2745,2747,3,510,255,0,2746,
		2744,1,0,0,0,2746,2745,1,0,0,0,2747,2749,1,0,0,0,2748,2750,5,187,0,0,2749,
		2748,1,0,0,0,2750,2751,1,0,0,0,2751,2749,1,0,0,0,2751,2752,1,0,0,0,2752,
		507,1,0,0,0,2753,2764,3,514,257,0,2754,2765,3,494,247,0,2755,2757,5,45,
		0,0,2756,2758,5,187,0,0,2757,2756,1,0,0,0,2758,2759,1,0,0,0,2759,2757,
		1,0,0,0,2759,2760,1,0,0,0,2760,2761,1,0,0,0,2761,2762,3,498,249,0,2762,
		2763,5,46,0,0,2763,2765,1,0,0,0,2764,2754,1,0,0,0,2764,2755,1,0,0,0,2765,
		509,1,0,0,0,2766,2767,3,516,258,0,2767,2768,3,540,270,0,2768,511,1,0,0,
		0,2769,2770,7,17,0,0,2770,513,1,0,0,0,2771,2772,3,204,102,0,2772,2773,
		5,34,0,0,2773,2774,5,44,0,0,2774,515,1,0,0,0,2775,2777,5,120,0,0,2776,
		2775,1,0,0,0,2776,2777,1,0,0,0,2777,2778,1,0,0,0,2778,2779,3,204,102,0,
		2779,2780,5,44,0,0,2780,2781,5,121,0,0,2781,517,1,0,0,0,2782,2787,3,522,
		261,0,2783,2784,5,122,0,0,2784,2786,3,522,261,0,2785,2783,1,0,0,0,2786,
		2789,1,0,0,0,2787,2785,1,0,0,0,2787,2788,1,0,0,0,2788,519,1,0,0,0,2789,
		2787,1,0,0,0,2790,2791,3,518,259,0,2791,521,1,0,0,0,2792,2797,3,524,262,
		0,2793,2794,5,123,0,0,2794,2796,3,524,262,0,2795,2793,1,0,0,0,2796,2799,
		1,0,0,0,2797,2795,1,0,0,0,2797,2798,1,0,0,0,2798,523,1,0,0,0,2799,2797,
		1,0,0,0,2800,2805,3,526,263,0,2801,2802,7,18,0,0,2802,2804,3,526,263,0,
		2803,2801,1,0,0,0,2804,2807,1,0,0,0,2805,2803,1,0,0,0,2805,2806,1,0,0,
		0,2806,525,1,0,0,0,2807,2805,1,0,0,0,2808,2813,3,528,264,0,2809,2810,7,
		19,0,0,2810,2812,3,528,264,0,2811,2809,1,0,0,0,2812,2815,1,0,0,0,2813,
		2811,1,0,0,0,2813,2814,1,0,0,0,2814,527,1,0,0,0,2815,2813,1,0,0,0,2816,
		2828,3,530,265,0,2817,2824,5,127,0,0,2818,2824,5,121,0,0,2819,2820,5,127,
		0,0,2820,2824,5,44,0,0,2821,2822,5,121,0,0,2822,2824,5,44,0,0,2823,2817,
		1,0,0,0,2823,2818,1,0,0,0,2823,2819,1,0,0,0,2823,2821,1,0,0,0,2824,2825,
		1,0,0,0,2825,2827,3,530,265,0,2826,2823,1,0,0,0,2827,2830,1,0,0,0,2828,
		2826,1,0,0,0,2828,2829,1,0,0,0,2829,529,1,0,0,0,2830,2828,1,0,0,0,2831,
		2836,3,532,266,0,2832,2833,7,1,0,0,2833,2835,3,532,266,0,2834,2832,1,0,
		0,0,2835,2838,1,0,0,0,2836,2834,1,0,0,0,2836,2837,1,0,0,0,2837,531,1,0,
		0,0,2838,2836,1,0,0,0,2839,2848,3,534,267,0,2840,2841,5,64,0,0,2841,2847,
		3,534,267,0,2842,2843,5,128,0,0,2843,2847,3,534,267,0,2844,2845,5,129,
		0,0,2845,2847,3,534,267,0,2846,2840,1,0,0,0,2846,2842,1,0,0,0,2846,2844,
		1,0,0,0,2847,2850,1,0,0,0,2848,2846,1,0,0,0,2848,2849,1,0,0,0,2849,533,
		1,0,0,0,2850,2848,1,0,0,0,2851,2856,3,536,268,0,2852,2853,5,130,0,0,2853,
		2855,3,536,268,0,2854,2852,1,0,0,0,2855,2858,1,0,0,0,2856,2854,1,0,0,0,
		2856,2857,1,0,0,0,2857,535,1,0,0,0,2858,2856,1,0,0,0,2859,2866,5,17,0,
		0,2860,2866,5,16,0,0,2861,2863,5,120,0,0,2862,2861,1,0,0,0,2862,2863,1,
		0,0,0,2863,2864,1,0,0,0,2864,2866,3,538,269,0,2865,2859,1,0,0,0,2865,2860,
		1,0,0,0,2865,2862,1,0,0,0,2866,537,1,0,0,0,2867,2877,3,4,2,0,2868,2877,
		3,144,72,0,2869,2877,3,540,270,0,2870,2877,3,544,272,0,2871,2877,3,190,
		95,0,2872,2873,5,45,0,0,2873,2874,3,518,259,0,2874,2875,5,46,0,0,2875,
		2877,1,0,0,0,2876,2867,1,0,0,0,2876,2868,1,0,0,0,2876,2869,1,0,0,0,2876,
		2870,1,0,0,0,2876,2871,1,0,0,0,2876,2872,1,0,0,0,2877,539,1,0,0,0,2878,
		2880,3,198,99,0,2879,2881,3,542,271,0,2880,2879,1,0,0,0,2880,2881,1,0,
		0,0,2881,541,1,0,0,0,2882,2889,5,22,0,0,2883,2890,5,151,0,0,2884,2886,
		5,73,0,0,2885,2887,7,20,0,0,2886,2885,1,0,0,0,2886,2887,1,0,0,0,2887,2888,
		1,0,0,0,2888,2890,5,151,0,0,2889,2883,1,0,0,0,2889,2884,1,0,0,0,2890,543,
		1,0,0,0,2891,2892,3,306,153,0,2892,2901,5,45,0,0,2893,2898,3,558,279,0,
		2894,2895,5,48,0,0,2895,2897,3,558,279,0,2896,2894,1,0,0,0,2897,2900,1,
		0,0,0,2898,2896,1,0,0,0,2898,2899,1,0,0,0,2899,2902,1,0,0,0,2900,2898,
		1,0,0,0,2901,2893,1,0,0,0,2901,2902,1,0,0,0,2902,2903,1,0,0,0,2903,2904,
		5,46,0,0,2904,545,1,0,0,0,2905,2907,3,548,274,0,2906,2905,1,0,0,0,2906,
		2907,1,0,0,0,2907,2908,1,0,0,0,2908,2910,5,42,0,0,2909,2906,1,0,0,0,2910,
		2911,1,0,0,0,2911,2909,1,0,0,0,2911,2912,1,0,0,0,2912,547,1,0,0,0,2913,
		2918,3,550,275,0,2914,2918,3,556,278,0,2915,2918,3,560,280,0,2916,2918,
		3,572,286,0,2917,2913,1,0,0,0,2917,2914,1,0,0,0,2917,2915,1,0,0,0,2917,
		2916,1,0,0,0,2918,549,1,0,0,0,2919,2920,3,198,99,0,2920,2921,5,34,0,0,
		2921,2922,5,44,0,0,2922,2923,3,518,259,0,2923,2927,1,0,0,0,2924,2927,3,
		194,97,0,2925,2927,3,552,276,0,2926,2919,1,0,0,0,2926,2924,1,0,0,0,2926,
		2925,1,0,0,0,2927,551,1,0,0,0,2928,2931,3,188,94,0,2929,2931,3,196,98,
		0,2930,2928,1,0,0,0,2930,2929,1,0,0,0,2931,2932,1,0,0,0,2932,2933,5,131,
		0,0,2933,2937,5,44,0,0,2934,2938,3,188,94,0,2935,2938,3,196,98,0,2936,
		2938,3,190,95,0,2937,2934,1,0,0,0,2937,2935,1,0,0,0,2937,2936,1,0,0,0,
		2938,553,1,0,0,0,2939,2959,3,244,122,0,2940,2959,3,344,172,0,2941,2959,
		5,57,0,0,2942,2943,5,57,0,0,2943,2945,5,22,0,0,2944,2942,1,0,0,0,2944,
		2945,1,0,0,0,2945,2952,1,0,0,0,2946,2949,3,244,122,0,2947,2949,3,354,177,
		0,2948,2946,1,0,0,0,2948,2947,1,0,0,0,2949,2950,1,0,0,0,2950,2951,5,22,
		0,0,2951,2953,1,0,0,0,2952,2948,1,0,0,0,2953,2954,1,0,0,0,2954,2952,1,
		0,0,0,2954,2955,1,0,0,0,2955,2956,1,0,0,0,2956,2957,3,344,172,0,2957,2959,
		1,0,0,0,2958,2939,1,0,0,0,2958,2940,1,0,0,0,2958,2941,1,0,0,0,2958,2944,
		1,0,0,0,2959,2960,1,0,0,0,2960,2969,5,45,0,0,2961,2966,3,558,279,0,2962,
		2963,5,48,0,0,2963,2965,3,558,279,0,2964,2962,1,0,0,0,2965,2968,1,0,0,
		0,2966,2964,1,0,0,0,2966,2967,1,0,0,0,2967,2970,1,0,0,0,2968,2966,1,0,
		0,0,2969,2961,1,0,0,0,2969,2970,1,0,0,0,2970,2971,1,0,0,0,2971,2972,5,
		46,0,0,2972,555,1,0,0,0,2973,2983,3,544,272,0,2974,2983,3,554,277,0,2975,
		2976,5,118,0,0,2976,2977,5,22,0,0,2977,2978,3,308,154,0,2978,2979,5,45,
		0,0,2979,2980,5,46,0,0,2980,2983,1,0,0,0,2981,2983,5,132,0,0,2982,2973,
		1,0,0,0,2982,2974,1,0,0,0,2982,2975,1,0,0,0,2982,2981,1,0,0,0,2983,557,
		1,0,0,0,2984,2985,3,204,102,0,2985,2986,5,34,0,0,2986,2987,5,44,0,0,2987,
		2989,1,0,0,0,2988,2984,1,0,0,0,2988,2989,1,0,0,0,2989,2990,1,0,0,0,2990,
		3000,3,518,259,0,2991,3000,3,194,97,0,2992,2994,5,120,0,0,2993,2992,1,
		0,0,0,2993,2994,1,0,0,0,2994,2995,1,0,0,0,2995,2996,3,204,102,0,2996,2997,
		5,111,0,0,2997,2998,3,198,99,0,2998,3000,1,0,0,0,2999,2988,1,0,0,0,2999,
		2991,1,0,0,0,2999,2993,1,0,0,0,3000,559,1,0,0,0,3001,3004,3,562,281,0,
		3002,3004,3,564,282,0,3003,3001,1,0,0,0,3003,3002,1,0,0,0,3004,561,1,0,
		0,0,3005,3006,5,133,0,0,3006,3007,3,518,259,0,3007,3008,5,134,0,0,3008,
		3016,3,546,273,0,3009,3010,5,135,0,0,3010,3011,3,518,259,0,3011,3012,5,
		134,0,0,3012,3013,3,546,273,0,3013,3015,1,0,0,0,3014,3009,1,0,0,0,3015,
		3018,1,0,0,0,3016,3014,1,0,0,0,3016,3017,1,0,0,0,3017,3021,1,0,0,0,3018,
		3016,1,0,0,0,3019,3020,5,136,0,0,3020,3022,3,546,273,0,3021,3019,1,0,0,
		0,3021,3022,1,0,0,0,3022,3023,1,0,0,0,3023,3024,5,137,0,0,3024,563,1,0,
		0,0,3025,3026,5,138,0,0,3026,3027,3,518,259,0,3027,3029,5,50,0,0,3028,
		3030,3,566,283,0,3029,3028,1,0,0,0,3030,3031,1,0,0,0,3031,3029,1,0,0,0,
		3031,3032,1,0,0,0,3032,3035,1,0,0,0,3033,3034,5,136,0,0,3034,3036,3,546,
		273,0,3035,3033,1,0,0,0,3035,3036,1,0,0,0,3036,3037,1,0,0,0,3037,3038,
		5,139,0,0,3038,565,1,0,0,0,3039,3040,3,568,284,0,3040,3041,5,34,0,0,3041,
		3042,3,546,273,0,3042,567,1,0,0,0,3043,3048,3,570,285,0,3044,3045,5,48,
		0,0,3045,3047,3,570,285,0,3046,3044,1,0,0,0,3047,3050,1,0,0,0,3048,3046,
		1,0,0,0,3048,3049,1,0,0,0,3049,569,1,0,0,0,3050,3048,1,0,0,0,3051,3054,
		3,134,67,0,3052,3054,3,520,260,0,3053,3051,1,0,0,0,3053,3052,1,0,0,0,3054,
		571,1,0,0,0,3055,3061,3,574,287,0,3056,3061,3,580,290,0,3057,3061,3,582,
		291,0,3058,3061,5,140,0,0,3059,3061,5,141,0,0,3060,3055,1,0,0,0,3060,3056,
		1,0,0,0,3060,3057,1,0,0,0,3060,3058,1,0,0,0,3060,3059,1,0,0,0,3061,573,
		1,0,0,0,3062,3063,5,142,0,0,3063,3064,3,576,288,0,3064,3065,5,34,0,0,3065,
		3066,5,44,0,0,3066,3067,3,578,289,0,3067,3068,5,143,0,0,3068,3069,3,546,
		273,0,3069,3070,5,144,0,0,3070,575,1,0,0,0,3071,3072,3,2,1,0,3072,577,
		1,0,0,0,3073,3074,3,518,259,0,3074,3075,5,98,0,0,3075,3078,3,518,259,0,
		3076,3077,5,145,0,0,3077,3079,3,518,259,0,3078,3076,1,0,0,0,3078,3079,
		1,0,0,0,3079,579,1,0,0,0,3080,3081,5,146,0,0,3081,3082,3,518,259,0,3082,
		3083,5,143,0,0,3083,3084,3,546,273,0,3084,3085,5,147,0,0,3085,581,1,0,
		0,0,3086,3087,5,148,0,0,3087,3088,3,546,273,0,3088,3089,5,149,0,0,3089,
		3090,3,518,259,0,3090,3091,5,150,0,0,3091,583,1,0,0,0,3092,3094,5,171,
		0,0,3093,3092,1,0,0,0,3094,3095,1,0,0,0,3095,3093,1,0,0,0,3095,3096,1,
		0,0,0,3096,585,1,0,0,0,3097,3099,5,172,0,0,3098,3097,1,0,0,0,3099,3100,
		1,0,0,0,3100,3098,1,0,0,0,3100,3101,1,0,0,0,3101,587,1,0,0,0,3102,3189,
		1,0,0,0,3103,3189,5,41,0,0,3104,3189,5,43,0,0,3105,3189,5,49,0,0,3106,
		3189,5,50,0,0,3107,3189,5,51,0,0,3108,3189,5,52,0,0,3109,3189,5,53,0,0,
		3110,3189,5,54,0,0,3111,3189,5,55,0,0,3112,3189,5,57,0,0,3113,3189,5,58,
		0,0,3114,3189,5,59,0,0,3115,3189,5,60,0,0,3116,3189,5,61,0,0,3117,3189,
		5,62,0,0,3118,3189,5,63,0,0,3119,3189,5,66,0,0,3120,3189,5,68,0,0,3121,
		3189,5,67,0,0,3122,3189,5,69,0,0,3123,3189,5,70,0,0,3124,3189,5,71,0,0,
		3125,3189,5,72,0,0,3126,3189,5,74,0,0,3127,3189,5,75,0,0,3128,3189,5,76,
		0,0,3129,3189,5,77,0,0,3130,3189,5,78,0,0,3131,3189,5,79,0,0,3132,3189,
		5,80,0,0,3133,3189,5,81,0,0,3134,3189,5,65,0,0,3135,3189,5,83,0,0,3136,
		3189,5,82,0,0,3137,3189,5,84,0,0,3138,3189,5,85,0,0,3139,3189,5,86,0,0,
		3140,3189,5,88,0,0,3141,3189,5,89,0,0,3142,3189,5,90,0,0,3143,3189,5,91,
		0,0,3144,3189,5,92,0,0,3145,3189,5,93,0,0,3146,3189,5,94,0,0,3147,3189,
		5,95,0,0,3148,3189,5,96,0,0,3149,3189,5,97,0,0,3150,3189,5,98,0,0,3151,
		3189,5,99,0,0,3152,3189,5,100,0,0,3153,3189,5,101,0,0,3154,3189,5,102,
		0,0,3155,3189,5,103,0,0,3156,3189,5,104,0,0,3157,3189,5,105,0,0,3158,3189,
		5,106,0,0,3159,3189,5,107,0,0,3160,3189,5,108,0,0,3161,3189,5,109,0,0,
		3162,3189,5,110,0,0,3163,3189,5,112,0,0,3164,3189,5,113,0,0,3165,3189,
		5,115,0,0,3166,3189,5,116,0,0,3167,3189,5,118,0,0,3168,3189,5,119,0,0,
		3169,3189,5,132,0,0,3170,3189,5,133,0,0,3171,3189,5,134,0,0,3172,3189,
		5,135,0,0,3173,3189,5,136,0,0,3174,3189,5,137,0,0,3175,3189,5,138,0,0,
		3176,3189,5,139,0,0,3177,3189,5,140,0,0,3178,3189,5,141,0,0,3179,3189,
		5,142,0,0,3180,3189,5,144,0,0,3181,3189,5,143,0,0,3182,3189,5,146,0,0,
		3183,3189,5,145,0,0,3184,3189,5,147,0,0,3185,3189,5,148,0,0,3186,3189,
		5,149,0,0,3187,3189,5,150,0,0,3188,3102,1,0,0,0,3188,3103,1,0,0,0,3188,
		3104,1,0,0,0,3188,3105,1,0,0,0,3188,3106,1,0,0,0,3188,3107,1,0,0,0,3188,
		3108,1,0,0,0,3188,3109,1,0,0,0,3188,3110,1,0,0,0,3188,3111,1,0,0,0,3188,
		3112,1,0,0,0,3188,3113,1,0,0,0,3188,3114,1,0,0,0,3188,3115,1,0,0,0,3188,
		3116,1,0,0,0,3188,3117,1,0,0,0,3188,3118,1,0,0,0,3188,3119,1,0,0,0,3188,
		3120,1,0,0,0,3188,3121,1,0,0,0,3188,3122,1,0,0,0,3188,3123,1,0,0,0,3188,
		3124,1,0,0,0,3188,3125,1,0,0,0,3188,3126,1,0,0,0,3188,3127,1,0,0,0,3188,
		3128,1,0,0,0,3188,3129,1,0,0,0,3188,3130,1,0,0,0,3188,3131,1,0,0,0,3188,
		3132,1,0,0,0,3188,3133,1,0,0,0,3188,3134,1,0,0,0,3188,3135,1,0,0,0,3188,
		3136,1,0,0,0,3188,3137,1,0,0,0,3188,3138,1,0,0,0,3188,3139,1,0,0,0,3188,
		3140,1,0,0,0,3188,3141,1,0,0,0,3188,3142,1,0,0,0,3188,3143,1,0,0,0,3188,
		3144,1,0,0,0,3188,3145,1,0,0,0,3188,3146,1,0,0,0,3188,3147,1,0,0,0,3188,
		3148,1,0,0,0,3188,3149,1,0,0,0,3188,3150,1,0,0,0,3188,3151,1,0,0,0,3188,
		3152,1,0,0,0,3188,3153,1,0,0,0,3188,3154,1,0,0,0,3188,3155,1,0,0,0,3188,
		3156,1,0,0,0,3188,3157,1,0,0,0,3188,3158,1,0,0,0,3188,3159,1,0,0,0,3188,
		3160,1,0,0,0,3188,3161,1,0,0,0,3188,3162,1,0,0,0,3188,3163,1,0,0,0,3188,
		3164,1,0,0,0,3188,3165,1,0,0,0,3188,3166,1,0,0,0,3188,3167,1,0,0,0,3188,
		3168,1,0,0,0,3188,3169,1,0,0,0,3188,3170,1,0,0,0,3188,3171,1,0,0,0,3188,
		3172,1,0,0,0,3188,3173,1,0,0,0,3188,3174,1,0,0,0,3188,3175,1,0,0,0,3188,
		3176,1,0,0,0,3188,3177,1,0,0,0,3188,3178,1,0,0,0,3188,3179,1,0,0,0,3188,
		3180,1,0,0,0,3188,3181,1,0,0,0,3188,3182,1,0,0,0,3188,3183,1,0,0,0,3188,
		3184,1,0,0,0,3188,3185,1,0,0,0,3188,3186,1,0,0,0,3188,3187,1,0,0,0,3189,
		589,1,0,0,0,356,596,598,609,613,618,624,627,633,638,642,647,651,656,660,
		667,671,677,681,687,696,703,709,715,719,726,735,744,746,755,757,766,768,
		777,779,790,792,803,805,831,856,863,867,875,881,885,896,903,911,918,928,
		938,948,958,979,991,1002,1006,1012,1022,1026,1036,1044,1053,1057,1065,
		1072,1080,1086,1091,1098,1100,1105,1117,1127,1134,1142,1149,1154,1160,
		1169,1177,1183,1187,1194,1201,1203,1209,1216,1226,1239,1247,1257,1262,
		1273,1282,1289,1299,1305,1309,1318,1320,1324,1328,1335,1337,1345,1359,
		1366,1374,1390,1393,1399,1414,1426,1446,1456,1465,1472,1477,1484,1491,
		1499,1507,1515,1527,1530,1537,1545,1552,1559,1566,1572,1582,1588,1595,
		1602,1614,1620,1627,1636,1643,1649,1656,1667,1677,1682,1692,1697,1701,
		1706,1727,1729,1733,1740,1751,1756,1762,1764,1768,1775,1779,1786,1790,
		1797,1806,1812,1818,1820,1824,1830,1832,1838,1842,1849,1853,1860,1868,
		1872,1879,1886,1891,1896,1903,1914,1918,1921,1924,1929,1934,1936,1946,
		1952,1957,1961,1965,1967,1973,1985,1997,2004,2012,2017,2022,2031,2036,
		2045,2051,2058,2068,2083,2085,2089,2100,2111,2120,2125,2130,2136,2138,
		2149,2162,2172,2178,2197,2201,2205,2211,2219,2238,2242,2254,2269,2275,
		2277,2280,2283,2292,2302,2310,2320,2331,2336,2342,2347,2351,2357,2361,
		2366,2371,2394,2402,2414,2418,2423,2431,2438,2443,2458,2464,2468,2476,
		2487,2493,2498,2511,2517,2521,2527,2539,2541,2548,2559,2567,2578,2580,
		2585,2590,2598,2603,2608,2614,2618,2620,2625,2630,2633,2649,2655,2659,
		2665,2668,2671,2673,2676,2684,2691,2694,2701,2708,2714,2719,2724,2729,
		2736,2742,2746,2751,2759,2764,2776,2787,2797,2805,2813,2823,2828,2836,
		2846,2848,2856,2862,2865,2876,2880,2886,2889,2898,2901,2906,2911,2917,
		2926,2930,2937,2944,2948,2954,2958,2966,2969,2982,2988,2993,2999,3003,
		3016,3021,3031,3035,3048,3053,3060,3078,3095,3100,3188
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
